<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-230.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>java中RabbitMQ高级应用_java - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">java中RabbitMQ高级应用_java</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">1、消息可靠性投递</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_0_0" rel="nofollow"> 1.1、确认模式</a></li> <li><a href="#_lab2_0_1" rel="nofollow"> 1.2、退回模式</a></li> <li><a href="#_lab2_0_2" rel="nofollow"> 1.3、确认机制</a></li> </ul> <li><a href="#_label1" rel="nofollow">2、消费端限流</a></li> <ul class="second_class_ul"></ul> <li><a href="#_label2" rel="nofollow">3、消息过期时间</a></li> <ul class="second_class_ul"></ul> <li><a href="#_label3" rel="nofollow">4、死信队列</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_3_3" rel="nofollow"> 4.1、死信概念</a></li> <li><a href="#_lab2_3_4" rel="nofollow"> 4.2、延迟队列</a></li> </ul> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>1、消息可靠性投递</h2> <p> 在使用 <code>RabbitMQ</code> 的时候，生产者在进行消息投递的时候如果想知道消息是否成功的投递到对应的交换机和队列中，有两种方式可以用来控制消息投递的可靠性模式 。</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220504/6978a6b462e2b5214ba7f757ddfa2d7c.jpg"></p> <p> 由上图的整个消息的投递过程来看，生产者的消息进入到中间件中会首先到达交换机，然后再从交换机传递到队列中去，也就是分为两步走战略。那么消息的丢失情况也就是会出现在这两个阶段中，RabbitMQ 贴心的为我们提供了针对于这两个部分的可靠新传递模式：</p> <ul> <li> <strong>confirm 模式</strong>。</li> <li> <strong>return 模式</strong>。</li> </ul> <p> 利用这两个回调模式来确保消息的传递可靠。</p> <p class="maodian"><a name="_lab2_0_0" rel="nofollow"></a></p> <h3> 1.1、确认模式</h3> <p> 消息从生产者到交换机之间传递会返回一个 <code>confirmCallback</code> 的回调。可以直接在 <code>rabbitTemplate</code> 实例中进行确认逻辑的设置。如果是使用 <code>XML</code> 配置的话需要在工厂配置开启 <strong>publisher-confirms="true"</strong>，<code>YAML</code> 的配置就直接 <strong>publisher-confirm-type: correlated</strong>，他默认是 <code>NONE</code> ，需要手动开启。</p> <div class="ay1code"> <pre class="brush:java;">@RunWith(SpringJUnit4ClassRunner.class)  @ContextConfiguration(locations = "classpath:spring-rabbitmq.xml")  public class Producer {      @Autowired      private RabbitTemplate rabbitTemplate;        @Test      public void producer() throws InterruptedException {          rabbitTemplate.setConfirmCallback(new RabbitTemplate.ConfirmCallback() {              @Override              public void confirm(CorrelationData correlationData, boolean b, String s) {                  System.out.println();                  if (!b) {                      //	消息重发之类的处理                      System.out.println(s);                  } else {                      System.out.println("交换机成功接收消息");                  }              }          });          rabbitTemplate.convertAndSend("default_exchange", "default_queue",                  "hello world &amp; beordie");          TimeUnit.SECONDS.sleep(5);      }  }</pre> </div> <p> 上面的确认是由一个 <code>confirm</code> 的函数执行的，里面携带了三个参数，第一个是配置的相关信息，第二个表示交换机是否成功的接收到消息，第三个参数是指没有成功接收消息的原因。</p> <p class="maodian"><a name="_lab2_0_1" rel="nofollow"></a></p> <h3> 1.2、退回模式</h3> <p> 从交换机到消息队列投递失败会返回一个 <code>returnCallback</code> 。在工厂配置中开启回退模式 <strong>publisher-returns="true"</strong> ，设置交换机处理消息失败的模式（默认 false 直接将消息进行丢弃），添加退回处理的逻辑。</p> <div class="ay1code"> <pre class="brush:java;">@RunWith(SpringJUnit4ClassRunner.class)  @ContextConfiguration(locations = "classpath:spring-rabbitmq.xml")  public class Producer {      @Autowired      private RabbitTemplate rabbitTemplate;        @Test      public void producer() throws InterruptedException {          rabbitTemplate.setMandatory(true);          rabbitTemplate.setReturnCallback(new RabbitTemplate.ReturnCallback() {              @Override              public void returnedMessage(Message message, int replyCode, String replyText, String exchange, String routingKey) {                  //  重发逻辑处理                  System.out.println(message.getBody() + " 投递消息队列失败");              }          });          rabbitTemplate.convertAndSend("default_exchange", "default_queue",                  "hello world &amp; beordie");          TimeUnit.SECONDS.sleep(5);      }  }</pre> </div> <p> <code>returnedMessage</code> 中携带五个参数、分别指的是消息对象、错误码、错误信息、交换机、路由键。</p> <p class="maodian"><a name="_lab2_0_2" rel="nofollow"></a></p> <h3> 1.3、确认机制</h3> <p> 在消费者抓取消息队列中的数据取消费之后会有一个确认机制进行消息的确认，防止因为抓取消息之后但没有消费成功而导致的消息丢失。有三种确认方式：</p> <ul> <li> <p><strong>自动确认</strong>：<code>acknowledge="none"</code></p> </li> <li> <p><strong>手动确认</strong>：<code>acknowledge="manual"</code></p> </li> <li> <p><strong>根据异常情况确认</strong>：<code>acknowledge="auto"</code></p> </li> </ul> <p> 其中自动确认是指一旦消息被消费者抓取就自动默认成功，并将消息从消息队列中进行移除，如果这个时候消费端消费出现问题，那么也会是默认消息消费成功，但是实际上是没有消费成功的，也就是当前的消息丢失了。默认的情况就是自动确认机制。</p> <p> 如果设置手动确认的方式，就需要在正常消费消息之后进行回调确认 <code>channel.basicAck()</code>，手动签收。如果业务处理过程中发生了异常则调用 <code>channel.basicNack()</code> 重新发送消息。</p> <p> 首先需要在队列绑定时进行确认机制的配置，设置为手动签收。</p> <div class="ay1code"> <pre class="brush:xml;">&lt;!-- 绑定队列 --&gt;  &lt;rabbit:listener-container connection-factory="rabbitFactory" auto-declare="true" acknowledge="manual"&gt;      &lt;rabbit:listener ref="rabbirConsumer" queue-names="default_queue"/&gt;  &lt;/rabbit:listener-container&gt;</pre> </div> <p> 生产者一端不用更改，只需要改变消费者的实现进行消息自动签收就可以了，正常执行业务则签收消息，业务发生错误则选择消息拒签，消息重发或者丢弃。</p> <div class="ay1code"> <pre class="brush:java;">public class ConsumerAck implements ChannelAwareMessageListener {      @Override      public void onMessage(Message message, Channel channel) throws Exception {          //  消息唯一ID          long tag = message.getMessageProperties().getDeliveryTag();          try {              String msg = new String(message.getBody(), "utf-8");              channel.basicAck(tag, true);              System.out.println("接收消息: " + msg);          } catch (Exception e) {              System.out.println("接收消息异常");              channel.basicNack(tag, true, true);              e.printStackTrace();          }      }  }</pre> </div> <p> 里面涉及三个简单的签收函数，一是正确签收的 <code>basicAck</code> ，二是单条拒签的 <code>basicReject</code> ，三是批量拒签的 <code>basicNack</code> 。</p> <ul> <li> <strong>basicAck</strong> 第一个参数表示消息在通道中的唯一ID，只针对当前的 Channel；第二个参数表示是否批量同意，如果是 false 的话只会同意签收当前ID的一条消息，将其从消息队列中进行删除，而如果是 true 的话将会把此ID之前的消息一起给同意签收了。</li> <li> <strong>basicReject</strong> 第一个参数依旧表示消息的唯一ID，第二个参数表示是否重新回队发送，false 表示直接丢弃该条消息或者有死信队列可以接收， true 则表示重新回队进行消息发送，所有操作只针对当前的消息。</li> <li> <strong>basicNack</strong> 比第二个多了一个参数，也就是处于中间位置的布尔值，表示是否批量进行。</li> </ul> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>2、消费端限流</h2> <p> 在用户请求和DB服务处理之间增加消息中间件的隔离，使得突发流量全部让消息队列来抗，降低服务端被冲垮的可能性。让所有的请求都往队列中存，消费端只需要匀速的取出消息进行消费，这样就能保证运行效率，也不会因为后台的阻塞而导致客户端得不到正常的响应（当然指的是一些不需要同步回显的任务）。</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220504/af7d6cceb853c9e8cae99b893d50e496.jpg"></p> <p> 只需要在消费者绑定消息队列时指定取出消息的速率即可，需要使用手动签收的方式，每进行一次的签收才会从队列中再取出下一条数据。</p> <div class="ay1code"> <pre class="brush:xml;">&lt;!-- 绑定队列 --&gt;  &lt;rabbit:listener-container connection-factory="rabbitFactory" auto-declare="true"                             acknowledge="manual" prefetch="1"&gt;      &lt;rabbit:listener ref="rabbirConsumer" queue-names="default_queue"/&gt;  &lt;/rabbit:listener-container&gt;</pre> </div> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>3、消息过期时间</h2> <p> 消息队列提供了存储在队列中消息的过期时间，分为两个方向的实现，一个是针对于整个队列中的所有消息，也就是队列的过期时间，另一个是针对当前消息的过期时间，也就是针对于单条消息单独设置。</p> <p> 队列的过期时间设置很简单，只需要在创建队列时进行过期时间的指定即可，也可以通过控制台直接创建指定过期时间。一旦队列过期时间到了，队列中还未被消费的消息都将过期，进行队列的过期处理。</p> <div class="ay1code"> <pre class="brush:xml;">&lt;rabbit:queue id="default_queue" name="default_queue" auto-declare="true"&gt;      &lt;rabbit:queue-arguments&gt;          &lt;entry key="x-message-ttl" value="10000" value-type="java.lang.Integer"/&gt;      &lt;/rabbit:queue-arguments&gt;  &lt;/rabbit:queue&gt;</pre> </div> <p> 单条消息的过期时间需要在发送的时候进行单独的指定，发送的时候指定配置的额外信息，配置的编写由配置类完成。</p> <p> 如果一条消息的过期时间到了，但是他此时处于队列的中间，那么他将不会被处理，只有当之后处理到时候才会进行判断是否过期。</p> <div class="ay1code"> <pre class="brush:java;">MessagePostProcessor messagePostProcessor = new MessagePostProcessor() {      @Override      public Message postProcessMessage(Message message) throws          AmqpException {          //	设置 message 的过期时间          message.getMessageProperties().setExpiration("5000");          //	返回该消息          return message;      }  };  rabbitTemplate.convertAndSend("exchange", "route", "msg", messagePostProcessor);</pre> </div> <p> 如果说同时设置了消息的过期时间和队列的过期时间，那么最终的过期时间由最短的时间进行决定，也就是说如果当前消息的过期时间没到，但是整个队列的过期时间到了，那么队列中的所有消息也自然就过期了，执行过期的处理策略。</p> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>4、死信队列</h2> <p class="maodian"><a name="_lab2_3_3" rel="nofollow"></a></p> <h3> 4.1、死信概念</h3> <blockquote> <p>死信队列指的是死信交换机，当一条消息成为死信之后可以重新发送到另一个交换机进行处理，而进行处理的这个交换机就叫做死信交换机。</p> </blockquote> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220504/eebaf0255bdc6e14f49d5ec1e718d617.jpg"></p> <ul> <li>消息成为死信消息有几种情况 <p>队列的消息长度达到限制</p> <p>消费者拒接消息的时候不把消息重新放入队列中</p> <p>队列存在消息过期设置，消息超时未被消费</p> <p>消息存在过期时间，在投递给消费者时发现过期</p> </li> </ul> <p> 在创建队列时可以在配置中指定相关的信息，例如死信交换机、队列长度等等，之后的一系列工作就不由程序员进行操作了，MQ 会自己完成配置过的事件响应。</p> <div class="ay1code"> <pre class="brush:xml;">&lt;rabbit:queue id="default_queue" name="default_queue" auto-declare="true"&gt;      &lt;rabbit:queue-arguments&gt;          &lt;!-- 死信交换机 --&gt;          &lt;entry key="x-dead-letter-exchange" value-type="dlx_exchane"/&gt;          &lt;!-- 路由 --&gt;          &lt;entry key="x-dead-letter-routing-key" value-type="dlx_routing"/&gt;          &lt;!-- 队列过期时间 --&gt;          &lt;entry key="x-message-ttl" value="10000" value-type="java.lang.Integer"/&gt;          &lt;!-- 队列长度 --&gt;          &lt;entry key="x-max-length" value-type="java.lang.Integer" value="10"/&gt;      &lt;/rabbit:queue-arguments&gt;  &lt;/rabbit:queue&gt;</pre> </div> <p class="maodian"><a name="_lab2_3_4" rel="nofollow"></a></p> <h3> 4.2、延迟队列</h3> <p> 延迟队列指的是消息在进入队列后不会立即被消费，只有到达指定时间之后才会被消费，也就是需要有一个时间的判断条件。</p> <p> 消息队列实际上是没有提供对延迟队列的实现的，但是可以通过 <code>TTL</code> + <code>死信队列</code> 的方式完成，设置一个队列，不被任何的消费者所消费，所有的消息进入都会被保存在里面，设置队列的过期时间，一旦队列过期将所有的消息过渡到绑定的死信队列中。</p> <p> 再由具体的消费者来消费死信队列中的消息，这样就实现了延迟队列的功能。</p> <p> 例如实现一个下单超时支付取消订单的功能：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220504/9d500e2585d53c54ce712bd4dc0a25ec.jpg"></p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-229.htm">pandas高阶应用</a></p>
                                        <p>下一个：<a href="/html/category/article-231.htm">通俗易懂：窗口函数案例详解</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-220.htm">kafka踩坑java找不到kafka-run-class.sh: line 309: exec: java: not found</a></h4>
                <p>今天执行 user_1@test_1:/opt/kafka$ sudo bin/zookeeper-server-start.sh config/zookeeper.properties/opt/ka</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-236.htm">PHP回调/可调用对象详解</a></h4>
                <p>定义和用法 回调是PHP中的伪类型。在PHP 5.4中，引入了Callable类型提示，类似于Callback。当某个对象被标识为可调用时，意味着它可以用作可调用的函数。可调用对象可以是内置的或用户定</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-228.htm">Android jetpack room+ViewModel+liveData 数据自动更新</a></h4>
                <p>Android jetpack room的使用_安果移不动的博客-CSDN博客 接上篇博客 我们用google推荐的这种方式  &nbsp; 修改： StudentDao package com.an</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-211.htm">谨慎使用Arrays.asList()</a></h4>
                <p>经过了两个月的【深入学习Java编程方法】课程学习，对Java的一些新特性有了更多的了解。依旧，坑洼遍地。 Java中的Collection类是一个很好用、很常用的类，省去了当年C语言手动链表的麻烦之</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-227.htm">vue更新数据后重新请求数据并刷新页面</a></h4>
                <p>首先要配置好路由 在app.vue添加下面代码 export default {   provide() {     return {       reload: this.reload,     }</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-229.htm">pandas高阶应用</a></h4>
                <p>1、时间序列相关操作 pd的date_range中的基本时间序列频率     Alias   Description（偏移量类型）   说明     B   business day frequenc</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-257.htm">postman测试@pathvariable,@requestparam,@requestbody发送情况</a></h4>
                <p>postman测试@pathvariable,@requestparam,@requestbody发送情况  1、三种方式简单说明  1.1、@Pathvariable 通过占位符的方式获取入参，前端</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-225.htm">坑——java里List的remove方法</a></h4>
                <p>写过的类似代码： /**  * 2018年5月20日上午9:54:02  */ package com.test;  import java.util.ArrayList; import java.u</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-206.htm">眼见不一定为实：调用链HBase倾斜修复</a></h4>
                <p>hello，大家好，我是小楼。 今天给大家分享一个关于HBase数据倾斜的排查案例，不懂调用链？不懂HBase？没关系，看完包懂~ 背景 最近HBase负责人反馈HBase存储的调用链数据偶尔出现极其</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-215.htm">你不知道的Python容器</a></h4>
                <p>你不知道的Python容器  你不知道的Python容器  散列表  ChainMap MappingProxyType   线性表 堆 参考资料    昨天阅读了《Python Tricks: Th</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>