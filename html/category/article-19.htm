<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-19.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Vue指令之v-for的使用说明_vue.js - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Vue指令之v-for的使用说明_vue.js</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">Vue v-for的使用</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_0_0" rel="nofollow">1.迭代普通数组</a></li> <li><a href="#_lab2_0_1" rel="nofollow">2.迭代对象数组</a></li> <li><a href="#_lab2_0_2" rel="nofollow">3.迭代对象</a></li> <li><a href="#_lab2_0_3" rel="nofollow">4.迭代数字</a></li> </ul> <li><a href="#_label1" rel="nofollow">v-for的最佳使用技巧</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_1_4" rel="nofollow">1.始终在v-for循环中使用key</a></li> <li><a href="#_lab2_1_5" rel="nofollow">2.不要在循环中使用v-if</a></li> <li><a href="#_lab2_1_6" rel="nofollow">3.使用计算属性或方法来处理数据后再做数据遍历</a></li> <li><a href="#_lab2_1_7" rel="nofollow">4.在一个范围内循环</a></li> <li><a href="#_lab2_1_8" rel="nofollow">5.在循环中访问项目的索引</a></li> <li><a href="#_lab2_1_9" rel="nofollow">6.遍历一个对象</a></li> </ul> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>Vue v-for的使用</h2> <p class="maodian"><a name="_lab2_0_0" rel="nofollow"></a></p> <h3>1.迭代普通数组</h3> <p>在data中定义普通数组</p> <div class="ay1code"> <pre class="brush:js;">data:{        list:[1,2,3,4,5,6]  }</pre> </div> <p>在html中使用 v-for 指令渲染</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;p v-for="(item,i) in list"&gt;--索引值--{{i}}   --每一项--{{item}}&lt;/p&gt;</pre> </div> <p class="maodian"><a name="_lab2_0_1" rel="nofollow"></a></p> <h3>2.迭代对象数组</h3> <p>在data中定义对象数组</p> <div class="ay1code"> <pre class="brush:js;">data:{        list:[1,2,3,4,5,6],        listObj:[          {id:1, name:'zs1'},          {id:2, name:'zs2'},          {id:3, name:'zs3'},          {id:4, name:'zs4'},          {id:5, name:'zs5'},          {id:6, name:'zs6'},        ]  }</pre> </div> <p>在html中使用 v-for 指令渲染</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;p v-for="(user,i) in listObj"&gt;--id--{{user.id}}   --姓名--{{user.name}}&lt;/p&gt;</pre> </div> <p class="maodian"><a name="_lab2_0_2" rel="nofollow"></a></p> <h3>3.迭代对象</h3> <p>在data中定义对象</p> <div class="ay1code"> <pre class="brush:js;">data:{        user:{          id:1,          name:'托尼.贾',          gender:'男'        }  }</pre> </div> <p>在html中使用 v-for 指令渲染</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;p v-for="(val,key) in user"&gt;--键是--{{key}}--值是--{{val}}&lt;/p&gt;</pre> </div> <p class="maodian"><a name="_lab2_0_3" rel="nofollow"></a></p> <h3>4.迭代数字</h3> <div class="ay1code"> <pre class="brush:xhtml;">&lt;!-- 注意：如果使用v-for迭代数字的话，前面 count 的值从 1 开始--&gt;  &lt;p v-for="count in 10"&gt;这是第{{count}}次循环&lt;/p&gt;</pre> </div> <p><strong>完整代码：</strong></p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;html&gt;    &lt;head&gt;      &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;    &lt;/head&gt;  &lt;body&gt;    &lt;div id='app'&gt;      &lt;!--v-for循环普通数组--&gt;      &lt;p v-for="(item,i) in list"&gt;--索引值--{{i}}   --每一项--{{item}}&lt;/p&gt;      &lt;br/&gt;      &lt;!--v-for循环对象数组--&gt;      &lt;p v-for="(user,i) in listObj"&gt;--id--{{user.id}}   --姓名--{{user.name}}&lt;/p&gt;      &lt;br/&gt;      &lt;!--注意，在遍历对象的键值对的时候，除了有 val 和 key,在第三个位置还有一个索引--&gt;      &lt;p v-for="(val,key) in user"&gt;--键是--{{key}}  --值是--{{val}}&lt;/p&gt;      &lt;br/&gt;      &lt;!-- in 后面我们放过数组、对象数组、对象，还可以放数字--&gt;      &lt;!-- 注意：如果使用v-for迭代数字的话，前面 count 的值从 1 开始--&gt;      &lt;p v-for="count in 10"&gt;这是第{{count}}次循环&lt;/p&gt;    &lt;/div&gt;  &lt;/body&gt;  &lt;script src="vue.min.js"&gt;&lt;/script&gt;  &lt;script&gt;    var vm = new Vue({      el:'#app',      data:{        list:[1,2,3,4,5,6],        listObj:[          {id:1, name:'zs1'},          {id:2, name:'zs2'},          {id:3, name:'zs3'},          {id:4, name:'zs4'},          {id:5, name:'zs5'},          {id:6, name:'zs6'},        ],        user:{          id:1,          name:'托尼.贾',          gender:'男'        }      }    });  &lt;/script&gt;  &lt;/html&gt;</pre> </div> <p><strong>截图：</strong></p> <p><img fetchpriority="high" decoding="async" alt="" height="958" src="http://img.555519.xyz/uploads3/20220423/2402199202d08a48413eb5b30f753553.jpg"></p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>v-for的最佳使用技巧</h2> <p>在vuejs中，v-for 的使用是比较常见的，它允许您在模板代码中编写for循环。那么在使用v-for的时候，可曾思考过使用这个指令的一些技巧吗？</p> <p>在介绍它的使用技巧之前，我先介绍下它的基本用法吧，在vue中v-for可以遍历数组、对象、字符串，但是用的最多的还是遍历数组，基本方法如下：</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;div id="app"&gt;      &lt;ul&gt;    &lt;li v-for='item in list'&gt;      {{ item.name }}    &lt;/li&gt;  &lt;/ul&gt;  &lt;/div&gt;</pre> </div> <p>可能有些初学者在使用的过程中，不会考虑太多的使用技巧，直接遍历定义在data中的数据，其实vue在设计的初衷，也考虑到了这个问题，如果频繁使用data中的数据，可能会造成一些性能上的消耗，是相当不友好的。</p> <p>在本篇文章中，我将介绍六种方法来使你的 v-for 代码更加精确，可预测和强大。</p> <p class="maodian"><a name="_lab2_1_4" rel="nofollow"></a></p> <h3>1.始终在v-for循环中使用key</h3> <p>建议在遍历数据的时候，都尽可能的加上key，设置一个惟一的键属性，它可以确保组件以您期望的方式工作。有些时候，可能使用索引index也可以，但是在一些特定的场景下，比如多场景登录下，如果不使用key来标识当前使用的登录方式，那么可能会造成数据的紊乱问题，如果数据量比较大， 页面的数据更新时会造成渲染数据消耗很大的性能甚至出现不可预测的bug，如果我们对每个元素都有唯一的键引用，那么我们就可以更好地准确地预测DOM将如何操作，就可以避免很多不必要的问题出现。</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;div id="app"&gt;      &lt;ul&gt;    &lt;li v-for='item in list'  :key='item.id'&gt;      {{ item.name }}    &lt;/li&gt;  &lt;/ul&gt;  &lt;/div&gt;</pre> </div> <p class="maodian"><a name="_lab2_1_5" rel="nofollow"></a></p> <h3>2.不要在循环中使用v-if</h3> <p>一个超级常见的错误是使用 v-if 来过滤 v-for 循环的数据。Vuejs优先考虑 v-for 而不是 v-if,这意味着组件将循环遍历每个元素，然后检查 v-if 条件以确定是否应渲染。因此，实际上，无论条件是什么，都将遍历数组。尽管这看起来很直观，但它会导致一个巨大的性能问题</p> <div class="ay1code"> <pre class="brush:xhtml;">/*千万不要这样写，切记切记*/  &lt;div id="app"&gt;      &lt;ul&gt;    &lt;li v-for='item in list'        :key='item.id'        v-if="item.price&lt;50"        &gt;      {{ item.name }}    &lt;/li&gt;  &lt;/ul&gt;  &lt;/div&gt;</pre> </div> <p class="maodian"><a name="_lab2_1_6" rel="nofollow"></a></p> <h3>3.使用计算属性或方法来处理数据后再做数据遍历</h3> <p>为避免上述问题，我们应该在遍历模板中的数据之前对其进行过滤。有两种非常相似的方法</p> <ul> <li>使用计算属性</li> <li>使用过滤方法</li> </ul> <p>首先，我们只需要设置一个计算属性，为了获得与之前的v-if相同的功能，代码应如下所示。</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;div id="app"&gt;      &lt;ul&gt;    &lt;li v-for='item in underPrice'        :key='item.id'        &gt;      {{ item.name }}    &lt;/li&gt;  &lt;/ul&gt;  &lt;/div&gt;</pre> </div> <div class="ay1code"> <pre class="brush:js;">&lt;script&gt;    export default {      data () {        return {          list: []        }      },      computed: {        underPrice: function () {          return this.list.filter(item=&gt; item.price &lt; 50)        }      }    }  &lt;/script&gt;</pre> </div> <p>计算属性是作为属性使用的，并不是方法。使用computed，可以将数据做缓存处理，在每次渲染数据的时候，会优先在缓存在找该数据，如果有了直接从缓存中取出渲染，如果没有的话再重新获取。这样也大大的提高了性能。</p> <p>或者可以使用方式来进行变量的筛选以及处理再做遍历</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;div id="app"&gt;      &lt;ul&gt;    &lt;li v-for='item in underPriceHandle(50)'        :key='item.id'        &gt;      {{ item.name }}    &lt;/li&gt;  &lt;/ul&gt;  &lt;/div&gt;</pre> </div> <div class="ay1code"> <pre class="brush:js;">&lt;script&gt;    export default {      data () {        return {          list: []        }      },      methods: {        underPriceHandle: function (price) {          return this.list.filter(item=&gt; item.price &lt; price)        }      }    }  &lt;/script&gt;</pre> </div> <p class="maodian"><a name="_lab2_1_7" rel="nofollow"></a></p> <h3>4.在一个范围内循环</h3> <p>尽管大多数情况下，v-for 用于遍历数组或对象，但在某些情况下，我们肯定只希望循环执行一定次数。</p> <p>例如，假设我们正在为在线商店创建一个分页系统，而我们只希望每页显示10个产品。使用一个变量来跟踪当前的页码，我们可以像这样处理分页。</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;ul&gt;    &lt;li v-for='index in 10' :key='index'&gt;      {{ books[page * 10 + index] }}    &lt;/li&gt;  &lt;/ul&gt;</pre> </div> <p class="maodian"><a name="_lab2_1_8" rel="nofollow"></a></p> <h3>5.在循环中访问项目的索引</h3> <p>除了遍历数组和访问每个元素之外，我们还可以跟踪每个项的索引。</p> <p>为此，我们必须在项目后添加一个索引值，它非常简单，可用于分页，显示列表索引，显示排名等。</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;ul&gt;    &lt;li v-for='(item, index) in products' :key='item.id' &gt;     {{ index }}----{{ item.name }}    &lt;/li&gt;  &lt;/ul&gt;</pre> </div> <p class="maodian"><a name="_lab2_1_9" rel="nofollow"></a></p> <h3>6.遍历一个对象</h3> <p>我们也可以使用v-for轻松地遍历对象的键值对。</p> <p>与访问元素的索引类似，我们必须向循环中添加另一个值。如果我们用一个参数遍历一个对象，我们将遍历所有的项。</p> <p>如果我们添加另一个参数，我们将获得items 和 key，如果添加第三个，我们还可以访问 v-for 循环的索引。</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;ul&gt;    &lt;li v-for='(list, index) in lists' :key='list.id' &gt;      &lt;span v-for='(item, key, index) in list' :key='key'&gt;        {{ item }}      &lt;/span&gt;    &lt;/li&gt;  &lt;/ul&gt;</pre> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-18.htm">Java程序查找数字的偶数因数之和</a></p>
                                        <p>下一个：<a href="/html/category/article-20.htm">servlet 中 servlet context 与 session 与 request 三个对象的常用方法和存放数据的作用域。</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1953.htm">springboot2+spring-retry配置及使用</a></h4>
                <p>springboot2+spring-retry配置及使用  参考 1 配置依赖 2 启动类开启retry 3 使用   @Retryable和@Backoff @Recover 使用样例     参</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4124.htm">谈谈高并发系统的一些解决方案</a></h4>
                <p>本文结合项目经验，整理一份大纲，供参考。 常用指标   RT（Response Time）：响应时间。可能会衍生出 TP999、TP99、TP95、TP90等指标。一般在几毫秒到几百毫秒之间。   Q</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3756.htm">接口隔离原则（Interface Segregation Principle，ISP）</a></h4>
                <p>接口隔离原则（Interface Segregation Principle，ISP）要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法。  定义  客户端不应该</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2530.htm">MySQL中的TEXT数据类型是什么？</a></h4>
                <p>TEXT数据对象对于在MySQL数据库中存储长格式文本字符串很有用。以下是关于TEXT数据类型的一些要点-   TEXT是列类型的族，旨在用作大容量字符存储。   实际的TEXT列类型为四种类型-TI</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1954.htm">FreeRTOS进阶之任务创建完全解析_操作系统</a></h4>
                <p>目录  前言 1.创建任务堆栈和任务TCB 2.初始化任务TCB必要的字段 3.初始化任务堆栈 4.进入临界区 5.当前任务数量增加1 6.为第一次运行做必要的初始化 7.更新当前正在运行的任务TCB</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1911.htm">动态添加select后不显示layui动态添加select后重新渲染</a></h4>
                <p>一、问题：利用jQuery动态添加的代码中包含select，运行后不显示 1、显示的状态 2、后台的代码 正常情况下应该像队长班级一样显示，但是却惊奇的发现，事与愿违 二、原因 Layui会对sele</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1351.htm">Rabbit MQ 怎么保证可靠性、幂等性、消费顺序</a></h4>
                <p>RabbitMQ如何保证消息的可靠性 RabbitMQ消息丢失的三种情况 生产者弄丢消息时的解决方法  方法一：生产者在发送数据之前开启RabbitMQ的事务(采用该种方法由于事务机制，会导致吞吐量下</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3423.htm">浅谈分布式一致性协议之3PC</a></h4>
                <p>由于二阶段提交存在着诸如同步阻塞、单点问题、脑裂等缺陷。所以，研究者们在二阶段提交的基础上做了改进，提出了三阶段提交。   文章目录  三阶段提交的定义 3PC的出现 3PC协议的基本过程   Can</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1925.htm">Spring Ioc源码分析系列&#8211;Ioc的基础知识准备_在线工具</a></h4>
                <p>Spring Ioc源码分析系列--Ioc的基础知识准备  本系列文章代码基于Spring Framework 5.2.x  Ioc的概念 在Spring里，Ioc的定义为The IoC Contai</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4067.htm">lambda表达式之allMatch、anyMatch、noneMatch</a></h4>
                <p>　　allMatch：Stream中全部元素符合传入的predicate返回 true 　　anyMatch：Stream中只要有一个元素符合传入的predicate返回 true 　　noneMat</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">6</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>