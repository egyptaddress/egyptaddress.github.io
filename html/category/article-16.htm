<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-16.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>iOS全埋点解决方案-界面预览事件 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">iOS全埋点解决方案-界面预览事件</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<h3 id="前言">前言</h3> <p>	我们先了解 UIViewController 生命周期相关的内容和 iOS 的“黑魔法” Method Swizzling。然后再了解页面浏览事件（$AppViewScreen）全埋点的实现原理</p> <h3 id="一uiviewcontroller-生命周期">一、UIViewController 生命周期</h3> <p>	众所周知，每一个 UIViewController 都管理着一个由多个视图组成的树形结构，其中根视图保存在 UIViewController 的 view 属性中。UIViewController 会懒加载它所管理的视图集，直到第一次访问 view 属性时，才会去加载或者创建 UIViewController 的视图集。</p> <p>有以下几种常用的方式加载或者创建 UIViewController 的视图集：</p> <ul> <li>使用 Storyboard</li> <li>使用 Nib 文件</li> <li>使用代码，即重写 - loadView</li> </ul> <p>    以上这些方法，最终都会创建出合适的根视图并保存在 UIViewController 的 view 属性中，这是 UIViewController 生命周期的第一步。当 UIViewController 的根视图需要展示在页面上时，会调用 - viewDidLoad 方法。在这个方法中，我们可以做一些对象初始化相关的工作。</p> <p>	需要注意的是：此时，视图的 bounds 还没有确定。对于使用代码创建视图，- viewDidLoad 方法会在 -loadView 方法调用结束之后运行；如果使用的是 Stroyboard 或者 Nib 文件创建视图，- viewDidLoad 方法则会在 - awakeFromNib 方法之后调用。</p> <p>	当 UIViewController 的视图在屏幕上的显示状态发生变化时，UIViewController 会自动回调一些方法，确保子类能够响应到这些变化。如下图所示，它展示了 UIViewController 在不同的显示状态时会回调不同的方法。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/5ae67dcd5e2798a5aef511c874afbff8.jpg" alt="iOS全埋点解决方案-界面预览事件"></p> <p>	在 UIViewController 被销毁之前，还会回调 - dealloc 方法，我们一般通过重写这个方法来主动释放不能被 ARC 自动释放的资源。</p> <p>	我们现在对 UIViewController 的整个生命周期有了一些基本了解。那么，我们如何去实现页面浏览事件（ $AppViewScreen 事件）的全埋点呢？</p> <p>	通过 UIViewController 的生命周期可知，当执行到 - viewDidAppear: 方法时，表示视图已经在屏幕上渲染完成，也即页面已经显示出来了，正等待用户进行下一步操作。因此，- viewDidAppear: 方法就是我们触发页面浏览事件的最佳时机。如果想要实现页面浏览事件的全埋点，需要使用 iOS 的“黑魔法” Method Swizzling 相关的技术。</p> <h3 id="二method-swizzling-黑魔法">二、Method Swizzling 黑魔法</h3> <p>	Method Swizzling，顾名思义，就是交换两个方法的实现。简单的来说，就是利用 Objective-C runtime 的动态绑定特性，把一个方法的实现与另一个方法的实现进行交换。</p> <h4 id="21-method-swizzling-基础">2.1 Method Swizzling 基础</h4> <p>	在 Objective-C 的 runtime 中，一个类是用一个名为 objc_class 的结构体表示的，它的定义如下：</p> <pre><code class="language-c++">struct objc_class { Class _Nonnull isa OBJC_ISA_AVAILABILITY;  #if !__OBJC2__ Class _Nullable super_class OBJC2_UNAVAILABLE; const char * _Nonnull name OBJC2_UNAVAILABLE; long version OBJC2_UNAVAILABLE; long info OBJC2_UNAVAILABLE; long instance_size OBJC2_UNAVAILABLE; struct objc_ivar_list * _Nullable ivars OBJC2_UNAVAILABLE; struct objc_method_list * _Nullable * _Nullable methodLists OBJC2_UNAVAILABLE; struct objc_cache * _Nonnull cache OBJC2_UNAVAILABLE; struct objc_protocol_list * _Nullable protocols OBJC2_UNAVAILABLE; #endif  } OBJC2_UNAVAILABLE;</code></pre> <p>	在上面的结构体中，虽然有很多字段在 OBJC2 中已经废弃了（OBJC2_UNAVAILABLE），但是了解这个结构体还是有助于我们理解 Method Swizzling 的底层原理。我们从上述结构体中可以发现，有一个 objc_method_list 指针，它保存着当前类的所有方法列表。同时，objc_method_list 也是一个结构体，它的定义如下：</p> <pre><code class="language-c++">struct objc_method_list { struct objc_method_list * _Nullable obsolete OBJC2_UNAVAILABLE;  int method_count OBJC2_UNAVAILABLE; #ifdef __LP64__ int space OBJC2_UNAVAILABLE; #endif /* variable length structure */ struct objc_method method_list[1] OBJC2_UNAVAILABLE; }</code></pre> <p>	在上面的结构体中，有一个 objc_method 字段，我们再来看看 objc_method 这个结构体：</p> <pre><code class="language-c++">struct objc_method { SEL _Nonnull method_name OBJC2_UNAVAILABLE; char * _Nullable method_types OBJC2_UNAVAILABLE; IMP _Nonnull method_imp OBJC2_UNAVAILABLE; }</code></pre> <p>	从上面的结构体中可以看出，一个方法由下面三个部分组成：</p> <ul> <li>method_name：方法名</li> <li>method_types：方法类型</li> <li>method_imp：方法实现</li> </ul> <p>使用 Method Swizzling 交换方法，其实就是修改了 objc_method 结构体中的 method_imp，也即改变了 method_name 和 method_imp 的映射关系，如下图所示。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/6a11dd058fe015c3147e1821df235162.jpg" alt="iOS全埋点解决方案-界面预览事件"></p> <p>那我们如何改变 method_name 和 method_imp 的映射关系呢？在 Objective-C 的 runtime 中，提供了很多非常方便使用的函数，让我们可以很简单的就能实现 Method Swizzling，即改变 method_name 和 method_imp 的映射关系，从而达到交换方法的效果。</p> <h4 id="22-实现-method-swizzling-的相关函数">2.2 实现 Method Swizzling 的相关函数</h4> <ol> <li> <p>Method class_getInstanceMethod</p> <pre><code>// 返回目标类 aClass、方法名为 aSelector 的实例方法 // aClass :目标类 // aSelector: 方法名 OBJC_EXPORT Method _Nullable class_getInstanceMethod(Class _Nullable cls, SEL _Nonnull name)     OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0, 2.0);</code></pre> </li> <li> <p>BOOL class_addMethod</p> <pre><code>// 给目标类 aClass 添加一个新的方法，同时包括方法的实现 // aClass: 目标类 // aSelector: 要添加方法的方法名 // imp: 要添加方法的方法实现 // types: 方法实现的编码类型 OBJC_EXPORT BOOL class_addMethod(Class _Nullable cls, SEL _Nonnull name, IMP _Nonnull imp,                  const char * _Nullable types)      OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);</code></pre> </li> <li> <p>IMP method_getImplementation</p> <pre><code>// 返回方法实现的指针 // 目标方法 OBJC_EXPORT IMP _Nonnull method_getImplementation(Method _Nonnull m)      OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);</code></pre> </li> <li> <p>IMP class_replaceMethod</p> <pre><code>// 替换目标类 aClass 的 aSelector 方法指针 // aClass: 目标类 // aSelector: 目前方法的方法名 // imp：新方法的方法实现 // types: 方法实现的编码类型 OBJC_EXPORT IMP _Nullable class_replaceMethod(Class _Nullable cls, SEL _Nonnull name, IMP _Nonnull imp,                      const char * _Nullable types)      OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);</code></pre> </li> <li> <p>void method_exchangeImplementations</p> <pre><code>// 交换2个方法的实现指针 // m1: 交换方法1 // m2: 交换方法2 OBJC_EXPORT void method_exchangeImplementations(Method _Nonnull m1, Method _Nonnull m2)      OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);</code></pre> </li> </ol> <h4 id="23-实现-method-swizzling">2.3 实现 Method Swizzling</h4> <p>第一步 创建 NSObject 的分类 NSObject+SASwizzler</p> <p>第二步 在 NSObject+SASwizzler.h 声明方法交换方法</p> <pre><code>/// 交换方法名为 originalSEL 和方法名为 alternateSEL 两个方法实现 /// @param originalSEL 原始的方法名称 /// @param alternateSEL 要交换的方法名称 + (BOOL)sensorsdata_swizzleMethod:(SEL)originalSEL withMethod:(SEL)alternateSEL;</code></pre> <p>第三步 在 NSObject+SASwizzler.m 实现方法的交换</p> <pre><code>+ (BOOL)sensorsdata_swizzleMethod:(SEL)originalSEL withMethod:(SEL)alternateSEL {         // 获取原始方法     Method originalMethod = class_getInstanceMethod(self, originalSEL);     // 当原始的方法不存在时，返回NO，表示 Swizzler 失败     if (!originalMethod) {         return NO;     }          // 获取要交换的方法     Method alternateMethod = class_getInstanceMethod(self, alternateSEL);     // 当交换的方法不存在时，返回NO，表示 Swizzler 失败     if (!alternateMethod) {         return NO;     }          // 交换两个方法的实现     method_exchangeImplementations(originalMethod, alternateMethod);     return YES; }</code></pre> <h3 id="三实现界面预览事件全埋点">三、实现界面预览事件全埋点</h3> <p>	利用方法交换，来交换 UIViewController 的 -viewDidAppear: 方法，然后在方法交换中触发 $AppViewScreen 事件，来实现界面预览的全埋点。</p> <h4 id="31-实现步骤">3.1 实现步骤</h4> <p>第一步：在 SensorsSDK 项目中，新增一个 UIViewController 类别 UIViewController+SensorsData</p> <p>第二步：在 UIViewController+SensorsData.m 类别新增交换方法 - sensorsdata_viewDidAppear：，然后再交换方法中调用原始方法，并触发 $AppViewScreen 事件</p> <pre><code>- (void)sensorsdata_viewDidAppear:(BOOL)animated {     // 调用原始方法, 即 - viewDidAppear     [self sensorsdata_viewDidAppear:animated];          // 触发 $AppViewScreen 事件     NSMutableDictionary *properties = [NSMutableDictionary dictionary];     [properties setValue:NSStringFromClass([self class]) forKey:@"$screen_name"];     [properties setValue:self.navigationItem.title forKey:@"$title"];     [[SensorsAnalyticsSDK sharedInstance] track:@"$AppViewScreen" properties:properties]; }</code></pre> <p>第三步: 在 UIViewController+SensorsData.m 中重写 + load 类方法，并在 + load 类方法中调用 NSObject+SASwizzler 的类方法交换</p> <pre><code>+ (void)load {     [UIViewController sensorsdata_swizzleMethod:@selector(viewDidAppear:) withMethod:@selector(sensorsdata_viewDidAppear:)]; }</code></pre> <p>第四步 : 测试验证</p> <pre><code>{   "event" : "$AppViewScreen",   "time" : 1648626597682,   "propeerties" : {     "$model" : "x86_64",     "$manufacturer" : "Apple",     "$lib_version" : "1.0.0",     "$os" : "iOS",     "$app_version" : "1.0",     "$screen_name" : "ViewController",     "$os_version" : "15.2",     "$lib" : "iOS"   } }</code></pre> <h4 id="32-优化">3.2 优化</h4> <p>问题：在应用程序启动过程中，会触发多余的 $AppViewScreen ，我们可以引入黑名单的机制，即在黑名单里配置那些 UIViewController 及子类不触发 $AppViewScreen 事件。</p> <p>第一步  创建一个 sensorsdata_black_list.plist 文件，并把 root 类型改成 Array，该文件就是黑名单文件，然后在黑名单文件中添加控制器，如图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/52784be099028506c1049191e73a153d.jpg" alt="iOS全埋点解决方案-界面预览事件"></p> <p>第二步 在 UIViewController+SensorsData.m 文件中新增 - shouldTrackAppViewScreen 方法，用来判断当前控制器是否在黑名单中。</p> <pre><code>static NSString * const kSensorsDataBlackListFileName = @"sensorsdata_black_list";  // 黑名单 - (BOOL)shouldTrackAppViewScreen {     static NSSet *blackList = nil;     static dispatch_once_t onceToken;     dispatch_once(&amp;onceToken, ^{         NSString *path = [[NSBundle bundleForClass:SensorsAnalyticsSDK.class] pathForResource:kSensorsDataBlackListFileName ofType:@"plist"];         NSArray *classNames = [NSArray arrayWithContentsOfFile:path];         NSMutableSet *set = [NSMutableSet setWithCapacity:classNames.count];         for (NSString *className in classNames) {             [set addObject:NSClassFromString(className)];         }         blackList = [set copy];     });     for (Class cla in blackList) {         if ([self isKindOfClass:cla]) {             return  NO;         }     }     return YES; }</code></pre> <p>第三步 在触发 $AppViewScreen 事件之前，判断是否在黑名单中</p> <pre><code>- (void)sensorsdata_viewDidAppear:(BOOL)animated {     // 调用原始方法, 即 - viewDidAppear     [self sensorsdata_viewDidAppear:animated];          // 触发 $AppViewScreen 事件     if ([self shouldTrackAppViewScreen]) {         NSMutableDictionary *properties = [NSMutableDictionary dictionary];         [properties setValue:NSStringFromClass([self class]) forKey:@"$screen_name"];         [properties setValue:self.navigationItem.title forKey:@"$title"];         [[SensorsAnalyticsSDK sharedInstance] track:@"$AppViewScreen" properties:properties];     } }</code></pre> <p>第四步 测试验证</p> <p>	运行Demo，所添加到黑名单中的 controller 不会发送 $AppViewScreen 事件。</p> <h4 id="34-遗留问题">3.4 遗留问题</h4> <p>	按照目前的方案实现 $AppViewScreen 事件的全埋点，会有2个问题：</p> <p>应用程序热启动是（从后台恢复），第一个界面没有触发 $AppViewScreen 事件。原因是这个界面没有再次执行 - viewDidAppear: 方法</p> <p>要求 UIViewController 的子类不重写 -viewDidAppear：方法，一旦重写，必须调用[super viewDidAppear:animated], 否则不会触发  $AppViewScreen 事件。原因是直接交换了 UIViewController 的 - viewDidAppear: 方法。</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-15.htm">关于Springcloud Sleuth分布式请求链路跟踪的使用 小结</a></p>
                                        <p>下一个：<a href="/html/category/article-17.htm">python中借助subprocess产生和关闭子进程</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-224.htm">go语言panic函数详解</a></h4>
                <p>程序异常被叫做panic，直译为运行时恐慌 当panic被抛出异常后，如果我们没有在程序中添加任何保护措施的话，程序就会打印出panic的详细情况之后，终止运行  panic: runtime err</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-257.htm">postman测试@pathvariable,@requestparam,@requestbody发送情况</a></h4>
                <p>postman测试@pathvariable,@requestparam,@requestbody发送情况  1、三种方式简单说明  1.1、@Pathvariable 通过占位符的方式获取入参，前端</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-219.htm">如何使用HTML5 SVG绘制正弦波？</a></h4>
                <p>要使用SVG绘制正弦波，请使用以下近似正弦波的一半。我使用三次贝塞尔近似。使用&lt;path&gt;元素。 示例 &lt;!DOCTYPE&nbsp;html&gt; &lt;html&gt; &n</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-216.htm">Java String.equals()与==。</a></h4>
                <p>equals()方法将此字符串与指定的对象进行比较。当且仅当参数不为null并且是一个String对象，表示与此对象相同的字符序列时，结果为true。 示例 public&nbsp;class&nbs</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-234.htm">Pandas 如何处理超大规模数据</a></h4>
                <p>作者&nbsp;|&nbsp;Sara&nbsp;A.&nbsp;Metwalli 译者&nbsp;|&nbsp;盖磊 策划&nbsp;|&nbsp;陈思  处理大规模数据集时常是棘手的事情，尤其在内</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-256.htm">2、java mybatis 命名空间</a></h4>
                <p>命名空间： 在之前版本的 MyBatis 中，命名空间（Namespaces）的作用并不大，是可选的。 但现在，随着命名空间越发重要，你必须指定命名空间。 命名空间的作用有两个，一个是利用更长的全限定</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-212.htm">从查询重写角度理解elasticsearch的高亮原理</a></h4>
                <p>一、高亮的一些问题 elasticsearch提供了三种高亮方式，前面我们已经简单的了解了elasticsearch的高亮原理; 高亮处理跟实际使用查询类型有十分紧密的关系，其中主要的一点就是muti</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-252.htm">Android 4.0.1破坏了WebView HTML 5本地存储？</a></h4>
                <p>要解决此问题，请执行以下步骤- 对于版本低于4.4的android，将数据加载到具有这样的目录的文件方案的web视图中将不起作用。 browser.loadDataWithBaseUrl("file:</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-233.htm">使用Python实现KNN算法解决简单分类问题</a></h4>
                <p>使用Python实现KNN算法解决简单分类问题 KNN分类 KNN算法属于监督学习算法，它可以解决分类问题，也可以解决回归问题。对于一组带标签的数据，当我们使用KNN算法进行分类时，有两种分类方式。K</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-205.htm">Ribbon（一）远程调用RestTemplate</a></h4>
                <p>目录 一、RestTemplate介绍 二、需求说明 1、业务结构及说明 三、模块搭建 1、新建一个maven项目 2、添加ribbon依赖 3、编辑yml 4、主程序 5、编辑RibbonContr</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>