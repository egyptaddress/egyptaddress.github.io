<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-22.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Css 弹性布局（Flex）详细介绍（Flex 属性详解、场景分析） - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Css 弹性布局（Flex）详细介绍（Flex 属性详解、场景分析）</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="htmledit_views"> <h2>前言</h2> <p>我们知道，网页展示就好比一个个盒子堆叠在一起，通过调整盒子的大小、位置、样式等，形成了各式各样的页面。当我们在开发一个页面的时候，我们常规的做法可能是：搭建框架、划分区域、定制排版、调整位置、嵌入内容、微调与增添样式。</p> <p>布局排版是页面基础且关键的一环。其中，常用的自适应布局技术：Flex布局。</p> <h2>Flex布局是什么？</h2> <p>Flex 是 Flexible Box 的缩写，意为"弹性布局"，用来为盒状模型提供最大的灵活性。</p> <p>任何一个容器都可以指定为 Flex 布局。</p> <pre><code>.box {   display: flex; }</code></pre> <p>行内元素也可以使用 Flex 布局。</p> <pre><code>.box {   display: inline-flex; }</code></pre> <p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀。</p> <pre><code>.box {   display: -webkit-flex;  /* Safari */   display: flex; }</code></pre> <p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称"容器"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称"项目"。</p> <h3>Flex容器属性</h3> <blockquote> <ul> <li>flex-direction</li> <li>flex-wrap</li> <li>flex-flow</li> <li>justify-content</li> <li>align-items</li> <li>align-content</li> </ul> </blockquote> <p>接下来，咱们通过具体实例介绍Flex属性的使用与其在布局上达成的效果。</p> <h3>Flex的基本使用</h3> <p><strong>场景一</strong></p> <p>整个页面分为两大部分，我们希望左边部分作为菜单栏，宽度固定；右边部分作为内容展示区，宽度自适应且占满剩余部分。</p> <p>类似如下布局</p> <p><img fetchpriority="high" decoding="async" alt="" height="680" src="http://img.555519.xyz/uploads3/20220607/239aa1093b38750cfe4d112a5ca2bbe8.jpg"></p> <p>常规方式：浮动（float）</p> <p>首先，将框架搭起来</p> <pre><code>&lt;div id="app"&gt;   &lt;div id="nav"&gt;     &lt;div class="main-content"&gt;       &lt;div class="left-content"&gt;Left&lt;/div&gt;       &lt;div class="right-content"&gt;Right&lt;/div&gt;     &lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;</code></pre> <p>为了方便查看效果，给每个盒子设置大小与添加背景色</p> <pre><code>&lt;style&gt; .main-content {   width: 100%;   height:100%;   background: #72f884; } .left-content {   box-sizing: border-box;   width: 200px;   height: 200px;   background: rgb(238, 119, 34); } .right-content {   box-sizing: border-box;   width: 200px;   height: 200px;   background: rgb(68, 133, 255); } &lt;/style&gt;</code></pre> <p>初始页面展示效果</p> <p><img decoding="async" alt="" height="865" src="http://img.555519.xyz/uploads3/20220607/7a39698ce2be5666374fd37896dbffd5.jpg"></p> <p>现在，使用浮动（float），使左边跟右边并列布局</p> <pre><code>&lt;style&gt; .main-content {   width: 100%;   height:100%;   background: #72f884; } .left-content {   box-sizing: border-box;   width: 200px;   height: 200px;   background: rgb(238, 119, 34);   /* 使用浮动完成左右并列布局 */   float: left; } .right-content {   box-sizing: border-box;   width: 200px;   height: 200px;   background: rgb(68, 133, 255);   /* 使用浮动完成左右并列布局 */   float: left; } &lt;/style&gt;</code></pre> <p>页面展示效果</p> <p><img decoding="async" alt="" height="864" src="http://img.555519.xyz/uploads3/20220607/012c50846fdeb718020250aaf606e935.jpg"></p> <p>此时，再将右边的宽度通过 calc() 方法计算，实现右边自适应</p> <pre><code>&lt;style&gt; .right-content {   box-sizing: border-box;   /* width: 200px; */   height: 200px;   background: rgb(68, 133, 255);   /* 使用浮动完成左右并列布局 */   float: left;   /* 使用calc()，右边宽度 = 总宽度 - 左边菜单栏宽度  */   width: calc(100% - 200px); } &lt;/style&gt;</code></pre> <p><img loading="lazy" decoding="async" alt="" height="865" src="http://img.555519.xyz/uploads3/20220607/bc15854b7630839e5a99766ec78c5d0c.jpg"></p> <p>缩小窗口，查看效果</p> <p><img loading="lazy" decoding="async" alt="" height="922" src="http://img.555519.xyz/uploads3/20220607/3b342fa32539b5cadd747b0bcc2143c4.jpg"></p> <p>此时，实现了场景一的需求，效果看起来也还OK。但是有个问题，现在的这个布局使用的是浮动，即代表着这两个块脱离了文档流，如果页面有其他布局区域，如头部导航栏、底部关于栏、甚至是其他主内容区，这时候我们可能就需要花点时间去清除浮动带来的影响，或者是增加更多的浮动来完成其他区域的布局。</p> <p>那么有没有一种布局是既可以不使用浮动（或者说是不脱离文档流），又能实现上面的布局呢？答案是肯定的，可以使用Flex（弹性布局），且写起来也更简便。</p> <p>现在，我们将浮动样式去掉，在包含左右两个盒子的父盒子加上 display:flex，表示使用弹性布局</p> <pre><code>&lt;style&gt; .main-content {   width: 100%;   height:100%;   background: #72f884;   /* 使用flex弹性布局 */   display: flex; } .left-content {   box-sizing: border-box;   width: 200px;   height: 200px;   background: rgb(238, 119, 34); } .right-content {   box-sizing: border-box;   width: 200px;   height: 200px;   background: rgb(68, 133, 255); } &lt;/style&gt;</code></pre> <p>此时查看页面效果</p> <p><img loading="lazy" decoding="async" alt="" height="868" src="http://img.555519.xyz/uploads3/20220607/abd959e21550fd99ac6bcad9cdf7569e.jpg"></p> <p>实现右边部分自适应只需要为右边添加样式 flex:1 即可</p> <pre><code>.right-content {   box-sizing: border-box;   width: 200px;   height: 200px;   background: rgb(68, 133, 255);   /* 表示该盒子自动占满剩余空间（往下展开） */   flex: 1; }</code></pre> <p><img loading="lazy" decoding="async" alt="" height="869" src="http://img.555519.xyz/uploads3/20220607/67548e192d41ba7e59008a75bd63ee36.jpg"></p> <p>此时左右两个盒子并列布局，且右边自适应，why？以下详细展开。</p> <p><strong>flex-direction</strong></p> <p><code>flex-direction</code>属性决定主轴的方向，即项目（或者说是子盒子）的排列方向。</p> <p>它可能有4个值。</p> <blockquote> <ul> <li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li> <li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li> <li><code>column</code>：主轴为垂直方向，起点在上沿。</li> <li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li> </ul> </blockquote> <p>布局图示</p> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220607/c0f6756e3bdb9a3d993c495768cf668b.jpg"></p> <p>上面例子不设置该属性，因此为默认值（row），即主轴水平、从左到右排列。</p> <p><strong>场景二</strong></p> <p>整个页面分为多个部分，我们希望这些部分是并列布局，且宽度自适应。</p> <p>页面布局如下（以三个部分举例，若更多部分做法一致）</p> <pre><code>&lt;div id="app"&gt;   &lt;div id="nav"&gt;     &lt;div class="main-content"&gt;       &lt;div class="left-content"&gt;Left&lt;/div&gt;       &lt;div class="middle-content"&gt;Middle&lt;/div&gt;       &lt;div class="right-content"&gt;Right&lt;/div&gt;     &lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;</code></pre> <p>初始样式（同样，父盒子使用flex布局）</p> <pre><code>&lt;style&gt; .main-content {   width: 100%;   height:100%;   background: #72f884;   /* 使用flex弹性布局 */   display: flex; } .left-content {   box-sizing: border-box;   width: 200px;   height: 200px;   background: rgb(238, 119, 34); } .middle-content {   box-sizing: border-box;   width: 200px;   height: 200px;   background: rgb(173, 40, 250); } .right-content {   box-sizing: border-box;   width: 200px;   height: 200px;   background: rgb(68, 133, 255); } &lt;/style&gt;</code></pre> <p>初始页面效果</p> <p><img loading="lazy" decoding="async" alt="" height="866" src="http://img.555519.xyz/uploads3/20220607/728db50ff638b21aa7163211eb473a19.jpg"></p> <p>现在，我们三个子盒子的宽度是固定的，因此实现不了自适应，我们可以使用 %（百分比）方式设置各个子盒子相对于父盒子所占的百分比</p> <pre><code>&lt;style&gt; .left-content {   box-sizing: border-box;   /* 宽度使用 % ，实现自适应 */   width: 30%;   height: 200px;   background: rgb(238, 119, 34); } .middle-content {   box-sizing: border-box;   /* 宽度使用 % ，实现自适应 */   width: 40%;   height: 200px;   background: rgb(173, 40, 250); } .right-content {   box-sizing: border-box;   /* 宽度使用 % ，实现自适应 */   width: 30%;   height: 200px;   background: rgb(68, 133, 255); } &lt;/style&gt;</code></pre> <p>页面展示效果</p> <p><img loading="lazy" decoding="async" alt="" height="863" src="http://img.555519.xyz/uploads3/20220607/73ad8dd3994fca4194060070aff978c8.jpg"></p> <p>缩小查看页面展示效果</p> <p><img loading="lazy" decoding="async" alt="" height="907" src="http://img.555519.xyz/uploads3/20220607/e4e06f283f37352d2a7abd6aefe86225.jpg"></p> <p>注意观察，此时三个子盒子的宽度总和等于父盒子的宽度，即30% + 40% + 30% = 100%。</p> <p>如果三个盒子的宽度占比总和小于100%，即都为30%，页面效果如下</p> <p><img loading="lazy" decoding="async" alt="" height="867" src="http://img.555519.xyz/uploads3/20220607/ab4228d27ce900f4357f64d0b5e7754b.jpg"></p> <p>此时页面会多出空的部分，我们可以将这部分利用起来。</p> <p><strong>justify-content</strong></p> <p>该属性定义了项目在主轴上的对齐方式。</p> <p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p> <p>此时主轴（<code>flex-direction</code>）为默认的row，即水平方向，从左到右。</p> <blockquote> <ul> <li><code>flex-start</code>（默认值）：左对齐（即上面页面展示效果）</li> <li><code>flex-end</code>：右对齐</li> <li><code>center</code>： 居中</li> <li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li> <li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li> </ul> </blockquote> <p>接下来我们一一展示属性达成的效果</p> <p><strong><code>flex-start</code></strong></p> <p>如上图</p> <p><strong><code>flex-end</code></strong></p> <p><img loading="lazy" decoding="async" alt="" height="865" src="http://img.555519.xyz/uploads3/20220607/ee33dff0d86b6c30e0d7e41ad03ad86c.jpg"></p> <p><strong><code>center</code></strong></p> <p><img loading="lazy" decoding="async" alt="" height="869" src="http://img.555519.xyz/uploads3/20220607/ca4b3194bcd1e7fbaf03c74b07e234df.jpg"></p> <p><strong><code>space-between（注意空白部分分配情况）</code></strong></p> <p><img loading="lazy" decoding="async" alt="" height="869" src="http://img.555519.xyz/uploads3/20220607/f88b2ce369a1f05952a5fa9c5f69a736.jpg"></p> <p><strong><code>space-around（注意空白部分分配情况）</code></strong></p> <p><img loading="lazy" decoding="async" alt="" height="869" src="http://img.555519.xyz/uploads3/20220607/58591bbd5651034b852d8fc3d5b165a3.jpg"></p> <p>以上就是justify-content不同取值的布局效果，最后两个取值就是如何分配剩余的空白部分。</p> <p>还有一个与justify-content相似的属性是align-items。</p> <p><strong>align-items</strong></p> <p>该属性定义项目在交叉轴上如何对齐。（如果主轴为水平，那么交叉轴就是垂直）</p> <p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p> <blockquote> <ul> <li><code>flex-start</code>：交叉轴的起点对齐。</li> <li><code>flex-end</code>：交叉轴的终点对齐。</li> <li><code>center</code>：交叉轴的中点对齐。</li> <li><code>baseline</code>: 项目的第一行文字的基线对齐。</li> <li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li> </ul> </blockquote> <p><code><strong>flex-start</strong>、<strong>flex-end</strong>、<strong>center与</strong></code>justify-content中展示效果类似，只是一个是水平方向一个是垂直方向。各属性布局效果如下：</p> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220607/2acd8e76e5be9b822ae176e134a6c879.jpg"></p> <p>回到场景二，如果三个盒子的宽度占比总和大于100%，页面效果又是怎样的？</p> <pre><code>&lt;style&gt; .left-content {   box-sizing: border-box;   /* 宽度使用 % ，实现自适应 */   width: 40%;   height: 200px;   background: rgb(238, 119, 34); } .middle-content {   box-sizing: border-box;   /* 宽度使用 % ，实现自适应 */   width: 40%;   height: 200px;   background: rgb(173, 40, 250); } .right-content {   box-sizing: border-box;   /* 宽度使用 % ，实现自适应 */   width: 30%;   height: 200px;   background: rgb(68, 133, 255); } &lt;/style&gt;</code></pre> <p>现在，调整父盒子的宽度为1000px</p> <p><img loading="lazy" decoding="async" alt="" height="872" src="http://img.555519.xyz/uploads3/20220607/777eb9e15a32853547b258a72244ba24.jpg"></p> <p>如果子盒子为40%，宽度理应为400px，但是有下图可知，宽度小于400px了</p> <p><img loading="lazy" decoding="async" alt="" height="869" src="http://img.555519.xyz/uploads3/20220607/39c4fb2f302b1768fe17f7a991525e09.jpg"></p> <p>此时宽度被压缩了，其实此时是按照比例缩小了，由之前的按照100份来占比，现在相当于按照1100份来占比（40% 40% 30%），此时的宽度就是1000 * (40/110) 大概就是363.64。</p> <p>那如果我们就想宽度是那么多，不能有误差，该怎么办呢？</p> <p><strong>flex-wrap</strong></p> <p>默认情况下，项目都排在一条线（又称"轴线"）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。在宽度总和超出父盒子的宽度时，希望保持每个子盒子的准确宽度，那就只能分行排列（一行排列会被按比例压缩，如上图）。</p> <p>它可能有3个值。</p> <blockquote> <ul> <li><code>nowrap</code>（默认值）：不换行。</li> <li><code>wrap</code>：换行。</li> <li><code>wrap-reverse</code>：换行，第一行在下方。</li> </ul> </blockquote> <p>分别对应以下图</p> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220607/a3fed188a26a3e821b9c4ee52c101f83.jpg"></p> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220607/a002c196c38270e51bc0210ea66bce29.jpg"></p> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220607/9ef3830a05916ff2237f76332ef4688b.jpg"></p> <p>此时设置flex-wrap:wrap，允许换行</p> <pre><code>.main-content {   width: 100%;   height:100%;   background: #72f884;   /* 使用flex弹性布局 */   display: flex;   /* 使用flex-wrap，wrap为允许换行，nowrap为不允许换行 */   flex-wrap: wrap; }</code></pre> <p>再次查看页面展示效果</p> <p><img loading="lazy" decoding="async" alt="" height="864" src="http://img.555519.xyz/uploads3/20220607/96b48e837c58db79d249b32f7c394c30.jpg">换行之后子盒子的宽度正常，不被压缩了。</p> <p><strong>场景三</strong></p> <p>现在希望将场景一与场景二结合，即在一个页面中分为左右两大部分，左边部分是菜单栏（宽度固定200px）；右边部分是内容展示区，宽度自适应且占满，内容展示区里面又分为三部分，每个部分宽度为该区域的30%。</p> <p>1、搭建左右两大部分</p> <p>html</p> <pre><code>&lt;div id="app"&gt;   &lt;div id="nav"&gt;     &lt;div class="main-content"&gt;       &lt;div class="left-content"&gt;Left&lt;/div&gt;       &lt;div class="right-content"&gt;Right&lt;/div&gt;     &lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;</code></pre> <p>css</p> <pre><code>&lt;style&gt; .main-content {   width: 100%;   height:100%;   background: #72f884;   /* 使用flex弹性布局 */   display: flex; } .left-content {   box-sizing: border-box;   width: 200px;   height: 100%;   background: rgb(238, 119, 34); } .right-content {   box-sizing: border-box;   flex: 1;   height: 100%;   background: rgb(68, 133, 255); } &lt;/style&gt;</code></pre> <p>页面展示效果</p> <p><img loading="lazy" decoding="async" alt="" height="867" src="http://img.555519.xyz/uploads3/20220607/e7c8e94af967f69cc5248905e422153d.jpg"></p> <p>2、布局右边部分</p> <p>里面分为三部分（用一个新的div包裹，结构分明）</p> <p>html</p> <pre><code>&lt;div id="app"&gt;   &lt;div id="nav"&gt;     &lt;div class="main-content"&gt;       &lt;div class="left-content"&gt;Left&lt;/div&gt;       &lt;div class="right-content"&gt;         Right         &lt;div class="right-content-item"&gt;           &lt;div class="right-content-item-list"&gt;part1&lt;/div&gt;           &lt;div class="right-content-item-list"&gt;part2&lt;/div&gt;           &lt;div class="right-content-item-list"&gt;part3&lt;/div&gt;         &lt;/div&gt;       &lt;/div&gt;     &lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;</code></pre> <p>css</p> <pre><code>.right-content-item {   width: 100%;   height: 100%; } .right-content-item-list {   width: 30%;   height: 30%;   background: rgb(242, 245, 37); }</code></pre> <p>页面展示效果</p> <p><img loading="lazy" decoding="async" alt="" height="860" src="http://img.555519.xyz/uploads3/20220607/4a91ba91d3e8944873381146f4e2c27a.jpg"></p> <p>此时右边部分（新增的div）内容区使用flex布局</p> <pre><code>.right-content-item {   width: 100%;   height: 100%;   display: flex; }</code></pre> <p>页面展示效果</p> <p><img loading="lazy" decoding="async" alt="" height="865" src="http://img.555519.xyz/uploads3/20220607/310894e9a18318f853629eb1bb05b737.jpg"></p> <p>此时使用<strong>justify-content</strong>属性</p> <pre><code>.right-content-item {   width: 100%;   height: 100%;   display: flex;   justify-content: space-around; }</code></pre> <p>页面展示效果</p> <p><img loading="lazy" decoding="async" alt="" height="862" src="http://img.555519.xyz/uploads3/20220607/77f980388a33c8a4b41bbb5c1e8568e4.jpg"></p> <p>缩小窗口，查看页面展示效果</p> <p><img loading="lazy" decoding="async" alt="" height="902" src="http://img.555519.xyz/uploads3/20220607/603947b4e65998ad4ece94eb4a4e2cd0.jpg"></p> <p>无论窗口放大或缩小，都能实现自适应。在该例子中，可以知道，flex布局里面的子盒子依然可以使用flex布局，即可以嵌套使用，可用该特点结合flex中的各个属性实现多种自适应布局场景。</p> <p>最后flex-flow跟align-content不展开，可以自行了解。</p> <p>参考：</p> <p><a class="has-card" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html"  title="Flex 布局教程：语法篇 - 阮一峰的网络日志" rel="nofollow"><span class="link-card-box"><span class="link-title">Flex 布局教程：语法篇 - 阮一峰的网络日志</span><span class="link-link"><img decoding="async" class="link-link-icon" src="http://img.555519.xyz/uploads3/20220607/906426ae739a36ad676849fe4604d87d.jpg" alt="Css 弹性布局（Flex）详细介绍（Flex 属性详解、场景分析）">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</span></span></a></p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-21.htm">如何实现省市区的级联搜索</a></p>
                                        <p>下一个：<a href="/html/category/article-23.htm">mysql中的date、datetime、timestamp你还不知道怎么使用吗_在线工具</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-237.htm">Vue3实现跑马灯效果_vue.js</a></h4>
                <p>本文实例为大家分享了Vue3实现跑马灯效果的具体代码，供大家参考，具体内容如下 先看效果：  html部分代码  &lt;div class="app"&gt;              &lt;p </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-250.htm">Redis的数据淘汰策略和数据过期后的删除策略</a></h4>
                <p>Redis的数据淘汰策略  volatile-lru（least recently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰 vol</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-246.htm">实战代码（十）：Springboot RestTemplate连接池</a></h4>
                <p>一、理论基础 RestTemplate是Springboot中内置的Http请求工具，可以直接注入使用。 两个常用的构造方法如下图 (点击进入文档地址)  从上面可以看出，最简单的方式就是使用默认配置</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-206.htm">眼见不一定为实：调用链HBase倾斜修复</a></h4>
                <p>hello，大家好，我是小楼。 今天给大家分享一个关于HBase数据倾斜的排查案例，不懂调用链？不懂HBase？没关系，看完包懂~ 背景 最近HBase负责人反馈HBase存储的调用链数据偶尔出现极其</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-204.htm">Kafka启动报错处理：/opt/module/kafka/bin/kafka-run-class.sh: 第 258 行:exec: java: 未找到</a></h4>
                <p>今天在学习Kafka的时候，写了个脚本，用于集群中kafka的群起。发现启动不了。???? 去掉-daemon参数后，继续启动，看到了它报的错误(日志中也有显示)。找不到java？？？ 看了相关资料后</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-213.htm">Redis 如何保证数据库和缓存双写一致性？</a></h4>
                <p>前言  数据库和缓存（比如：redis）双写数据一致性问题，是一个跟开发语言无关的公共问题。尤其在高并发的场景下，这个问题变得更加严重。 我很负责的告诉大家，该问题无论在面试，还是工作中遇到的概率非常</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-233.htm">使用Python实现KNN算法解决简单分类问题</a></h4>
                <p>使用Python实现KNN算法解决简单分类问题 KNN分类 KNN算法属于监督学习算法，它可以解决分类问题，也可以解决回归问题。对于一组带标签的数据，当我们使用KNN算法进行分类时，有两种分类方式。K</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-211.htm">谨慎使用Arrays.asList()</a></h4>
                <p>经过了两个月的【深入学习Java编程方法】课程学习，对Java的一些新特性有了更多的了解。依旧，坑洼遍地。 Java中的Collection类是一个很好用、很常用的类，省去了当年C语言手动链表的麻烦之</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-231.htm">通俗易懂：窗口函数案例详解</a></h4>
                <p>什么是窗口函数 相信很多人都比较熟悉 SQL 聚合函数的语法，比如 count(), sum(), max()等， 窗口函数类似聚合函数，不同的是窗口函数不改变原有的行。 窗口函数是数据分析和数据开发</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-247.htm">.NET如何快速比较两个byte数组是否相等</a></h4>
                <p>前言  之前在群里面有群友问过一个这样的问题，在.NET中如何快速的比较两个byte数组是否完全相等，听起来是一个比较两个byte数组是完全相等是一个简单的问题，但是深入研究以后，觉得还是有很多方案的</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>