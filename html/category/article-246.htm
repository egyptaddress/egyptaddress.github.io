<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-246.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>实战代码（十）：Springboot RestTemplate连接池 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">实战代码（十）：Springboot RestTemplate连接池</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <h2> <a id="_0" rel="nofollow"></a>一、理论基础</h2> <p>RestTemplate是Springboot中内置的Http请求工具，可以直接注入使用。</p> <p>两个常用的构造方法如下图 (<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html"  rel="nofollow">点击进入文档地址</a>)</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230118/022688cf7850af5bc35eb9d12a51e6ad.jpg" alt="实战代码（十）：Springboot RestTemplate连接池"></p> <p>从上面可以看出，最简单的方式就是使用默认配置，不需要额外的配置，便可以直接使用该工具。对于请求频次比较低的情况下，默认配置完全够用。</p> <p>如果需要大量的请求，可以自定义配置，使用HttpClient的连接池。</p> <h2> <a id="_14" rel="nofollow"></a>二、实战代码</h2> <h3> <a id="21__16" rel="nofollow"></a>2.1 依赖引入</h3> <pre><code>&lt;dependency&gt; 	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; 	&lt;exclusions&gt; 		&lt;exclusion&gt; 			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 			&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; 		&lt;/exclusion&gt; 	&lt;/exclusions&gt; &lt;/dependency&gt; &lt;!-- 将tomcat替换为undertow --&gt; &lt;dependency&gt; 	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 	&lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt; &lt;/dependency&gt;  &lt;!-- 自定义的元数据依赖 --&gt; &lt;dependency&gt; 	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 	&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; 	&lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt;  &lt;!-- httpclient，为了使用其连接池 --&gt; &lt;dependency&gt; 	&lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; 	&lt;artifactId&gt;httpclient&lt;/artifactId&gt; 	&lt;version&gt;4.5.12&lt;/version&gt; &lt;/dependency&gt;  &lt;!-- for fastjson --&gt; &lt;dependency&gt; 	&lt;groupId&gt;com.alibaba&lt;/groupId&gt; 	&lt;artifactId&gt;fastjson&lt;/artifactId&gt; 	&lt;version&gt;1.2.62&lt;/version&gt; &lt;/dependency&gt;  &lt;!-- lombok，减少代码量，idea需要安装lombok插件 --&gt; &lt;dependency&gt; 	&lt;groupId&gt;org.projectlombok&lt;/groupId&gt; 	&lt;artifactId&gt;lombok&lt;/artifactId&gt; 	&lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; </code></pre> <h3> <a id="22__64" rel="nofollow"></a>2.2 配置项</h3> <h3> <a id="221__66" rel="nofollow"></a>2.2.1 配置</h3> <pre><code>http:   pool:     # 连接超时     connectTimeout: 5000     connectionRequestTimeout: 5000     defaultMaxPerRoute: 20     # 最大连接数     maxTotal: 100     # 服务器返回数据(response)的时间     socketTimeout: 5000     validateAfterInactivity: 30000 </code></pre> <h3> <a id="222__83" rel="nofollow"></a>2.2.2 读取配置文件</h3> <pre><code>@Component @ConfigurationProperties(prefix = "http.pool") @Data public class HttpClientProperties {       /**      * 最大连接数      */     private Integer maxTotal;     /**      * 路由是对最大连接数的细分      * 每个路由基础的连接数      */     private Integer defaultMaxPerRoute;     /**      * 连接超时时间      */     private Integer connectTimeout;     /**      * 从连接池中获取连接的超时时间      */     private Integer connectionRequestTimeout;     /**      * 服务器返回数据(response)的时间      */     private Integer socketTimeout;     /**      * 可用空闲连接过期时间      * 重用空闲连接时会先检查是否空闲时间超过这个时间，如果超过，释放socket重新建立      */     private Integer validateAfterInactivity; } </code></pre> <h3> <a id="23__122" rel="nofollow"></a>2.3 配置文件</h3> <pre><code>@Configuration public class RestTemplateConfig {       private final HttpClientProperties httpClientProperties;      public RestTemplateConfig(HttpClientProperties httpClientProperties) {         this.httpClientProperties = httpClientProperties;     }       @Bean     public RestTemplate restTemplate(ClientHttpRequestFactory factory){         return new RestTemplate(factory);     }       @Bean     public ClientHttpRequestFactory clientHttpRequestFactory(){         return new HttpComponentsClientHttpRequestFactory(httpClient());     }       @Bean     public HttpClient httpClient() {         Registry&lt;ConnectionSocketFactory&gt; registry = RegistryBuilder.&lt;ConnectionSocketFactory&gt;create()                 .register("http", PlainConnectionSocketFactory.getSocketFactory())                 .register("https", SSLConnectionSocketFactory.getSocketFactory())                 .build();         PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(registry);         connectionManager.setMaxTotal(httpClientProperties.getMaxTotal());         connectionManager.setDefaultMaxPerRoute(httpClientProperties.getDefaultMaxPerRoute());         connectionManager.setValidateAfterInactivity(httpClientProperties.getValidateAfterInactivity());         RequestConfig requestConfig = RequestConfig.custom()                 .setSocketTimeout(httpClientProperties.getSocketTimeout())                 .setConnectTimeout(httpClientProperties.getConnectTimeout())                 .setConnectionRequestTimeout(httpClientProperties.getConnectionRequestTimeout())                 .build();         return HttpClientBuilder.create()                 .setDefaultRequestConfig(requestConfig)                 .setConnectionManager(connectionManager)                 .build();     } } </code></pre> <h3> <a id="24__172" rel="nofollow"></a>2.4 简单的工具类</h3> <pre><code>@Component @Slf4j public class HttpClientUtils {      private final RestTemplate restTemplate;      public HttpClientUtils(RestTemplate restTemplate) {         this.restTemplate = restTemplate;     }      /**      * Get      */     public String get(String uri, Map&lt;String, String&gt; param, String token) {         HttpHeaders headers = new HttpHeaders();         headers.set("token", token);         HttpEntity&lt;String&gt; requestEntity = new HttpEntity&lt;&gt;(null, headers);         StringBuilder url = new StringBuilder();         url.append(uri).append("?");         param.forEach((k, v) -&gt; url.append(k).append("=").append(v).append("&amp;"));         String getUrl = url.substring(0, url.length() - 1);         ResponseEntity&lt;CodeResult&gt; response = restTemplate.exchange(getUrl, HttpMethod.GET, requestEntity, CodeResult.class);         return parseCodeResult(response);     }      /**      * post方式请求接口      * - 参数形式：form-data      */     public String postFormData(String url, MultiValueMap&lt;String, Object&gt; paramMap, String token) {         HttpHeaders headers = new HttpHeaders();         headers.set("token", token);         headers.setContentType(MediaType.MULTIPART_FORM_DATA);         //用HttpEntity封装整个请求报文         HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; files = new HttpEntity&lt;&gt;(paramMap, headers);         ResponseEntity&lt;CodeResult&gt; response = restTemplate.postForEntity(url, files, CodeResult.class);         return parseCodeResult(response);     }      /**      * post方式请求接口      * - 参数形式：json      */     public String postJson(String url, String param, String token) {         HttpHeaders headers = new HttpHeaders();         headers.setContentType(MediaType.APPLICATION_JSON);         headers.set("token", token);         HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(param, headers);         ResponseEntity&lt;CodeResult&gt; response = restTemplate.postForEntity(url, entity, CodeResult.class);         return parseCodeResult(response);     }      /**      * 解析云端服务接口返回值      */     public String parseCodeResult(ResponseEntity&lt;CodeResult&gt; response) {         if (response.getStatusCodeValue() != HttpStatus.OK.value()) {             throw new RuntimeException("网络请求失败,状态码:" + response.getStatusCodeValue());         }         CodeResult codeResult = response.getBody();         assert codeResult != null;         if (!codeResult.getSuccess()) {             log.error("调用后台服务接口错误,返回值:{}", JSON.toJSON(codeResult));             throw new RuntimeException("调用后台服务接口错误， 错误信息：" + codeResult.getMsg());         }         return JSON.toJSONString(codeResult.getData());     } } </code></pre> <h2> <a id="_245" rel="nofollow"></a>三、源码地址</h2> <p>https://github.com/lysmile/spring-boot-demo/tree/master/spring-boot-resttemplate-demo</p> </p></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-245.htm">Docker从入门到放弃(1) Docker简介与安装_在线工具</a></p>
                                        <p>下一个：<a href="/html/category/article-247.htm">.NET如何快速比较两个byte数组是否相等</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-208.htm">数据类产品设计和实现思路_在线工具</a></h4>
                <p>数据类产品 对数据类产品(或服务)的需求是信息化发展到一定阶段的必然产物, 在信息化时代, 现实世界的大部分活动都已经(或即将)被投射成数据, 在这个大背景下, 数据产品的作用也越来越大.  对于所有</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-231.htm">通俗易懂：窗口函数案例详解</a></h4>
                <p>什么是窗口函数 相信很多人都比较熟悉 SQL 聚合函数的语法，比如 count(), sum(), max()等， 窗口函数类似聚合函数，不同的是窗口函数不改变原有的行。 窗口函数是数据分析和数据开发</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-228.htm">Android jetpack room+ViewModel+liveData 数据自动更新</a></h4>
                <p>Android jetpack room的使用_安果移不动的博客-CSDN博客 接上篇博客 我们用google推荐的这种方式  &nbsp; 修改： StudentDao package com.an</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-238.htm">js数组删除的方法</a></h4>
                <p>js的数组删除，我建议大家使用splice函数，不要使用slice函数，因为slice是返回一个新数组，并不是从原来的数组中删除。 比如： let a=[111,222,333,444]; a.spl</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-216.htm">Java String.equals()与==。</a></h4>
                <p>equals()方法将此字符串与指定的对象进行比较。当且仅当参数不为null并且是一个String对象，表示与此对象相同的字符序列时，结果为true。 示例 public&nbsp;class&nbs</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-258.htm">vue实现自定义全局右键菜单_vue.js</a></h4>
                <p>前段时间公司在做一个webIDE项目，其中有对文件树的各种操作，主要通过右键菜单实现，今天就来记录一下怎么在vue项目中实现全局的自定义右键菜单。效果如图所示：  注意： 需要在项目中找到页面整体布局</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-262.htm">Azure DevOps 中 Dapr项目自动部署流程实践</a></h4>
                <p>注：本文中主要讨论 .NET6.0项目在 k8s 中运行的 Dapr 的持续集成流程, 但实际上不是Dapr的项目部署到K8s也是相同流程，只是k8s的yaml配置文件有所不同 流程选择 基于 Dap</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-229.htm">pandas高阶应用</a></h4>
                <p>1、时间序列相关操作 pd的date_range中的基本时间序列频率     Alias   Description（偏移量类型）   说明     B   business day frequenc</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-224.htm">go语言panic函数详解</a></h4>
                <p>程序异常被叫做panic，直译为运行时恐慌 当panic被抛出异常后，如果我们没有在程序中添加任何保护措施的话，程序就会打印出panic的详细情况之后，终止运行  panic: runtime err</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-247.htm">.NET如何快速比较两个byte数组是否相等</a></h4>
                <p>前言  之前在群里面有群友问过一个这样的问题，在.NET中如何快速的比较两个byte数组是否完全相等，听起来是一个比较两个byte数组是完全相等是一个简单的问题，但是深入研究以后，觉得还是有很多方案的</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>