<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-7.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Vue入门组件实战案例详解 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Vue入门组件实战案例详解</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div class="toc"> <div class="toc-container-header"><span style="font-size: 2em;">Vue 组件</span></div> </div> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/695b5aa95581f0a17da0e1e01ed25503.jpg" alt="Vue入门组件实战案例详解"></p> <h2 id="axios实现数据请求">axios实现数据请求</h2> <pre><code class="language-python">&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"&gt;     &lt;title&gt;Title&lt;/title&gt;     &lt;script src="./js/vue.js"&gt;&lt;/script&gt;     &lt;script src="https://unpkg.com/axios/dist/axios.min.js"&gt;&lt;/script&gt;  &lt;/head&gt; &lt;body&gt; &lt;div id="app"&gt;     &lt;ul&gt;         &lt;li v-for="film in films_list"&gt;             &lt;p&gt;电影名字是：{{film.name}}&lt;/p&gt;             &lt;img :src="film.poster" alt="" width="100px" height="150px"&gt;             &lt;p&gt;电影介绍：{{film.synopsis}}&lt;/p&gt;         &lt;/li&gt;     &lt;/ul&gt;  &lt;/div&gt;  &lt;/body&gt; &lt;script&gt;      var vm = new Vue({         el: '#app',         data: {             films_list:[]         },         created() {             axios.get('http://127.0.0.1:5000/films').then(res =&gt; {                 console.log(res.data)                 this.films_list=res.data.data.films             })          }     }) &lt;/script&gt; &lt;/html&gt;</code></pre> <pre><code class="language-python">from flask import Flask,make_response,jsonify  app=Flask(__name__) @app.route('/films') def films():     import json     with open('./movie.json','r',encoding='utf-8') as f:         res=json.load(f)     obj = make_response(jsonify(res))     obj.headers['Access-Control-Allow-Origin']='*'     return obj  if __name__ == '__main__':     app.run()</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/e704aa31d2f8d698ddc20655f1efd3d9.jpg" alt="Vue入门组件实战案例详解"></p> <hr/> <h2 id="计算属性">计算属性</h2> <p>我们可以通过计算属性<code>computed</code>来缓存计算，什么意思呢？</p> <p>在Vue中我们可以使用插值来展示数据，插值的普通函数，只要页面一刷新，函数就会重新运算，不管和函数有关没关的值都会变，函数也会重新计算，导致运行效率降低；</p> <p>那么我们可以将自定义函数写在computed中来控制，把函数当成属性来用，调用不需要加括号，只有这个函数使用的属性(变量)发生变化，函数才重新运算，这样做可以减轻压力，减少资源浪费</p> <h3 id="案例一首字母大写">案例一：首字母大写</h3> <pre><code class="language-html">&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"&gt;     &lt;title&gt;计算属性&lt;/title&gt;     &lt;script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js"&gt;&lt;/script&gt;     &lt;link href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css" &gt;     &lt;script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js"&gt;&lt;/script&gt;     &lt;script src="./js/vue.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="app"&gt;     &lt;div style="font-size: 20px"&gt;         输入内容：&lt;input type="text" v-model="mytext"&gt; ----》 {{mytext.substring(0,1).toUpperCase()+mytext.substring(1)}}         &lt;br&gt;&lt;br&gt;         &lt;p&gt;函数绑定(会刷新页面，也不推荐)：&lt;input type="text" :value="getName()"&gt;&lt;/p&gt;         &lt;p&gt;计算属性(推荐)：&lt;input type="text" :value="getName1"&gt;&lt;/p&gt;     &lt;/div&gt;      &lt;hr&gt;     &lt;div style="font-size: 20px"&gt;          &lt;p&gt;输入内容：&lt;input type="text" v-model="mytext1"&gt; -----》{{mytext1}}&lt;/p&gt;     &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;script&gt;     var vm = new Vue({         el: '#app',         data: {             mytext: '',             mytext1:''         },         methods:{             getName(){                 console.log('函数方式，我执行了')                 return this.mytext.substring(0,1).toUpperCase()+this.mytext.substring(1)             }         },         //计算属性         computed:{             getName1(){                 console.log('计算属性，我执行了')                 return this.mytext.substring(0,1).toUpperCase()+this.mytext.substring(1)             }          }     }) &lt;/script&gt; &lt;/html&gt;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/d00eae1a36c54c45638d990f91d7ae11.jpg" alt="Vue入门组件实战案例详解"></p> <p>我们可以发现只有和属性相关的才会打印，如果下面输入内容只是打印了普通函数，就算函数内和<code>mytext1</code>不相关</p> <h3 id="案例二过滤案例">案例二：过滤案例</h3> <pre><code class="language-html">&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"&gt;     &lt;title&gt;过滤案例&lt;/title&gt;     &lt;script src="https://cdn.bootcdn.net/ajax/libs/vue/2.6.12/vue.min.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="box"&gt;     &lt;p&gt;&lt;input type="text" v-model="myText"  placeholder="请输入要筛选的内容:"&gt;&lt;/p&gt;     &lt;ul&gt;         &lt;li v-for="data in newList"&gt;{{data}}&lt;/li&gt;     &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt; &lt;script&gt;     var vm = new Vue({         el: '#box',         data: {             myText: '',             dataList: ['a', 'at', 'atom', 'be', 'beyond', 'cs', 'csrf'],         },          computed:{              newList(){                 var _this = this                 console.log('执行了',_this)                  var datalist2 = _this.dataList.filter(function(item){                     console.log(_this)                      return item.indexOf(_this.myText) &gt; -1                  })                 return datalist2              }         }     }) &lt;/script&gt; &lt;/html&gt;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/76d9c8d7c5b0bda74890273bba054081.jpg" alt="Vue入门组件实战案例详解"></p> <hr/> <p></p> <h2 id="监听属性">监听属性</h2> <p><strong><code>watch</code>来设置监听属性，当<code>mytext</code>发生变化，就会执行和mytext绑定的函数方法</strong></p> <pre><code class="language-html">&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"&gt;     &lt;title&gt;Title&lt;/title&gt;     &lt;script src="./js/vue.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="app"&gt;      &lt;input type="text" v-model="mytext"&gt;---&gt;{{mytext}}   &lt;/div&gt;  &lt;/body&gt; &lt;script&gt;     var vm = new Vue({         el: '#app',         data: {             mytext: '',         },         watch: {             // 只要mytext发生变化，就会执行该函数             mytext: function () {                 console.log('我变化了，执行')              }         }       }) &lt;/script&gt; &lt;/html&gt;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9f700299e3a5f7a15dcd3c1abd89a8e5.jpg" alt="Vue入门组件实战案例详解"></p> <hr/> <h2 id="局部组件">局部组件</h2> <blockquote> <p><strong>写在<code>components</code>里的是局部组件，位置被限制，只能再局部使用</strong></p> </blockquote> <p>比如如下例子中，<code>Top</code>组件只能在只能再id为app的标签(div)内使用，<code>Top</code>组件内如果想再定义子组件，只能在该组件内的<code>template</code>中的<code>div</code>内使用</p> <pre><code class="language-html">&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"&gt;     &lt;title&gt;Title&lt;/title&gt;     &lt;script src="./js/vue.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="app"&gt;     &lt;Top&gt;&lt;/Top&gt;     &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;     &lt;Bottom&gt;&lt;/Bottom&gt; &lt;/div&gt;  &lt;/body&gt; &lt;script&gt;     var vm = new Vue({         el: '#app',         data: {},         // 定义再这里面的叫局部组件，只能再局部使用，只能再id为app的标签内使用         components: {             'Top': {                 //写在一个div里                 template: `                     &lt;div&gt;                         &lt;h1 style="background: pink;font-size: 60px;text-align: center"&gt;{{name}}&lt;/h1&gt;                         &lt;hr&gt;                         &lt;button @click="handleC"&gt;点我看美女&lt;/button&gt;                     &lt;/div&gt;                 `,                 //data是函数，可以设置返回值                 data() {                     return {                         name: "我是头部"                     }                 },                 methods: {                     handleC() {                         alert('美女')                     }                 },             },             'Bottom': {                 template: `                     &lt;div&gt;                         &lt;hr&gt;                         &lt;h1 style="background: green;font-size: 60px;text-align: center"&gt;{{name}}&lt;/h1&gt;                      &lt;/div&gt;                 `,                 data() {                     return {                         name: "我是尾部"                     }                 },              },          },       }) &lt;/script&gt; &lt;/html&gt;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/90d6bfc41f1bfce20327183ec6612768.jpg" alt="Vue入门组件实战案例详解"></p> <hr/> <h2 id="全局组件">全局组件</h2> <p><strong>任意位置都可以使用</strong>，<strong>但是也得是在vue实例托管的div范围内</strong></p> <pre><code class="language-html">&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"&gt;     &lt;title&gt;Title&lt;/title&gt;     &lt;script src="./js/vue.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="app"&gt;     &lt;top&gt;&lt;/top&gt;   &lt;/div&gt;  &lt;/body&gt; &lt;script&gt;     // 定义全局组件，任意位置都可以用，局部内也可以使用     Vue.component('top', {             template: `                 &lt;div&gt;                     &lt;h1 style="background: pink;font-size: 60px;text-align: center"&gt;{{name}}&lt;/h1&gt;                     &lt;hr&gt;                     &lt;button @click="handleC"&gt;点我看美女&lt;/button&gt;                 &lt;/div&gt;             `,             data() {                 return {                     name: "我是头部"                 }             },             methods: {                 handleC() {                     alert('美女')                 }             },          },)      var vm = new Vue({         el: '#app',     }) &lt;/script&gt; &lt;/html&gt;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/19350023bae09a052d3459c1af4e68f6.jpg" alt="Vue入门组件实战案例详解"></p> <hr/> <h2 id="组件通信之父传子">组件通信之父传子</h2> <p>组件间data数据不同享，数据传递，如果我们想从父组件传递到子组件数据通过<strong><code>props</code></strong>自定义属性来实现，比如如下例子：</p> <pre><code class="language-html">&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"&gt;     &lt;title&gt;Title&lt;/title&gt;     &lt;script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js"&gt;&lt;/script&gt;     &lt;link href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css" &gt;     &lt;script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js"&gt;&lt;/script&gt;     &lt;script src="./js/vue.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="app"&gt;     子组件显示：&lt;top :value="handleName"&gt;&lt;/top&gt;     &lt;hr&gt;     父组件输入内容：&lt;input type="text" v-model="handleName"&gt;  &lt;/div&gt;  &lt;/body&gt; &lt;script&gt;      Vue.component('top', {         template: ` &lt;div&gt;                     &lt;h1 style="background: tomato;font-size: 30px;text-align: center"&gt;{{value}}&lt;/h1&gt;                     &lt;/div&gt;             `,         // 必须叫props，数组内放自定义属性的名字         props:{             value: String,  // key是自定义属性名，value是类型名，如果是别的类型就报错         },         //props也可以写成数组的形式，不带验证功能         // props:['value',]     })     var vm = new Vue({         el: '#app',         data: {             handleName: ''         }     }) &lt;/script&gt; &lt;/html&gt;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/a15ed318fb667a023d8aceb1c50bee35.jpg" alt="Vue入门组件实战案例详解"></p> <hr/> <h2 id="组件通信之子传父">组件通信之子传父</h2> <p><strong>ps:Vue内置的对象都以$xx出现</strong></p> <p>我们可以通过自定义事件来实现子组件向父组件传递数据，在子组件中使用<code>$emit('自定义事件',参数)</code>来实现</p> <pre><code class="language-html">&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"&gt;     &lt;title&gt;Title&lt;/title&gt;     &lt;script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js"&gt;&lt;/script&gt;     &lt;link href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css" &gt;     &lt;script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js"&gt;&lt;/script&gt;     &lt;script src="./js/vue.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="app"&gt; &lt;top @myevent="handleRecv"&gt;&lt;/top&gt;     &lt;hr&gt;   &lt;h1 style="background: green;font-size: 60px;text-align: center"&gt;父组件&lt;/h1&gt;  &lt;p&gt;接收子组件发送的数据：{{childText}}&lt;/p&gt; &lt;/div&gt;  &lt;/body&gt; &lt;script&gt;      Vue.component('top', {         template: ` &lt;div&gt;                         &lt;h1 style="background: tomato;font-size: 60px;text-align: center"&gt;{{myheader}}&lt;/h1&gt;                         &lt;p&gt;子组件输入内容：&lt;input type="text" v-model="text"&gt;&lt;/p&gt;                         &lt;p&gt;&lt;button class="btn-success"  @click="handleSend"&gt;向父组件发送数据&lt;/button&gt;&lt;/p&gt;                     &lt;/div&gt;             `,         data(){             return {                 myheader:'子组件',                 text:''             }         },         methods:{             handleSend(){                 //myevent是自定义事件，代表将子组件的text交给myevent事件处理                 this.$emit('myevent',this.text)             }         }      })     var vm = new Vue({         el: '#app',         data: {             //接收子组件的数据             childText:''         },         methods: {             handleRecv(data){                 // 接收参数，赋值给父组件的childText                 this.childText=data             }         }     }) &lt;/script&gt; &lt;/html&gt;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6de974b2d4987d6b31cd54cd10324bec.jpg" alt="Vue入门组件实战案例详解"></p> <hr/> <h2 id="ref属性组件间通信">ref属性（组件间通信）</h2> <h3 id="普通标签使用">普通标签使用</h3> <p><strong>普通标签使用ref属性，通过<code>$refs</code>获取到的就是ref属性所在的标签，获取到的是一个对象，如果多个标签写了ref属性，那么就将所有带ref属性的标签弄到一个对象中，可以对html进行操作设置等，如下示例：</strong></p> <pre><code class="language-html">&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"&gt;     &lt;title&gt;Title&lt;/title&gt;     &lt;script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js"&gt;&lt;/script&gt;     &lt;link href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css" &gt;     &lt;script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js"&gt;&lt;/script&gt;     &lt;script src="./js/vue.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="app"&gt;     &lt;h1 style="align-content: center"&gt;普通标签使用ref&lt;/h1&gt;     &lt;p&gt;&lt;input type="text" ref="myinput"&gt;&lt;/p&gt;     &lt;p&gt;&lt;img src="" height="100px" width="100px" ref="myimg"&gt;&lt;/p&gt;     &lt;p&gt;&lt;button @click="handleC"&gt;点我&lt;/button&gt; &lt;/p&gt; &lt;/div&gt; &lt;/body&gt; &lt;script&gt;      let vm = new Vue({         el: '#app',         data: {              text:''         },         methods: {             handleC(){                 console.log('我被点了')                 console.log(this.$refs)  // 是所有标签写了ref属性的对象{myinput:真正的标签，myimg:真正的标签}                 console.log(this.$refs.myinput.value)                 //设置值                 this.$refs.myinput.value='HammerZe'                 //设置src属性，显示图片                 this.$refs.myimg.src='https://img0.baidu.com/it/u=3608430476,1945954109&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=494'             }         }     }) &lt;/script&gt; &lt;/html&gt;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/28104cafe30cbc045fcfe39cfb49e7c8.jpg" alt="Vue入门组件实战案例详解"></p> <h3 id="组件使用ref属性">组件使用ref属性</h3> <p><strong>ref属性，如果放在组件上，就是当前组件对象</strong></p> <pre><code class="language-html">&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"&gt;     &lt;title&gt;Title&lt;/title&gt;     &lt;script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js"&gt;&lt;/script&gt;     &lt;link href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css" &gt;     &lt;script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js"&gt;&lt;/script&gt;     &lt;script src="./js/vue.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="app"&gt; &lt;!-- 组件使用ref属性   --&gt; &lt;top ref="top"&gt;&lt;/top&gt; &lt;p&gt;通信：&lt;input type="text" v-model="text"&gt;&lt;/p&gt; &lt;p&gt;父组件按钮：&lt;button @click="handleC"&gt;点我&lt;/button&gt;&lt;/p&gt; &lt;/p&gt; &lt;/div&gt; &lt;/body&gt; &lt;script&gt;    Vue.component('top', {         template: `             &lt;div&gt;                 &lt;h1&gt;{{myheader}}&lt;/h1&gt;                 &lt;p&gt;子组件按钮：&lt;button @click="handleC"&gt;点我看美女&lt;/button&gt;&lt;/p&gt;                 &lt;hr&gt;             &lt;/div&gt;         `,         data() {             return {                 myheader: "头部",             }         },         methods:{             handleC(){                 alert("美女")             }         }        },)     let vm = new Vue({         el: '#app',         data: {              text:''         },         methods: {         //放在组件上         handleC() {              console.log(this.$refs.top) //VueComponent&nbsp;{_uid: 1, _isVue: true, $options: {…}, _renderProxy: Proxy, _self: VueComponent,&nbsp;…}             /*子传父*/             // 父组件拿子组件的值             console.log(this.$refs.top.myheader)             // this.text=this.$refs.top.myheader             // 父组件调用子组件的方法             this.$refs.top.handleC()              /*父传子*/             this.$refs.top.myheader=this.text         }         }     }) &lt;/script&gt; &lt;/html&gt;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/1bb44a9db72e2265c5c14a02c98ed0ab.jpg" alt="Vue入门组件实战案例详解"></p> <h2 id="事件总线不常用">事件总线（不常用）</h2> <pre><code class="language-html">&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"&gt;     &lt;title&gt;Title&lt;/title&gt;     &lt;script src="js/vue.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="box"&gt;     &lt;child1&gt;&lt;/child1&gt;     &lt;child2&gt;&lt;/child2&gt; &lt;/div&gt; &lt;/body&gt; &lt;script&gt;     var bus=new Vue() //new一个vue的实例，就是中央事件总线     Vue.component('child1', {         template: `&lt;div&gt;             &lt;input type="text" ref="mytext"&gt;             &lt;button @click="handleClick"&gt;点我&lt;/button&gt;         &lt;/div&gt;`,         methods:{             handleClick(){                 bus.$emit('suibian',this.$refs.mytext.value) //发布消息，名字跟订阅消息名一致             }         }     })     Vue.component('child2', {         template: `&lt;div&gt;                     &lt;div&gt;收到的消息 {{msg}}&lt;/div&gt;                     &lt;/div&gt;`,         data(){             return {msg:''}         },         mounted(){             //生命周期，当前组件dom创建完后悔执行             console.log('当前组件dom创建完后悔执行')             //订阅消息             bus.$on('suibian',(item)=&gt;{                 console.log('收到了',item)                 this.msg=item             })         }     })     var vm = new Vue({         el: '#box',         data: {},         methods: {             handleClick() {                 console.log(this)                 //this.$refs.mytext 获取到input控件，取出value值                 console.log(this.$refs.mytext.value)                 console.log(this.$refs.mychild.text)                 // this.$refs.mychild.add()                 this.$refs.mychild.add('传递参数')              }         }      }) &lt;/script&gt; &lt;/html&gt;</code></pre> <h2 id="动态组件和keep-alive">动态组件和keep-alive</h2> <p><strong>动态组件：实现点击不同的连接显示不同的页面，实现跳转，使用<code>component</code>标签，用<code>is</code>属性绑定，指定哪个显示哪个</strong></p> <p><strong>keep-alive：通过keep-alive标签实现组件不销毁，保留原来输入的内容</strong></p> <pre><code class="language-html">&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"&gt;     &lt;title&gt;Title&lt;/title&gt;     &lt;script src="./js/vue.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;style&gt;     #menu {         font-size: 18px;         font-weight: bold;     }      #menu li {         text-decoration: none; /*去掉前面的圆点*/         list-style: none;         float: left;         margin-right: 20px;      }  &lt;/style&gt; &lt;body&gt; &lt;div id="app"&gt;     &lt;ul id="menu"&gt;         &lt;li @click="changeC('index')"&gt;首页&lt;/li&gt; &amp;nbsp;         &lt;li @click="changeC('order')" &gt;订单&lt;/li&gt;         &lt;li @click="changeC('good')"&gt;商品&lt;/li&gt;     &lt;/ul&gt;       &lt;keep-alive&gt;         &lt;component :is='who'&gt;&lt;/component&gt;     &lt;/keep-alive&gt;   &lt;/div&gt;  &lt;/body&gt; &lt;script&gt;     //三个组件     Vue.component('index', {         template: `             &lt;div style="overflow:hidden;"&gt;                 &lt;h1&gt;首页内容&lt;/h1&gt;             &lt;/div&gt;         `,     },)     //保留输入的订单信息     Vue.component('order', {         template: `             &lt;div&gt;                 &lt;h1&gt;订单内容&lt;/h1&gt;                 请输入要查询的订单：&lt;input type="text"&gt;             &lt;/div&gt;         `,     },)     Vue.component('good', {         template: `             &lt;div&gt;                 &lt;h1&gt;商品内容&lt;/h1&gt;             &lt;/div&gt;         `,     },)      var vm = new Vue({         el: '#app',         data: {             //默认显示index             who: 'index'          },         methods: {             changeC(data) {                 this.who = data             }         }      }) &lt;/script&gt; &lt;/html&gt;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/0498fc538a0e19404d8674381c9e5ce9.jpg" alt="Vue入门组件实战案例详解"></p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-6.htm">win11系统找不到网络路径如何解决</a></p>
                                        <p>下一个：<a href="/html/category/article-8.htm">Python调用C语言方法</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-203.htm">Python tkinter库图形绘制例子分享_python_</a></h4>
                <p>目录  一、椭圆绘制 二、矩形绘制 三、多边形绘制    一、椭圆绘制 实例代码：  import tkinter as tk                    # 导入tkinter库，并重命名</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-226.htm">C\C++ 中 malloc、calloc、realloc 函数的用法</a></h4>
                <p>C\C++ 中 malloc、calloc、realloc 函数的用法 转自：https://www.jianshu.com/p/d6f209b8796d 前言 C\C++提供了底层的内存操作，为程序</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-230.htm">java中RabbitMQ高级应用_java</a></h4>
                <p>目录  1、消息可靠性投递   1.1、确认模式  1.2、退回模式  1.3、确认机制  2、消费端限流  3、消息过期时间  4、死信队列   4.1、死信概念  4.2、延迟队列     1、消</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-225.htm">坑——java里List的remove方法</a></h4>
                <p>写过的类似代码： /**  * 2018年5月20日上午9:54:02  */ package com.test;  import java.util.ArrayList; import java.u</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-238.htm">js数组删除的方法</a></h4>
                <p>js的数组删除，我建议大家使用splice函数，不要使用slice函数，因为slice是返回一个新数组，并不是从原来的数组中删除。 比如： let a=[111,222,333,444]; a.spl</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-249.htm">vue 使用echarts绘制折线图</a></h4>
                <p>&lt;template&gt;     &lt;div&gt;         &lt;!-- 方法一，注册echarts到vue的原型对象中，指定某个div作为echarts的画布 --&gt; </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-257.htm">postman测试@pathvariable,@requestparam,@requestbody发送情况</a></h4>
                <p>postman测试@pathvariable,@requestparam,@requestbody发送情况  1、三种方式简单说明  1.1、@Pathvariable 通过占位符的方式获取入参，前端</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-243.htm">tomcat服务器项目迁移到另外一台tomcat服务器</a></h4>
                <p>流程  打开虚拟机, 访问需要迁移的服务器(账号密码请向领导或运维索要) 找到需要迁移的项目, 一般在所在tomcat盘符/公司名/项目名, 例如我所在的公司服务放置在 D:\tomcat\tomca</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-218.htm">到底什么是消息队列</a></h4>
                <p>最近公司重构订单中心，用到消息中间件，闲暇时间对此进行学习了解，下面是学习内容的总结。 一、什么是消息队列 消息（Message）是指在应用之间传送的数据，消息可以非常简单，比如只包含文本字符串，也可</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-242.htm">PyQt5 按钮Button 添加事件(信号/槽)</a></h4>
                <p>本文基于PyQt5 按钮Buttons样式设计，针对按钮添加响应的点击事件触发。 效果截图:  PyQt 模型设计：  &nbsp;PyQt 设计器截图：  *.UI 源码 &lt;?xml vers</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>