<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-252.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>[js] 回调函数 回调地狱 Promise async/await - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">[js] 回调函数 回调地狱 Promise async/await</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-dracula"> <h2>1. 回调函数 callback</h2> <ul> <li> <p>一种封装代码的手段</p> </li> <li> <p>什么是 callback , 概念</p> <p>=> 把 函数A 当做 实参 传递到 函数B 内部</p> <p>=> 在 函数B 内部以 形参 的方式 调用 函数A</p> <p>=> 我们管这个行为叫做 回调函数</p> <p>=> 我们说 函数A 是 函数B 的 回调函数</p> </li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">function</span><span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是 A 函数'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span><span class="token constant">B</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 此时 fn 形参接受的是书写在 B() 的时候, () 内部的内容 : A</span><span class="token comment">// 此时 fn 形参接受的就是全局 函数 A 的地址</span><span class="token comment">// 此时 fn 形参和全局变量 A 操作一个函数空间</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是 B 函数'</span><span class="token punctuation">)</span><span class="token comment">// 调用 fn 其实就是在调用执行全局的 A 函数</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 调用 B 函数</span><span class="token comment">// A 是一个保存 函数的地址</span><span class="token comment">// 把 函数 A 这个地址当做实参传递给了 B 函数内部的 fn 形参</span><span class="token constant">B</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span><span class="token comment">// 函数A 是 函数B 的回调函数</span></code></pre> <ul> <li> <p>为什么需要 callback 回调函数</p> </li> <li> <p>如果从头到尾都是 同步代码, 不需要回调函数</p> <p>=> 当你在 封装代码 的时候</p> <p>=> 并且代码内有 异步 的时候</p> <p>=> 并且需要在 异步的 末尾 做一些事情的时候</p> <p>=> 使用 callback</p> </li> </ul> <p>解释: 为什么异步的末尾封装要使用 callback</p> <ul> <li> <p>因为 JS 的单线程，同一个时间点只能做一个事情</p> </li> <li> <p>主要: 异步的结束时间不确定</p> </li> <li> <p>例子: 外卖</p> <p>=> 一个外卖员同一个时间点只能做一件事情</p> <p>=> 如果你希望多带一双筷子</p> <p>=> 方案1: 等到外卖员刚好到达店里的时候, 给他打电话</p> <p>=> 方案2: 在点餐的时候给一个备注</p> </li> </ul> <hr/> <p> 回调函数的缺点:</p> <ul> <li> <p>回调地狱</p> </li> <li> <p>当回调 嵌套 回调的时候, 代码的阅读和可维护性不高</p> </li> </ul> <p>解决回调地狱的问题:</p> <ul> <li> <p>Promise 来解决回调地狱</p> </li> <li> <p>分析:</p> <p>=> Promise 是来解决回调地狱</p> <p>=> 回调地狱, 是因为回调函数嵌套过多</p> <p>=> 回调函数, 为了解决在异步末尾做一些事情的封装</p> <p>=> Promise 就是一种优雅的对于异步代码封装的方案</p> </li> </ul> <pre><code class="prism language-javascript"><span class="token comment">// 为什么需要回调函数</span><span class="token comment">// 封装一段代码</span><span class="token comment">// 例子 : 外卖公司做好的事情</span><span class="token keyword">function</span><span class="token function">waimai</span><span class="token punctuation">(</span><span class="token parameter">beizhu</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 获取一个 1000 ~ 6000 的随机整数</span><span class="token keyword">const</span> time<span class="token operator">=</span><span class="token number">1000</span><span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">' 在路上 '</span><span class="token operator">+</span> time<span class="token punctuation">)</span><span class="token comment">// 我们使用 setTimeout 模拟一个网络环境请求</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'到达店里了, 拿到外卖'</span><span class="token punctuation">)</span><span class="token comment">// 直接把我需要执行的代码放在这个位置</span><span class="token comment">// 那么这个封装就没有意义了</span><span class="token comment">// 就需要用到回调函数了</span><span class="token comment">// 因为这个位置是异步的末尾了</span><span class="token comment">// 这个位置调用 beizhu 就是在异步的末尾调用</span><span class="token comment">// 例 : 不管什么时候到了店里</span><span class="token comment">// 拿到外卖以后, 把 备注 的内容执行一下</span><span class="token function">beizhu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 用户的需求: 想多拿一双筷子</span><span class="token function">waimai</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'多拿一双筷子'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 用户的需求: 想多拿点辣椒</span><span class="token function">waimai</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'多拿点辣椒'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220820/04850bcde8dcafe751a2aba4a6fbbd44.jpg" alt="[js] 回调函数 回调地狱 Promise async/await"></p> <h2>2. 回调地狱</h2> <h3>理解</h3> <ul> <li> <p>一种使用回调函数封装的代码时候的情况</p> </li> <li> <p>回调函数的使用是有 函数嵌套 在里面的</p> </li> <li> <p>当你大量使用回调函数封装的代码的时候, 会出现 结构紊乱</p> <p>=> 不利于代码的阅读和维护</p> </li> <li> <p>为了解决回调地狱</p> <p>=> ES6 的语法内出现了一个新的语法, 叫做 Promise</p> <p>=> 为了把 异步代码 封装变成 Promise 语法的封装</p> <p>=> 不再使用 回调函数 来封装 异步代码了</p> <p>=> 本质: 用来 封装异步代码 的</p> </li> </ul> <h3>实现需求 :</h3> <ol> <li> <p>发送一个请求, 请求一个接口</p> <p>=> 等到响应回来以后</p> <p>=> 把内容打印在控制台</p> </li> <li> <p>发送第二个请求, 请求第二个接口</p> <p>=> 要求必须要在第一个请求结束以后, 打印完毕以后再次发送请求</p> <p>=> 把响应内容打印在控制台</p> </li> <li> <p>发送第三个请求, 请求第三个接口</p> <p>=> 要求, 必须要在第二个请求结束以后, 打印完毕以后再次发送请求</p> <p>=> 把响应内容打印在控制台</p> </li> </ol> <pre><code class="prism language-javascript"><span class="token operator"><</span>script src<span class="token operator">=</span><span class="token string">"jquery.min.js"</span><span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">// 实现需求 1 :</span> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/first'</span><span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一次请求的结果'</span><span class="token punctuation">)</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">// 这个位置的代码执行的时候, 一定是第一个请求结束的时候</span><span class="token comment">// 需求2:</span>     $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>       url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/second'</span><span class="token punctuation">,</span>       dataType<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二次请求的结果'</span><span class="token punctuation">)</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">// 这个位置的代码执行的时候, 一定是第二个请求结束的时候</span><span class="token comment">// 需求3:</span>         $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>           url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/third'</span><span class="token punctuation">,</span>           data<span class="token operator">:</span><span class="token string">'name=Jack&age=18'</span><span class="token punctuation">,</span>           dataType<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第三次请求的结果'</span><span class="token punctuation">)</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <blockquote> <p>这里的ajax用的是jquery</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220820/885819109b2ce9f87f9d58e25dcae128.jpg" alt="[js] 回调函数 回调地狱 Promise async/await"></p> <h2>3. 认识 Promise</h2> <ul> <li> <p>是一个 ES6 出现的语法</p> </li> <li> <p>Promise 也是一个 JS 内置的 构造函数</p> </li> <li> <p>promise - 承诺 :</p> <ul> <li>承诺的状态有多少个 ?<br /> => 继续(持续执行过程中)<br /> => 成功<br /> => 失败</li> <li>承诺状态之间的转换 : 只能转换一次<br /> => 要么是 继续 转换成 成功<br /> => 要么是 继续 转换成 失败</li> </ul> </li> <li> <p>Promise 也有三个状态<br /> => 继续: pending<br /> => 成功: fulfilled<br /> => 失败: rejected</p> </li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">const</span> p<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// ...</span><span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 给当前这个承诺注册一个 成功以后的函数</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 给当前这个承诺注册一个 失败以后的函数</span> p<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p><strong>如何改变 promise 的状态</strong></p> <ul> <li>在 new Promise 的 a 函数内</li> <li>可以接受两个参数<br /> 1.第一个参数: 可以将该 Promise 的状态由继续转换为 成功<br /> 2.第二个参数: 可以将该 Promise 的状态由继续转换为 失败</li> </ul> <pre><code class="prism language-javascript"><span class="token comment">// 1. 异步代码</span><span class="token keyword">const</span> p<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// resolve 就是一个转换成功的方法</span><span class="token comment">// 当你书写 resolve() 的时候, 就是在把 该 promise 的状态转换为成功</span><span class="token comment">// 就会执行 .then 时候里面书写的 b 函数</span><span class="token comment">// reject 就是一个转换成失败的方法</span><span class="token comment">// 当你书写 reject() 的时候, 就是在把 该 promise 的状态转换为失败</span><span class="token comment">// 就会执行 .catch 时候里面书写的 c 函数</span><span class="token comment">// 这两个只能书写一个</span><span class="token comment">// 书写你需要封装的异步代码</span><span class="token keyword">const</span> time<span class="token operator">=</span><span class="token number">1000</span><span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'承诺一辈子在一起'</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>time<span class="token operator">>=</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// resolve() 调用的是 then 内部的函数 b</span><span class="token comment">// 所以这里书写在 () 内部的 time 内容就是给到 then 内 b 的实参</span><span class="token function">resolve</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token comment">// reject() 调用的是 catch 内部的函数 c</span><span class="token comment">// 所以这里书写在 () 内部的 time 内容就是给到 catch 内 c 的实参, 也是报错信息</span><span class="token function">reject</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// promise 对象调用的两个方法</span><span class="token comment">// 注册 成功</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 函数 b 不会被直接调用的</span><span class="token comment">// 这个位置的代码会在 p 这个 promise 的状态由 继续 转换为 成功 的时候调用执行</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token string">'成功的函数 b'</span><span class="token punctuation">)</span><span class="token comment">// t 就是你在 promise 内部书写的 resolve 的小括号里面 time 的内容</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 注册 失败</span> p<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 函数 c 不会被直接调用</span><span class="token comment">// 这个位置的代码会在 p 这个 promise 的状态由 继续 转换为 失败 的时候调用执行</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span><span class="token string">'失败的函数 c'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220820/9dbff0041903b1610029046d2cae9c98.jpg" alt="[js] 回调函数 回调地狱 Promise async/await"></p> <h2>4. Promise 的进阶语法</h2> <ul> <li> <p>当一个 Promise 的 then 内的代码</p> </li> <li> <p>只要你在前一个 then 内部以 return 返回一个新的 promise 对象 的时候</p> </li> <li> <p>新 promise 对象的 then 可以直接在前一个 then 的后面继续书写 then</p> </li> </ul> <p><strong>需求:</strong></p> <ol> <li> <p>发送一个请求, 请求第一个接口</p> </li> <li> <p>发送第二个请求, 请求第二个接口<br /> => 前提: 必须要等到第一个请求结束以后再次发送</p> </li> </ol> <pre><code class="prism language-javascript"><span class="token keyword">function</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> p<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{<!-- --></span><span class="token comment">// 执行 ajax</span>     $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>       url<span class="token operator">:</span> options<span class="token punctuation">.</span>url<span class="token punctuation">,</span>       data<span class="token operator">:</span> options<span class="token punctuation">.</span>data<span class="token punctuation">,</span>       type<span class="token operator">:</span>options<span class="token punctuation">.</span>type<span class="token punctuation">,</span>       dataType<span class="token operator">:</span> options<span class="token punctuation">.</span>dataType<span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 把我的 promise 对象返回出去</span><span class="token keyword">return</span> p<span class="token punctuation">}</span></code></pre> <pre><code class="prism language-javascript"><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>     url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/first'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一个请求结束了'</span><span class="token punctuation">)</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">// return 一个新的 promise 对象</span><span class="token keyword">return</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>       url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/second'</span><span class="token punctuation">,</span>       dataType<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二个请求结果'</span><span class="token punctuation">)</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">// return 一个新的 promise 对象</span><span class="token keyword">return</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>       url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/third'</span><span class="token punctuation">,</span>       data<span class="token operator">:</span><span class="token string">'name=Jack&age=20'</span><span class="token punctuation">,</span>       dataType<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第三次请求的结果'</span><span class="token punctuation">)</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220820/c7be87cd95fca9d0c1045d0464500903.jpg" alt="[js] 回调函数 回调地狱 Promise async/await"></p> <h2>5. async 函数 和 await 关键字</h2> <ul> <li> <p>ES7 ~ ES8 之间出现的语法</p> </li> <li> <p>作用 :</p> </li> <li> <p>为了解决 Promise 的问题 , 把 Promise 的代码书写的更优雅</p> </li> <li> <p>核心作用: 把 异步代码 写的 看起来像 同步代码, 本质还是异步</p> </li> </ul> <p><strong>语法:</strong></p> <p>=> async 关键字 (异步)</p> <ul> <li>使用: 书写在函数的前面</li> </ul> <p>(可以是声明式函数, 可以是函数表达式, 可以是箭头函数)</p> <pre><code class="prism language-javascript"><span class="token comment">// async 的语法</span><span class="token keyword">async</span><span class="token keyword">function</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">const</span><span class="token function-variable function">fn</span><span class="token operator">=</span><span class="token keyword">async</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">const</span><span class="token function-variable function">fn</span><span class="token operator">=</span><span class="token keyword">async</span><span class="token parameter">a</span><span class="token operator">=></span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span></code></pre> <p><strong>作用:</strong></p> <ol> <li> <p>该函数内可以使用 await 关键字了</p> </li> <li> <p>会把该函数变成一个 异步函数, 只是叫做 异步函数</p> <p>(这个异步函数并不是我们真实的异步代码,只是给这个函数起了个名字)</p> <p>=> 影响的是函数内部的代码 , 不影响函数外面的代码</p> </li> </ol> <p><strong>await 关键字 (等待)</strong></p> <ul> <li>要求:</li> </ul> <ol> <li> <p>await 必须写在一个有 async 关键字的异步函数内部</p> </li> <li> <p>await 后面等待的内容必须是一个 promise 对象 , 否则等不了</p> </li> </ol> <ul> <li> <p>作用:</p> <p>=> 把 promise 中本该在 then 内代码接受的结果 ,</p> <p>可以直接在 await 前面定义变量接受</p> <p>=> 后续的代码需要等到 promise 执行完毕才会执行</p> </li> </ul> <pre><code class="prism language-javascript"><span class="token keyword">function</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> p<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{<!-- --></span><span class="token comment">// 执行 ajax</span>     $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>       url<span class="token operator">:</span> options<span class="token punctuation">.</span>url<span class="token punctuation">,</span>       data<span class="token operator">:</span> options<span class="token punctuation">.</span>data<span class="token punctuation">,</span>       type<span class="token operator">:</span>options<span class="token punctuation">.</span>type<span class="token punctuation">,</span>       dataType<span class="token operator">:</span> options<span class="token punctuation">.</span>dataType<span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 把我的 promise 对象返回出去</span><span class="token keyword">return</span> p<span class="token punctuation">}</span></code></pre> <pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token comment">// ① start</span><span class="token keyword">async</span><span class="token keyword">function</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是 fn 函数内部的代码'</span><span class="token punctuation">)</span><span class="token comment">// ②</span><span class="token comment">// 因为 myPromiseAjax是按照 promise 的语法形式进行封装的代码</span><span class="token comment">// myPromiseAjax会返回一个 promise 对象</span><span class="token comment">// fn 函数内, 执行到 myPromiseAjax这个代码的时候</span><span class="token comment">// 会等待, 等到这个异步的代码完全执行完毕, 把结果赋值给 r1 以后</span><span class="token comment">// 在继续执行后面的代码</span><span class="token keyword">const</span> r1<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/first'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token comment">// ④</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token comment">// ③ end</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220820/ebb6dca6461ba646f1cd282ba6386e50.jpg" alt="[js] 回调函数 回调地狱 Promise async/await"></p> <pre><code class="prism language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">function</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是 fn 函数内部的代码'</span><span class="token punctuation">)</span><span class="token comment">// 此时 fn 函数内可以使用 await 关键字了</span><span class="token comment">// myPromiseAjax返回出来的 promise 对象会执行</span><span class="token comment">// 把 resolve() 的时候 括号里面的内容 赋值给 r1. 在继续向后执行代码</span><span class="token keyword">const</span> r1<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/first'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token comment">// // 需求2:</span><span class="token keyword">const</span> r2<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>     url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/second'</span><span class="token punctuation">,</span>     dataType<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token comment">// 需求3:</span><span class="token keyword">const</span> r3<span class="token operator">=</span><span class="token keyword">await</span><span class="token function">myPromiseAjax</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>     url<span class="token operator">:</span><span class="token string">'http://localhost:8888/test/third'</span><span class="token punctuation">,</span>     data<span class="token operator">:</span><span class="token string">'name=Jack&age=20'</span><span class="token punctuation">,</span>     dataType<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220820/104f1938c3b7e3090cb04d5e33dd8667.jpg" alt="[js] 回调函数 回调地狱 Promise async/await"></p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-251.htm">C# 有关List&lt;T&gt;的Contains与Equals方法_在线工具</a></p>
                                        <p>下一个：<a href="/html/category/article-253.htm">win11系统怎么设置软件安装来源</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4443.htm">中国农大动物医院哪个医生好 中国农大动物医院哪个医生好一点</a></h4>
                <p>摘要：       大家好，今天小编关注到一个比较有意思的话题，就是关于中国农大动物医院哪个医生好的问题，于是小编就整理了4个相关介绍中国农大动物医院哪个医生好的解答，让我们一起看看吧。北京农大动物医</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-7074.htm">做梦梦见海豹是什么意思啊（梦见小海豹心理学解析）</a></h4>
                <p>摘要：       今天给各位分享做梦梦见海豹是什么意思啊的知识，其中也会对梦见小海豹心理学解析进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、梦见海豹有什么.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-6017.htm">猫三联需要两针还是三针的（猫三联到底打两针还是三针）</a></h4>
                <p>摘要：       今天给各位分享猫三联需要两针还是三针的的知识，其中也会对猫三联到底打两针还是三针进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、猫三联三针.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4515.htm">真正的宠物狗免费领养网站有哪些地方（真正的宠物狗免费领养网站有哪些地方呢）</a></h4>
                <p>摘要：       今天给各位分享真正的宠物狗免费领养网站有哪些地方的知识，其中也会对真正的宠物狗免费领养网站有哪些地方呢进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-6890.htm">宠物粮食品牌取名字大全（宠物粮食品牌取名字大全集）</a></h4>
                <p>摘要：       今天给各位分享宠物粮食品牌取名字大全的知识，其中也会对宠物粮食品牌取名字大全集进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、猫粮品牌排名.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-6615.htm">春节柳州旅游攻略(春节期间柳州好玩的地方)</a></h4>
                <p>今天蝶侠小编整理了柳州大全 春节的地方相关信息，希望在这方面能够更好的大家。本文目录一览：1、柳州旅游攻略必玩的景点2、春节广西好玩的地方3、柳州十大旅游景点 柳州旅游攻略必玩的景点    这个我知道</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4585.htm">宠物疫苗猫咪可以打吗（猫咪打疫苗宠物店可以打吗?）</a></h4>
                <p>摘要：       本篇文章给大家谈谈宠物疫苗猫咪可以打吗，以及猫咪打疫苗宠物店可以打吗?对应的知识点，希望对各位有所帮助，不要忘了收藏本站喔。本文目录一览：1、两个月的小猫能打狂犬疫苗吗?...  </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4442.htm">动物疫苗价格表图片高清大全集（动物疫苗价格查询）</a></h4>
                <p>摘要：       今天给各位分享动物疫苗价格表图片高清大全集的知识，其中也会对动物疫苗价格查询进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、狗狗打疫苗一般.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-6661.htm">动物疫苗经营范围有哪些类型（动物疫苗经营许可）</a></h4>
                <p>摘要：       今天给各位分享动物疫苗经营范围有哪些类型的知识，其中也会对动物疫苗经营许可进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、动物疫苗的概念是.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-6891.htm">上海宠物领养中心免费领养狗狗吗（上海宠物领养活动）</a></h4>
                <p>摘要：       今天给各位分享上海宠物领养中心免费领养狗狗吗的知识，其中也会对上海宠物领养活动进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、哪里有领养流.</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>