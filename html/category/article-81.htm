<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-81.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<blockquote> <p>其他章节请看：</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/pengjiali/p/16108085.html"  title="react实战 系列" target="_blank" rel="nofollow">react实战 系列</a></p> </blockquote> <h2 id="my-dashboard">My Dashboard</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/pengjiali/p/16122561.html"  title="起步" target="_blank" rel="nofollow">上一篇</a>我们在 spug 项目中模仿”任务计划“模块实现一个类似的一级导航页面（”My任务计划“），本篇，我们将模仿“Dashboard”来实现一个仪表盘“My Dashboard”。</p> <p>主要涉及 antd 的<code>Grid</code>、<code>Card</code>、<code>Descriptions</code>等组件、<code>bizcharts</code> 的使用、<code>moment</code> 日期库和页面适配。</p> <p><em>注</em>：实现的代码在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/pengjiali/p/16122561.html"  title="起步" target="_blank" rel="nofollow">上一篇</a>的基础上展开。</p> <h3 id="dashboard">Dashboard</h3> <p>界面如下：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/643bd77e44ac6216ffd895897aa7af4a.jpg" alt="react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具"></p> <p>里面用到了：</p> <ul> <li>antd 的<code>Grid</code>、<code>Card</code>、<code>Descriptions</code> 描述列表 （文字长度不同，有时会感觉没对齐）</li> <li><code>bizcharts</code> 中的折线图、柱状图</li> <li><code>moment</code>（日期相关的库），比如按天、按月、最近 30 天都很方便</li> </ul> <h3 id="my-dashboard-1">My Dashboard</h3> <h4 id="最终效果">最终效果</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/a0220015247287882706f5e06ce95531.jpg" alt="react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具"></p> <p>无需权限即可访问：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/e9354f6a879ae7bce2c727233218b192.jpg" alt="react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具"></p> <p>全屏效果：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/90ab6d0e13b0a2fb43c773f5b5a87598.jpg" alt="react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具"></p> <h3 id="实现的代码">实现的代码</h3> <h4 id="安装两个依赖包">安装两个依赖包：</h4> <ul> <li><code>@antv/data-set</code>，柱状图和饼状图需要使用</li> <li><code>bx-tooltip</code>，自定义 bizcharts 中的 tooltip。折线图和柱状图的 tooltip 都使用了。</li> </ul> <pre><code class="language-javascript">spug-study&gt; npm i @antv/data-set  added 31 packages, and audited 1820 packages in 26s  107 packages are looking for funding   run `npm fund` for details  33 vulnerabilities (1 low, 16 moderate, 15 high, 1 critical)  To address issues that do not require attention, run:          npm audit fix  To address all issues (including breaking changes), run:       npm audit fix --force  Run `npm audit` for details.</code></pre> <pre><code class="language-javascript">spug-study&gt; npm i -D bx-tooltip  added 1 package, and audited 1821 packages in 9s  107 packages are looking for funding   run `npm fund` for details  33 vulnerabilities (1 low, 16 moderate, 15 high, 1 critical)  To address issues that do not require attention, run:   npm audit fix  To address all issues (including breaking changes), run:   npm audit fix --force  Run `npm audit` for details.</code></pre> <p>package.json 变动如下：</p> <pre><code class="language-javascript">"dependencies": {   "@antv/data-set": "^0.11.8", } "devDependencies": {   "bx-tooltip": "^0.1.6", }</code></pre> <h4 id="增强表格组件">增强表格组件</h4> <p>spug 中封装的表格组件，不支持 style和 size。替换一行，以及增加一行：</p> <pre><code class="language-javascript">// src/components/TableCard.js  - &lt;div ref={rootRef} className={styles.tableCard}&gt; + &lt;div ref={rootRef} className={styles.tableCard} style={{...props.customStyles}}&gt;  &lt;Table + size={props.size}</code></pre> <h4 id="准备-mock-数据">准备 mock 数据</h4> <p>将 mydashboard 模块的的 mock 专门放入一个文件，并在<code>mock/index.js</code> 中引入。</p> <pre><code class="language-javascript">// src\mock\index.js  + import './mydashboard'</code></pre> <pre><code class="language-javascript">// src\mock\mydashboard.js  import Mock from 'mockjs'  // 开发环境引入 mock if (process.env.NODE_ENV === 'development') {      Mock.mock('/api/mdashboard/occupancy_rate/', 'get', () =&gt; (     {"data": [ {         month: "2022-01-01",         city: "城市-名字很长很长很长",         happiness: 10,         per: 90,         msg1: '信息xxx'     },     {         month: "2022-01-01",         city: "城市B",         per: 30,         happiness: 50,         msg1: '信息xxx'     },     {         month: "2022-02-01",         city: "城市-名字很长很长很长",         happiness: 20,         per: 40,         msg1: '信息xxx'     },          {         month: "2022-02-01",         city: "城市B",         happiness: 20,         per: 60,         msg1: '信息xxx'     },     {         month: "2022-03-01",         city: "城市-名字很长很长很长",         happiness: 30,         per: 80,         msg1: '信息xxx'     },], "error": ""}  ))  let mIdSeed = 1; Mock.mock('/api/mdashboard/table', 'get', () =&gt; ({     "data": [{ "id": mIdSeed++, "name": "苹果" + mIdSeed, address: '场地' +mIdSeed, time: new Date().toLocaleTimeString() },     { "id": mIdSeed++, "name": "苹果" + mIdSeed, address: '场地' +mIdSeed, time: new Date().toLocaleTimeString() },     { "id": mIdSeed++, "name": "苹果" + mIdSeed, address: '场地' +mIdSeed, time: new Date().toLocaleTimeString() },     { "id": mIdSeed++, "name": "苹果" + mIdSeed, address: '场地' +mIdSeed, time: new Date().toLocaleTimeString() },     { "id": mIdSeed++, "name": "苹果" + mIdSeed, address: '场地' +mIdSeed, time: new Date().toLocaleTimeString() },     { "id": mIdSeed++, "name": "苹果" + mIdSeed, address: '场地' +mIdSeed, time: new Date().toLocaleTimeString() },     { "id": mIdSeed++, "name": "苹果" + mIdSeed, address: '场地' +mIdSeed, time: new Date().toLocaleTimeString() },     { "id": mIdSeed++, "name": "苹果" + mIdSeed, address: '场地' +mIdSeed, time: new Date().toLocaleTimeString() },     { "id": mIdSeed++, "name": "苹果" + mIdSeed, address: '场地' +mIdSeed, time: new Date().toLocaleTimeString() },     { "id": mIdSeed++, "name": "苹果" + mIdSeed, address: '场地' +mIdSeed, time: new Date().toLocaleTimeString() },     { "id": mIdSeed++, "name": "苹果" + mIdSeed, address: '场地' +mIdSeed, time: new Date().toLocaleTimeString() },     { "id": mIdSeed++, "name": "苹果" + mIdSeed, address: '场地' +mIdSeed, time: new Date().toLocaleTimeString() },     { "id": mIdSeed++, "name": "苹果" + mIdSeed, address: '场地' +mIdSeed, time: new Date().toLocaleTimeString() },     { "id": mIdSeed++, "name": "苹果" + mIdSeed, address: '场地' +mIdSeed, time: new Date().toLocaleTimeString() }, ] })) }</code></pre> <h4 id="路由配置">路由配置</h4> <p>配置<code>/mdashboard</code> 和<code>/mydashboard</code> 两个路由：</p> <pre><code class="language-javascript">// src\App.js  + import MDashboard from './pages/mdashboard/tIndex';  class App extends Component {   render() {     return (       &lt;Switch&gt;       //  无需权限       + &lt;Route path="/mdashboard" exact component={MDashboard} /&gt;         &lt;Route path="/" exact component={Login} /&gt;         &lt;Route path="/ssh" exact component={WebSSH} /&gt;         &lt;Route component={Layout} /&gt;       &lt;/Switch&gt;     );   } }</code></pre> <pre><code class="language-javascript">// src\routes.js  + import MyDashboardIndex from './pages/mdashboard';  export default [   {icon: &lt;DesktopOutlined/&gt;, title: '工作台', path: '/home', component: HomeIndex},   {     icon: &lt;DashboardOutlined/&gt;,     title: 'Dashboard',     auth: 'dashboard.dashboard.view',     path: '/dashboard',     component: DashboardIndex   }, + // 我的仪表盘 + { +   icon: &lt;DashboardOutlined /&gt;, +   title: 'MyDashboard', +   auth: 'mydashboard.mydashboard.view', +   path: '/mydashboard', +   component: MyDashboardIndex + },</code></pre> <p>新建仪表盘组件。一个需要权限访问，另一个无需权限即可访问，故将仪表盘提取成一个单独的文件：</p> <pre><code class="language-javascript">// src\pages\mdashboard\Dashboard.js  import React from 'react'; export default function () {   return (     &lt;div&gt;仪表盘&lt;/div&gt;   ) }</code></pre> <pre><code class="language-javascript">// src\pages\mdashboard\index.js  import React from 'react'; import { AuthDiv } from 'components'; import Dashboard from './Dashboard';  export default function () {   return (     &lt;section&gt;       //  AuthDiv 是 spug 封装的与权限相关的组件       &lt;AuthDiv auth="testdashboard.testdashboard.view"&gt;         &lt;p&gt;需要权限才能访问&lt;/p&gt;         &lt;Dashboard /&gt;       &lt;/AuthDiv&gt;     &lt;/section&gt;   ) }</code></pre> <pre><code class="language-javascript">// src\pages\mdashboard\tIndex.js  import React from 'react'; import Dashboard from './Dashboard';  export default function () {   return (     &lt;section&gt;         &lt;p&gt;无需权限也能访问&lt;/p&gt;         &lt;Dashboard /&gt;     &lt;/section&gt;   ) }</code></pre> <p>重启服务，倘若能访问，说明一切就绪，只差仪表盘核心代码。</p> <p>访问<code>/mydashboard</code>：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/a1216f1e8026df034ac5b56482c6e484.jpg" alt="react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具"></p> <p>访问<code>/mdashboard</code>：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/25f629cad863c818646d0c282e35273a.jpg" alt="react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具"></p> <h4 id="仪表盘的核心代码">仪表盘的核心代码</h4> <h5 id="样式">样式</h5> <pre><code class="language-javascript">// src\pages\mdashboard\index.module.less  .tdashboardBox {     .react{         width: 10px;         height: 10px;         display: inline-block;         background: #52c41a; /* #00000040 */         margin-left: 30px;         margin-right: 10px;     }      // 参考：src\components\index.module.less 中 global     :global(.trendBox .ant-card-head-wrapper) {         width: 100%;     } }</code></pre> <h5 id="表格水果信息">表格（水果信息）</h5> <pre><code class="language-javascript">// src\pages\mdashboard\Table.js  import React from 'react'; import { observer } from 'mobx-react'; import { Descriptions } from 'antd'; import { TableCard } from 'components'; import store from './store';  @observer class ComTable extends React.Component {   // 默认值   static defaultProps = {     tableHeight: 353   }    // scrollY 以外的高度   excludeScrollY = 120;   componentDidMount() {     store.fetchRecords()   }    columns = [{     title: 'id',     dataIndex: 'id',   },{     title: '名称',     dataIndex: 'name',   }, {     title: '生产地',     dataIndex: 'address',   }, {     title: '时间',     dataIndex: 'time',   }];    handleExpand = record =&gt; {     return &lt;Descriptions&gt;       &lt;Descriptions.Item label="真数据"&gt;{record.time}&lt;/Descriptions.Item&gt;       &lt;Descriptions.Item label="假数据"&gt;xxx&lt;/Descriptions.Item&gt;       &lt;Descriptions.Item label="假数据xxx"&gt;xxxxxx&lt;/Descriptions.Item&gt;       &lt;Descriptions.Item label="假数据xx"&gt;xxxxxxxxxxxxxxx&lt;/Descriptions.Item&gt;       &lt;Descriptions.Item label="假数据xx"&gt;xxx&lt;/Descriptions.Item&gt;       &lt;Descriptions.Item label="假数据xxxxxx"&gt;         xxxxx xxxxx xxxxxxxxxx xxxxxxxxx       &lt;/Descriptions.Item&gt;     &lt;/Descriptions&gt;   }    render() {     console.log('this.props.tableHeight', this.props.tableHeight, 'y', this.props.tableHeight * this.scrollRadio)     return (       &lt;TableCard       customStyles={{height: this.props.tableHeight}}         title="水果信息"         tKey="mt"         rowKey="id"         loading={store.isFetching}         dataSource={store.dataSource}         onReload={store.fetchRecords}         actions={[]}         scroll={{ y: this.props.tableHeight  - this.excludeScrollY  }}         expandable={{           expandedRowRender: this.handleExpand,           expandRowByClick: true         }}         size={'middle'}         // 设为 false 时不展示和进行分页         pagination={false}         columns={this.columns} /&gt;     )   } }  export default ComTable</code></pre> <h5 id="折线图居住趋势">折线图（居住趋势）</h5> <pre><code class="language-javascript">// src\pages\mdashboard\Trend.js  import React, { useState, useEffect } from 'react'; import { Card, DatePicker, Modal } from 'antd'; import { Chart, Geom, Axis, Tooltip, Legend } from 'bizcharts'; import { http } from 'libs'; import styles from './index.module.less' // 日期相关的库，比如最近30天等 import moment from 'moment';  /* bizcharts 官网： 通过bx-tooltip插件自定义  为了满足更灵活多变的Tooltip自定义需求，提供bx-tooltip插件来实现ReactNode渲染，摆脱HTML模板的繁琐和死板 */ import useCustTooltip from 'bx-tooltip'; import { Typography, Space } from 'antd'; import store from './store'  export default function (props = { cardBodyHeight: 450 }) {   // chart 高度占比   const chartHeightRatio = 0.888    const { Text, Link, Title } = Typography;   const [loading, setLoading] = useState(true);   // 本月第一天 —— 本月最后一天   // const [duration, setDuration] = useState([moment().startOf('month'), moment().endOf('month')]);   // 最近三十天   const [duration, setDuration] = useState([moment().subtract(29, 'days'), moment()]);   const [res, setRes] = useState([]);    useEffect(() =&gt; {     const strDuration = duration.map(x =&gt; x.format('YYYY-MM-DD'))      setLoading(true);     http.get('/api/mdashboard/occupancy_rate/', { duration: strDuration })       .then(res =&gt; {         setRes(res)       })       .finally(() =&gt; setLoading(false))   }, [duration])    // bx-tooltip插件的使用   const [BxChart, CustTooltip] = useCustTooltip.create(Chart, Tooltip);    return (     // headStyle、bodyStyle 在这里都是用于适配（响应式）     &lt;Card className="trendBox" loading={loading} title="居住趋势" headStyle={store.cardTitleStyle} bodyStyle={{ height: props.cardBodyHeight }} extra={(       &lt;div&gt;         &lt;DatePicker.RangePicker allowClear={false} style={{ width: 250 }} value={duration} onChange={val =&gt; setDuration(val)} /&gt;       &lt;/div&gt;     )}&gt;        &lt;BxChart height={props.cardBodyHeight * chartHeightRatio} data={res} padding={[30, 120, 20, 60]}         // 坐标轴展示不完整         scale={{ month: { range: [0.05, 0.99] }, per: { alias: '居住率', range: [0, 0.95], minTickInterval: 10, max: 100, min: 0 } }}         // 强制适应（PS：只会对宽度有响应式，高度没有）         forceFit       &gt;         &lt;Legend position="right-center" allowAllCanceled={true} itemFormatter={val =&gt; {           const maxNum = 10           return val.length &gt; maxNum ? val.split('').slice(0, maxNum - 3).join('') + '...' : val         }} /&gt;         {/* x 坐标格式化 */}         &lt;Axis name="month" label={{           formatter(text, item, index) {             // 格式化：2022-01-01 -&gt; 0101             return `${text.split('-').slice(1).join('')}`;           }         }} /&gt;          &lt;Axis name="per" title /&gt;          {/* 自定义 tooltip */}         &lt;CustTooltip enterable &gt;           {(title, items) =&gt; {             return &lt;div&gt;               {                 items.map((x, i) =&gt; {                   let oData = x.point._origin                   return &lt;div&gt;                     {Object.is(i, 0) &amp;&amp; &lt;Title level={5}&gt;{oData.month}&lt;/Title&gt;}                     &lt;section style={{ marginTop: '20px' }}&gt;                       &lt;Title style={{ color: x.color, fontWeight: 'bold' }} level={5}&gt;{oData.city}&lt;/Title&gt;                       &lt;Space direction="vertical" size={2}&gt;                         &lt;Text&gt;幸福指数：{oData.happiness}&lt;/Text&gt;                         &lt;Link href="hello" target="_blank"&gt;                           跳转                         &lt;/Link&gt;                         &lt;Link onClick={() =&gt; {                           Modal.info({                             title: 'title',                             content: oData.msg1                           });                         }}&gt;                           详情                         &lt;/Link&gt;                       &lt;/Space&gt;                     &lt;/section&gt;                   &lt;/div&gt;                 })               }             &lt;/div&gt;           }}         &lt;/CustTooltip&gt;          &lt;Geom type="line" position="month*per"           // 两条线           size={2}           // 使线条平滑           // shape={"smooth"}            color={"city"}         /&gt;       &lt;/BxChart&gt;     &lt;/Card&gt;   ) }</code></pre> <h5 id="饼状图统计苹果和梨子">饼状图（统计苹果和梨子）</h5> <pre><code class="language-javascript">// src\pages\mdashboard\PieChart.js  import React from 'react'; import { Typography} from 'antd'; import {     Chart,     Geom,     Axis,     Tooltip,     Coord,     Label,     Legend } from 'bizcharts'; import DataSet from '@antv/data-set';  // chartHeight 默认高度 250px ，用于适配 export default function (props = {chartHeight: 250}) {     const { Text } = Typography;      const { DataView } = DataSet;     const data = [         {             item: '苹果',             count: 10,         },         {             item: '梨子',             count: 20,         },     ];     const dv = new DataView();     dv.source(data).transform({         type: 'percent',         field: 'count',         dimension: 'item',         as: 'percent',     });     const cols = {         percent: {             formatter: val =&gt; {                 val = val * 100 + '%';                 return val;             },         },     };     function getXY(c, { index: idx = 0, field = 'percent', radius = 0.5 }) {         const d = c.get('data');         if (idx &gt; d.length) return;         const scales = c.get('scales');         let sum = 0;         for (let i = 0; i &lt; idx + 1; i++) {             let val = d[i][field];             if (i === idx) {                 val = val / 2;             }             sum += val;         }         const pt = {             y: scales[field].scale(sum),             x: radius,         };         const coord = c.get('coord');         let xy = coord.convert(pt);         return xy;     }     return (         &lt;section&gt;             &lt;Text&gt;统计苹果和梨子&lt;/Text&gt;             &lt;Chart                 height={props.chartHeight}                 // 内容显示不完整（见 bizcharts 实战部分）                 padding={[20, 150, 20, 40]}                 data={dv}                 scale={cols}                 forceFit                 onGetG2Instance={c =&gt; {                     const xy = getXY(c, { index: 0 });                     c.showTooltip(xy);                 }}             &gt;                 &lt;Legend position="right-center" /&gt;                 &lt;Coord type="theta" radius={1} /&gt;                 &lt;Axis name="percent" /&gt;                 &lt;Tooltip                     showTitle={false}                     itemTpl='&lt;li&gt;&lt;span style="background-color:{color};" class="g2-tooltip-marker"&gt;&lt;/span&gt;{name}: {value}&lt;/li&gt;'                 /&gt;                 &lt;Geom                     type="intervalStack"                     position="percent"                     color="item"                     tooltip={[                         'item*percent',                         (item, percent) =&gt; {                             // 处理 33.33333333% -&gt; 33.33                             percent = (percent * 100).toFixed(2) + '%';                             return {                                 name: item,                                 value: percent,                             };                         },                     ]}                     style={{                         lineWidth: 1,                         stroke: '#fff',                     }}                 &gt;                     &lt;Label                         content="count"                         formatter={(val, item) =&gt; {                             return item.point.item + ': ' + val;                         }}                     /&gt;                 &lt;/Geom&gt;             &lt;/Chart&gt;         &lt;/section&gt;     ); }</code></pre> <h5 id="柱状图堆叠柱状图">柱状图（堆叠柱状图）</h5> <pre><code class="language-javascript">// src\pages\mdashboard\BarChart.js  import React from "react"; import { Typography, Space } from 'antd' import {   Chart,   Geom,   Axis,   Tooltip,   Coord,   Legend, } from "bizcharts"; import useCustTooltip from 'bx-tooltip'; import DataSet from "@antv/data-set";  export default function (props = {barHeight: 240}) {   const [BxChart, CustTooltip] = useCustTooltip.create(Chart, Tooltip);   const { Text,Title } = Typography;   const retains = ["State", '总比例', 'bad', 'good', 'Total']   const fields = ["好的比例", "坏的比例"]   const data = [     {       State: "苹果（红富士、糖心苹果）",       good: 50,       bad: 150,       Total: 200,       好的比例: 25,       坏的比例: 75,       总比例: 100     },     {       State: "梨子（香梨）",       good: 75,       bad: 125,       Total: 200,       好的比例: 37.5,       坏的比例: 62.5,       总比例: 100     },   ];    const ds = new DataSet();   const dv = ds.createView().source(data);    dv.transform({     type: "fold",     fields: fields,     key: "比例",     value: "百分总计",     retains: retains // 保留字段集，默认为除fields以外的所有字段   });    return (     &lt;section&gt;       &lt;Text&gt;堆叠柱状图&lt;/Text&gt;       &lt;BxChart height={props.barHeight} data={dv} padding={[30, 80, 20, 40]} forceFit&gt;         &lt;Legend position="right-center" /&gt;         &lt;Coord /&gt;         &lt;Axis           name="State"           label={{             offset: 12,             formatter(text, item, index) {               // 最多显示 10 个，多余省略。详细的在 tooltip 中显示               const maxNum = 10               return text.length &gt; maxNum ? text.split('').slice(0, maxNum - 3).join('') + '...' : text             }           }}         /&gt;         &lt;CustTooltip enterable &gt;           {(title, items) =&gt; {             return &lt;div&gt;               {                 items.map((x, i) =&gt; {                   // 取得原始数据                   let oData = x.point._origin                   return &lt;div&gt;                     {Object.is(i, 0) &amp;&amp; &lt;Title level={5}&gt;{oData.State}&lt;/Title&gt;}                     &lt;section style={{ marginTop: '20px' }}&gt;                       &lt;Space direction="vertical" size={2}&gt;                         &lt;Text style={{ color: x.color, fontWeight: 'bold' }}&gt;{oData['比例']}：{oData['百分总计']}%&lt;/Text&gt;                         &lt;Text&gt;good数量：{oData['good']}&lt;/Text&gt;                         &lt;Text&gt;bad数量：{oData['bad']}&lt;/Text&gt;                         &lt;Text&gt;总数量：{oData['Total']}&lt;/Text&gt;                       &lt;/Space&gt;                     &lt;/section&gt;                   &lt;/div&gt;                 })               }             &lt;/div&gt;           }}         &lt;/CustTooltip&gt;         &lt;Geom           type="intervalStack"           position="State*百分总计"           color={"比例"}         &gt;         &lt;/Geom&gt;       &lt;/BxChart&gt;     &lt;/section&gt;   ); }</code></pre> <h5 id="storejs">store.js</h5> <pre><code class="language-javascript">// src\pages\mdashboard\store.js  import { observable, computed } from 'mobx'; import http from 'libs/http';  const PADDING = 16 class Store {   // 表格数据   @observable records = [];    // 是否正在请求数据   @observable isFetching = false;    // 数据源   @computed get dataSource() {     return this.records   }    fetchRecords = () =&gt; {     this.isFetching = true;     http.get('/api/mdashboard/table')       // todo 接口格式或许会调整        .then(res =&gt; this.records = res)       .finally(() =&gt; this.isFetching = false)   };    /* 适配相关 */   // 盒子高度，padding 用于给顶部和底部留点空隙。   // 由于笔者没有设计，所以先用 px 实现，之后在在将固定高度改为响应式，937 是固定高度实现后测量出的高度。   @observable baseBoxHeight = 937 - PADDING   @observable padding = PADDING   // 需要用 this 调用 padding 变量，即 `this.padding`   @observable boxHeight = window.innerHeight - this.padding * 2    // 饼图高度比例   @observable pieBoxRatio = 0.20    // 柱状图高度比例   @observable barBoxRatio = 0.23    // “My Dashboard 我的仪表盘”    @computed get TitleHeight() {     const ratio = 80 / this.baseBoxHeight     return this.boxHeight * ratio   }   // 运行card高度   @computed get todayCardHeight() {     const ratio = 75 / this.baseBoxHeight     return this.boxHeight * ratio   }    // “饼图+描述列表+柱状图” body 高度   @computed get statisticBodyHeight() {     const ratio = 660 / this.baseBoxHeight     return this.boxHeight * ratio   }    // 居住趋势 body 的   @computed get trendBodyBodyHeight() {     const ratio = 385 / this.baseBoxHeight     return this.boxHeight * ratio   }    // 水果信息高度   @computed get configTableHeight() {     const ratio = 353 / this.baseBoxHeight     return this.boxHeight * ratio   }    // xys16 得用 computed 才会联动。下面这种写法不会联动   // @observable xys16 = (16 / this.baseBoxHeight) * this.boxHeight   @computed get xys16() {     return (16 / this.baseBoxHeight) * this.boxHeight   }    @computed get xys12() {     return (12 / this.baseBoxHeight) * this.boxHeight   }    @computed get xys36() {     return (36 / this.baseBoxHeight) * this.boxHeight   }    @computed get xys24() {     return (24 / this.baseBoxHeight) * this.boxHeight   }    @computed get xys78() {     return (78 / this.baseBoxHeight) * this.boxHeight   }    @computed get pieBoxHeight() {     return this.pieBoxRatio * this.boxHeight   }    @computed get barBoxHeight() {     return this.barBoxRatio * this.boxHeight   }    // card 的 header    @computed get cardTitleStyle() {     const cardTitleRatio = 57 / this.baseBoxHeight     return { display: 'flex', height: this.boxHeight * cardTitleRatio, alignItems: 'center', justifyContent: 'center' }   }   /* /适配相关 */ }  export default new Store()</code></pre> <h5 id="dashboardjs">Dashboard.js</h5> <pre><code class="language-javascript">// src\pages\mdashboard\Dashboard.js   import React, {useEffect, Fragment} from 'react'; import { Row, Col, Card, Descriptions, Typography, Divider } from 'antd'; import AlarmTrend from './Trend'; import Piechart from './PieChart' import CusTable from './Table'; import CusBarChart from './BarChart'; import Styles from './index.module.less' import { observer } from 'mobx-react'; import store from './store'  export default observer(function () {   // Typography排版   const { Text } = Typography;    useEffect(() =&gt; {     // 响应式     window.addEventListener("resize", function(){       // padding，用于留点间距出来       store.boxHeight = window.innerHeight - store.padding * 2     }, false);   }, [])    return (     // Fragment 用于包裹多个元素，却不会被渲染到 dom     &lt;Fragment&gt;       {/* 使用单一的一组 Row 和 Col 栅格组件，就可以创建一个基本的栅格系统，所有列（Col）必须放在 Row 内。 */}       &lt;Row style={{ marginBottom: store.xys16 }}&gt;         &lt;Col span={24}&gt;           {/* 可以省略 px */}           {/* 如果将字体和padding 改为响应式，height 设置或不设置还是有差别的，设置 height 会更准确 */}           &lt;Card bodyStyle={{display: 'flex', height: store.TitleHeight, justifyContent: 'center', padding: store.xys12, fontSize: store.xys36, fontWeight: 700,  }}&gt;             &lt;Text&gt;My Dashboard 我的仪表盘&lt;/Text&gt;           &lt;/Card&gt;         &lt;/Col&gt;       &lt;/Row&gt;       &lt;Row gutter={16}&gt;         &lt;Col span={8}&gt;           {/* gutter：水平垂直间距都是 响应式 16  */}           &lt;Row gutter={[store.xys16, store.xys16]}&gt;             {/* 24 栅格系统。 */}             &lt;Col span={24}&gt;               {/* 垂直居中 */}               &lt;Card bodyStyle={{ display: 'flex', height: store.todayCardHeight, alignItems: 'center'}}&gt;                 {/* 文字大小 */}                 &lt;span&gt;                 &lt;Text style={{ fontSize: store.xys16}}&gt;                   运行为绿色，否则为灰色：                   &lt;span className={Styles.react}&gt;&lt;/span&gt;                   &lt;span&gt;运行&lt;/span&gt;                 &lt;/Text&gt;                 &lt;/span&gt;               &lt;/Card&gt;             &lt;/Col&gt;             &lt;Col span={24}&gt;               &lt;Card title="饼图+描述列表+柱状图" headStyle={store.cardTitleStyle} bodyStyle={{height: store.statisticBodyHeight}}&gt;                 &lt;Piechart chartHeight={store.pieBoxHeight}/&gt;                 &lt;Divider style={{margin: `${store.xys12}px 0`}}/&gt;                 {/* Descriptions描述列表，常见于详情页的信息展示。这里总是显示两列。 */}                 {/* spug 中“Dashboard”的“最近30天登录”是用的就是Descriptions，缺点是不像 table 对齐。当文字长度不同，会看起来错乱。 */}                 {/* 样式，用于适配，即垂直居中 */}                 &lt;Descriptions column={2} style={{display: 'flex', alignItems: 'center', minHeight: store.xys78}}&gt;                   &lt;Descriptions.Item label="Descriptions"&gt;描述列表&lt;/Descriptions.Item&gt;                   &lt;Descriptions.Item label="梨子"&gt;5个&lt;/Descriptions.Item&gt;                   &lt;Descriptions.Item label="购买时间"&gt;2022-04-21&lt;/Descriptions.Item&gt;                   &lt;Descriptions.Item label="购买途径"&gt;                     &lt;Text                       style={{ width: 100 }}                       ellipsis={{ tooltip: '看不完整就将鼠标移上来' }}&gt;                       看不完整就将鼠标移上来                       {/* 超A、超B、超C、超D， */}                     &lt;/Text&gt;                   &lt;/Descriptions.Item&gt;                 &lt;/Descriptions&gt;                 &lt;Divider style={{margin: `${store.xys12}px 0`}}/&gt;                 &lt;CusBarChart barHeight={store.barBoxHeight}/&gt;               &lt;/Card&gt;             &lt;/Col&gt;           &lt;/Row&gt;         &lt;/Col&gt;         &lt;Col span={16} &gt;           &lt;Row gutter={[store.xys16, store.xys16]}&gt;             &lt;Col span={24}&gt;               &lt;AlarmTrend cardBodyHeight={store.trendBodyBodyHeight}/&gt;             &lt;/Col&gt;             &lt;Col span={24}&gt;               &lt;CusTable tableHeight={store.configTableHeight}/&gt;             &lt;/Col&gt;           &lt;/Row&gt;         &lt;/Col&gt;       &lt;/Row&gt;     &lt;/Fragment&gt;   ) })</code></pre> <h5 id="indexjs">index.js</h5> <pre><code class="language-javascript">// src\pages\mdashboard\index.js  import React from 'react'; import { AuthDiv } from 'components'; import Dashboard from './Dashboard'; import styles from './index.module.less'  export default function () {   return (     &lt;section className={styles.tdashboardBox}&gt;       &lt;AuthDiv auth="testdashboard.testdashboard.view"&gt;         &lt;Dashboard /&gt;       &lt;/AuthDiv&gt;     &lt;/section&gt;   ) }</code></pre> <h5 id="tindexjs">tIndex.js</h5> <pre><code class="language-javascript">// src\pages\mdashboard\tIndex.js  // 无需权限即可访问  import React from 'react'; import Dashboard from './Dashboard'; import store from './store'; import styles from './index.module.less'  export default function () {   return (     &lt;section className={styles.tdashboardBox} style={{padding: `${store.padding}px 16px`, backgroundColor: 'rgb(125 164 222)', height: '100vh'}}&gt;       &lt;Dashboard/&gt;     &lt;/section&gt;   ) }</code></pre> <p>重启服务，效果如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/90ab6d0e13b0a2fb43c773f5b5a87598.jpg" alt="react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具"></p> <h3 id="bizcharts">bizcharts</h3> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://bizcharts.taobao.com/"  title="bizcharts" target="_blank" rel="nofollow">bizcharts</a> 是阿里的一个图表组件库。</p> <p><em>注</em>：spug 项目中使用的版本是<code>3.x</code>。参考文档时不要搞错。</p> <h4 id="api文档">API文档</h4> <p>上面我们安装的其中一个依赖包<code>bx-tooltip</code> 就来自这里。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/30cee81cc6f0fdd042fc82673690e171.jpg" alt="react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具"></p> <h4 id="实战">实战</h4> <p>实战其实就是一些 bizcharts 使用上的一些<code>答疑</code>。例如“内容显示不完整”，有可能就是因为 padding 的原因。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/2075d9dbbee962126831fb5b095c24a9.jpg" alt="react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具"></p> <h4 id="图表示例">图表示例</h4> <p>例如我们使用的<code>堆叠柱状图</code>的用法示例就参考这里：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/d7f3c5f3be0e4da48737c6a9a1c2504e.jpg" alt="react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具"></p> <p>点击进入示例，修改左边源码，右侧显示也会<strong>同步</strong>，非常方便我们在线研究和学习：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/995e03630124e17e6def4cc1e10266e0.jpg" alt="react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具"></p> <h3 id="高度自适应">高度自适应</h3> <p>bizcharts 有宽度自适应，但没有实现高度的自适应。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6040cf1c15d2cb3f7f14030667b0ff25.jpg" alt="react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具"></p> <p>笔者高度自适应的做法：将高度全部改为百分比。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/f995337b259483443fed1075d7993cdb.jpg" alt="react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具"></p> <p>具体做法如下：</p> <ol> <li>由于没有设计，故先用固定像素实现界面</li> <li>取得浏览器的窗口高度 window.innerHeight，笔者这里是 937</li> <li>将“标签盒子”、“卡片头部高度”、卡片 body 部分等全部改为百分比</li> </ol> <p>核心代码如下：</p> <pre><code class="language-javascript">// src\pages\mdashboard\store.js  const PADDING = 16 class Store {    @observable baseBoxHeight = 937 - PADDING    @observable padding = PADDING    // 仪表盘盒子高度   @observable boxHeight = window.innerHeight - this.padding * 2    // 饼图高度比例。根据之前的效果算出来的   @observable pieBoxRatio = 0.20    // 柱状图高度比例   @observable barBoxRatio = 0.23    // “My Dashboard 我的仪表盘” 高度   @computed get TitleHeight() {     const ratio = 80 / this.baseBoxHeight     return this.boxHeight * ratio   }   // 运行card高度   @computed get todayCardHeight() {     const ratio = 75 / this.baseBoxHeight     return this.boxHeight * ratio   }    // “饼图+描述列表+柱状图” body 高度   @computed get statisticBodyHeight() {     const ratio = 660 / this.baseBoxHeight     return this.boxHeight * ratio   }    // 居住趋势 body 的高度   @computed get trendBodyBodyHeight() {     const ratio = 385 / this.baseBoxHeight     return this.boxHeight * ratio   }    // xys16 得用 computed 才会联动。下面这种写法不会联动   @computed get xys16() {     return (16 / this.baseBoxHeight) * this.boxHeight   }    // 饼状图盒子高度   @computed get pieBoxHeight() {     return this.pieBoxRatio * this.boxHeight   }     // card 的 header 比例   @computed get cardTitleStyle() {     const cardTitleRatio = 57 / this.baseBoxHeight     return { display: 'flex', height: this.boxHeight * cardTitleRatio, alignItems: 'center', justifyContent: 'center' }   } }</code></pre> <h3 id="问题">问题</h3> <p>实现过程中出现如下<strong>两个</strong>问题：一个是折线图的 Y 轴<code>乱序</code>，一个是堆叠柱状图有一节<code>空白</code>。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/4e4c8a8952605e0ca99aa3101c649546.jpg" alt="react实战系列 —— 我的仪表盘（bizcharts、antd、moment）_在线工具"></p> <p>原因是<strong>值</strong>不小心弄成了<code>字符串</code>，改为<code>数字</code>类型即可。</p> <blockquote> <p>其他章节请看：</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/pengjiali/p/16108085.html"  title="react实战 系列" target="_blank" rel="nofollow">react实战 系列</a></p> </blockquote> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-80.htm">nginx进程管理</a></p>
                                        <p>下一个：<a href="/html/category/article-82.htm">C语言实现BMP格式转RGB格式、YUV格式</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-251.htm">SpringMVC拦截器path路径的坑</a></h4>
                <p>SpringMVC提供了很方便的拦截器供我们开发使用。在配置文件中通过&lt;mvc:mapping path="" /&gt;进行配置拦截的路径，但是这个path在配置的时候有一个小坑 我们都知道在</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-234.htm">Pandas 如何处理超大规模数据</a></h4>
                <p>作者&nbsp;|&nbsp;Sara&nbsp;A.&nbsp;Metwalli 译者&nbsp;|&nbsp;盖磊 策划&nbsp;|&nbsp;陈思  处理大规模数据集时常是棘手的事情，尤其在内</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-207.htm">C ++中的虚拟基类</a></h4>
                <p>在本教程中，我们将讨论一个程序，以了解C ++中的虚拟基类。 虚拟类主要在多重继承期间使用。为了避免将同一类的多个实例带到同一类中，这随后会引起歧义，因此使用虚拟类。 示例 #include&nbsp</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-254.htm">如何保证Redis缓存和数据库一致性？</a></h4>
                <p>首先我们先了解下缓存是什么？ 缓存就是把低速存储的结果，临时保存在高速存储的技术。 为什么使用redis进行缓存数据？ Redis嘛，就是一种运行速度很快，并发很强的跑在内存上的NoSql数据库，支持</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-231.htm">通俗易懂：窗口函数案例详解</a></h4>
                <p>什么是窗口函数 相信很多人都比较熟悉 SQL 聚合函数的语法，比如 count(), sum(), max()等， 窗口函数类似聚合函数，不同的是窗口函数不改变原有的行。 窗口函数是数据分析和数据开发</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-242.htm">PyQt5 按钮Button 添加事件(信号/槽)</a></h4>
                <p>本文基于PyQt5 按钮Buttons样式设计，针对按钮添加响应的点击事件触发。 效果截图:  PyQt 模型设计：  &nbsp;PyQt 设计器截图：  *.UI 源码 &lt;?xml vers</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-211.htm">谨慎使用Arrays.asList()</a></h4>
                <p>经过了两个月的【深入学习Java编程方法】课程学习，对Java的一些新特性有了更多的了解。依旧，坑洼遍地。 Java中的Collection类是一个很好用、很常用的类，省去了当年C语言手动链表的麻烦之</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-216.htm">Java String.equals()与==。</a></h4>
                <p>equals()方法将此字符串与指定的对象进行比较。当且仅当参数不为null并且是一个String对象，表示与此对象相同的字符序列时，结果为true。 示例 public&nbsp;class&nbs</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-240.htm">vue写一个简单的文件上传控件</a></h4>
                <p>这篇将介绍如何写一个简单的基于Vue+Element的文件上传控件。 控件将具有 1. 上传队列的列表，显示文件名称，大小等信息，可以显示上传进度实时刷新 2. 取消上传  &nbsp;使用Eleme</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-255.htm">解决antdv的table因数据量过大导致的卡顿问题</a></h4>
                <p>遇到的问题：antdv的table表格使用时因数据量过大，造成标签页切换卡顿的问题 解决办法：绑定滚动事件，页面只显示在可视区域内的数据，没在可视区域内的数据不予展示，dom元素的scrollHeig</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>