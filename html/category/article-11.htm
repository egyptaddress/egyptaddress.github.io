<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-11.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>SpringMVC的异步 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">SpringMVC的异步</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h3> <a id="SpringMVC_0" rel="nofollow"></a>SpringMVC的异步</h3> <blockquote> <p>最近接触了springMVC的异步模式，总结下来有两个优点：</p> <p>第一，当然是节约tomcat容器的线程 </p> <p>第二，可以利用异步超时，起到一定的超时降级保护 </p> <p>注意：在Controller中使用时，一定要注意做好接口的线程池隔离，让慢的接口使用固定数量的线程池， 否则从tomcat减少的线程会转移到应用里，导致拥塞，在部分接口下游异常的情况的情况下，会出现影响正常接口的服务. </p> </blockquote> <p>关于Spring MVC的异步</p> <blockquote> <p>同步接口在请求处理过程中一直处于阻塞状态，而异步接口可以启用后台线程去处理耗时任务。基本的使用场景：</p> <ul> <li> <p>高并发场景</p> </li> <li> <p>高耗时场景</p> </li> </ul> <p>SpringMVC提供的几种异步实现方案：</p> <ul> <li> <p>Callable 提供的带有返回值的并发操作</p> </li> <li> <p>WebAsyncTask 对Callable的封装处理</p> </li> <li> <p>@Async </p> </li> <li> <p>DeferredResult</p> </li> </ul> </blockquote> <p>Callable</p> <p>就是最简单的线程运行，然后获取返回值的模式。优点是简单，缺点是不能中途取消，只有结合FutureTask才能够提供一定的控制。但是，也不能提供异步通知的方式。</p> <pre><code>/**  * @author qiyu  * @date 2020-07-30 20:03  */ @Slf4j @RestController public class AsyncController {      @GetMapping("/test")     public String test() throws InterruptedException {         log.info("主线程开始=====&gt;"+ Thread.currentThread().getName());         Thread.sleep(30000);         log.info("主线程结束=====&gt;"+ Thread.currentThread().getName());         return "success";     }       @GetMapping("/testAsync")     public Callable&lt;String&gt; testAsync() throws InterruptedException {         log.info("主线程开始=====&gt;"+ Thread.currentThread().getName());         Callable&lt;String&gt; callable = () -&gt; {             log.info("异步线程开始=====&gt;" + Thread.currentThread().getName());             Thread.sleep(30000);             log.info("异步线程结束=====&gt;" + Thread.currentThread().getName());             return "success";         };         log.info("主线程结束=====&gt;"+ Thread.currentThread().getName());         return callable;     } } </code></pre> <p>WebAsyncTask 实例</p> <blockquote> <p><code>WebAsyncTask</code> : 在构造时写入<code>Callable</code>主要业务逻辑<br /><code>WebAsyncTask.onCompletion(Runnable)</code> ：在当前任务执行结束以后，无论是执行成功还是异常中止，onCompletion的回调最终都会被调用<br /><code>WebAsyncTask.onError(Callable&gt;)</code> ：当异步任务抛出异常的时候，<code>onError()</code>方法即会被调用<br /><code>WebAsyncTask.onTimeout(Callable&gt;)</code> ：当异步任务发生超时的时候，<code>onTimeout()</code>方法即会被调用</p> <p><code>WebAsyncTask</code>类是<code>Spring</code>提供的一步任务处理类。</p> <p><code>WebAsyncTask</code>是<code>Callable</code>的升级版</p> </blockquote> <pre><code>@RequestMapping("/async")     @ResponseBody     public WebAsyncTask&lt;String&gt; asyncTask(){         // 1000 为超时设置         WebAsyncTask&lt;String&gt; webAsyncTask = new WebAsyncTask&lt;String&gt;(1000,new Callable&lt;String&gt;(){             @Override             public String call() throws Exception {                 //业务逻辑处理                 Thread.sleep(5000);                 String message = "username:wangbinghua";                 return message;             }         });         webAsyncTask.onCompletion(new Runnable() {             @Override             public void run() {                 System.out.println("调用完成");             }         });         webAsyncTask.onTimeout(new Callable&lt;String&gt;() {             @Override             public String call() throws Exception {                 System.out.println("业务处理超时");                 return "&lt;h1&gt;Time Out&lt;/h1&gt;";             }         });          return webAsyncTask;     } </code></pre> <p>@Async实例</p> <blockquote> <p>含义</p> <blockquote> <p>1，在方法上使用该@Async注解，申明该方法是一个异步任务；</p> <p>2，在类上面使用该@Async注解，申明该类中的所有方法都是异步任务；</p> <p>3，使用此注解的方法的类对象，必须是spring管理下的bean对象；</p> <p>4，要想使用异步任务，需要在主类上开启异步配置，即，配置上@EnableAsync注解；</p> </blockquote> <p>用法</p> <blockquote> <p>在Spring中启用@Async：</p> <pre><code>    1，@Async注解在使用时，如果不指定线程池的名称，则使用Spring默认的线程池，Spring默认的线程池为**SimpleAsyncTaskExecutor**。      2，方法上一旦标记了这个@Async注解，当其它线程调用这个方法时，就会开启一个新的子线程去异步处理该业务逻辑。 </code></pre> </blockquote> <p>例子</p> <blockquote> <p>3.1，启动类中增加@EnableAsync</p> <p>以Spring boot 为例，启动类中增加@EnableAsync：</p> <pre><code>@EnableAsync@SpringBootApplicationpublic class ManageApplication {    //...} </code></pre> <p>3.2，方法上加@Async注解：</p> <pre><code>@Componentpublic class MyAsyncTask {     @Async    public void asyncCpsItemImportTask(Long platformId, String jsonList){        //...具体业务逻辑    }} </code></pre> <p>3.3，默认线程池的缺陷：</p> <pre><code>    上面的配置会启用默认的线程池/执行器，异步执行指定的方法。      Spring默认的线程池的默认配置：      默认核心线程数：8，        最大线程数：Integet.MAX_VALUE，    队列使用LinkedBlockingQueue，    容量是：Integet.MAX_VALUE，    空闲线程保留时间：60s，    线程池拒绝策略：AbortPolicy。      从最大线程数的配置上，相信你也看到问题了：**并发情况下，会无限创建线程。。。** </code></pre> <p>3.4，默认线程池–自定义配置参数：</p> <pre><code>    默认线程池的上述缺陷如何解决：      答案是，自定义配置参数就可以了。  spring:   task:     execution:       pool:         max-size: 6         core-size: 3         keep-alive: 3s         queue-capacity: 1000         thread-name-prefix: name </code></pre> </blockquote> <p>实现原理</p> <blockquote> <p>@Async的原理概括：</p> <p>@Async 的原理是通过 Spring AOP 动态代理 的方式来实现的。</p> <pre><code>    Spring容器启动初始化bean时，判断类中是否使用了@[Async](https://so.csdn.net/so/search?q=Async\&amp;spm=1001.2101.3001.7020 "Async")注解，如果使用了则为其创建切入点和切入点处理器，根据切入点创建代理，      在线程调用@Async注解标注的方法时，会调用代理，执行切入点处理器invoke方法，将方法的执行提交给线程池中的另外一个线程来处理，从而实现了异步执行。      所以，需要注意的一个错误用法是，如果a方法调用它同类中的标注@Async的b方法，是不会异步执行的，因为从a方法进入调用的都是该类对象本身，不会进入代理类。 </code></pre> <p>因此，相同类中的方法调用带@Async的方法是无法异步的，这种情况仍然是同步。</p> </blockquote> </blockquote> <p>DeferredResult实例</p> <blockquote> <p><code>DeferredResult</code>和<code>Callable</code>实现功能类型，都是异步返回，只不过<code>Callable</code>不能直接设置超时时间，还需要和<code>FutureTask</code>配合使用</p> </blockquote> <pre><code>@Controller public class DeferedResultController {       private ConcurrentLinkedDeque&lt;DeferredResult&lt;String&gt;&gt; deferredResults =             new ConcurrentLinkedDeque&lt;DeferredResult&lt;String&gt;&gt;();       @RequestMapping("/getResult")     @ResponseBody     public DeferredResult&lt;String&gt; getDeferredResultController(){          //设置 5秒就会超时         final DeferredResult&lt;String&gt; stringDeferredResult = new DeferredResult&lt;String&gt;(1000);                  //将请求加入到队列中         deferredResults.add(stringDeferredResult);          final String message = "{username:wangbinghua}";          ExecutorService executorService = Executors.newFixedThreadPool(10);         executorService.submit(new Runnable() {             @Override             public void run() {                            try {                     Thread.sleep(1010);                 } catch (InterruptedException e) {                     e.printStackTrace();                 }                  //业务处理                 System.out.println("业务处理");                 stringDeferredResult.setResult(message);             }         });           //setResult完毕之后，调用该方法         stringDeferredResult.onCompletion(new Runnable() {             @Override             public void run() {                 System.out.println("异步调用完成");                 //响应完毕之后，将请求从队列中去除掉                 deferredResults.remove(stringDeferredResult);             }         });          stringDeferredResult.onTimeout(new Runnable() {             @Override             public void run() {                 System.out.println("业务处理超时");                 stringDeferredResult.setResult("error:timeOut");             }         });         return stringDeferredResult;     }      //开启线程定时扫描队列，响应客户端     @Scheduled(fixedRate = 1000)     public void scheduleResult(){         System.out.println(new Date());         for(int i = 0;i &lt; deferredResults.size();i++){             DeferredResult&lt;String&gt; deferredResult = deferredResults.getFirst();             deferredResult.setResult("result:" + i);         }     } } </code></pre> <p>说明</p> <blockquote> <p>在Spring Mvc的控制层（springmvc层框架中）中，只要有一个用户请求便会实例化一个DeferedResult对象，然后返回该对象，然后就会释放TOMCAT的线程，从而完成客户端响应。只要DeferedResult对象不设置result响应的内容，则控制层（springMVC层）的容器主线程在响应客户端上就会发生阻塞。</p> <p>因为SpringMVC只会实例化一个Controller对象，无论有多少个用户请求，在堆上只有一个Controller对象，因此可以添加一个成员变量List，将这些用户请求的DeferedResult对象存放到List中，然后启动一个定时线程扫描list，从而依次执行setResult方法，响应客户端。</p> </blockquote></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-10.htm">Python中将字典转为成员变量详解</a></p>
                                        <p>下一个：<a href="/html/category/article-12.htm">PHP匿名类</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3730.htm">vue-v-model 常用修饰符</a></h4>
                <p>&lt;div id="app"&gt;     &lt;h1&gt;懒加载lazy&lt;/h1&gt;     &lt;h3&gt;不让输入框实时同步&lt;/h3&gt;     &lt;inp</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1342.htm">import axios from ‘axios‘失效的问题</a></h4>
                <p>在搭建vue开发项目的时候，引入axios组件的时候，设置的全局axios总是访问不了，先以为是axios版本冲突问题，后来发现是项目打开层级的问题。 进入下层目录重新打开，解决了！</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1341.htm">FreeRTOS进阶之队列示例完全解析_操作系统</a></h4>
                <p>目录  前言 1.队列创建函数 2.入队  2.1 xQueueGenericSend() 2.2 xQueueGenericSendFromISR ()  3.出队     前言 FreeRTOS提</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2240.htm">webpack 执行npm run 时，因为版本依赖报的那些错</a></h4>
                <p>环境介绍 webpack 4.34.0 webpack-dev-server 3.7.0 报错 Error: invalid "instanceof" keyword value Promise   </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3122.htm">什么是https和http（https和http的区别）_在线工具</a></h4>
                <p>前言 因为工作需要，需要用到大量的关于 HTTP 协议的知识，目前掌握的关于 HTTP 请求以及协议的知识都是零散的，打算针对知识盲区系统的学习一些，理清概念。 为什么会出现 HTTPS 因为 HTT</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-790.htm">详细分析虚拟DOM与diff算法</a></h4>
                <p>????虚拟DOM与diff算法 在vue、react等技术出现之前，每次修改DOM都需要通过遍历查询DOM树的方式，找到需要更新的DOM，然后修改样式或结构，资源损耗十分严重。而对于虚拟DOM来说，</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4293.htm">免费领养宠物的平台小狗有哪些（免费领养宠物的app有哪些）</a></h4>
                <p>摘要：       本篇文章给大家谈谈免费领养宠物的平台小狗有哪些，以及免费领养宠物的app有哪些对应的知识点，希望对各位有所帮助，不要忘了收藏本站喔。本文目录一览：1、家中有一只狗想找新主人上哪..</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2239.htm">【面试普通人VS高手系列】HashMap是怎么解决哈希冲突的？</a></h4>
                <p>常用数据结构基本上是面试必问的问题，比如HashMap、LinkList、ConcurrentHashMap等。 关于HashMap，有个学员私信了我一个面试题说： “HashMap是怎么解决哈希冲突</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1053.htm">Spring Cloud中使用Feign实现负载均衡详解</a></h4>
                <p>本文属于【夯实Spring Cloud】系列文章，该系列旨在用通俗易懂的语言，带大家了解和学习Spring Cloud技术，希望能给读者带来一些干货。系列目录如下：  【夯实Spring Cloud】</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1939.htm">Springboot整合Spring Retry实现重试机制</a></h4>
                <p>在项目开发过程中，经常会有这样的情况：第一次执行一个操作不成功，考虑到可能是网络原因造成，就多执行几次操作，直到得到想要的结果为止，这就是重试机制。 Springboot可以通过整合Spring Re</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">18</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>