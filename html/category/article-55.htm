<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-55.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Redis缓存中间件详解 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Redis缓存中间件详解</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<p>在上一篇中我们简单总结和介绍了Redis的几个方面</p> <blockquote> <p><strong>1.使用Redis背景</strong></p> </blockquote> <blockquote> <p><strong>2.Redis通信多路复用的基本原理</strong></p> </blockquote> <blockquote> <p><strong>3.Redis基本数据结构</strong></p> </blockquote> <blockquote> <p><strong>4.Redis持久化方式</strong></p> </blockquote> <p>这一篇我们使用简单的业务场景来介绍Redis的<code>分布式锁</code>和<code>集群</code></p> <h6 id="1分布式锁">1.分布式锁</h6> <p>首先我们应该知道什么是<code>分布式锁</code>，用来做什么的，解决了什么问题，我们应该怎么做？</p> <p>简单来说，分布式锁就是<code>锁住进程</code>的锁，通常我们分布式锁的使用场景在<code>多实例</code>的<code>集群</code>系统中，为了防止多个进程对资源的同时操作，而引发业务逻辑错误而诞生的，和我们的单个实例中的<code>lock</code>作用一样，一个是针对多实例<code>单进程</code>，一个是针对单实例<code>多线程</code>，具体在web中的表现在下面用实例的方式说明。</p> <h6 id="2单进程单实例多线程">2.单进程单实例多线程</h6> <p>1.例如现在我们部署了一个服务，他的功能是提供用户来抢红包的接口，我们在发红包时，总共设置了<code>10个红包</code>，我们将红包剩余数存入数据库，所以用一张表来存储红包的个数信息，每当有一个人来抢，我们就需要将红包的个数<s>减掉1</s>，主要的核心业务逻辑如下：</p> <ul> <li> <p>1.用户发起抢红包请求，服务器首先查询，红包剩余个数，如果为0，则直接返回，告诉用户红包抢完了</p> </li> <li> <p>2.如果红包个数不为0，则提示用户抢到了红包，然后扣减红包总数。</p> </li> </ul> <p><code>伪代码如下</code></p> <pre><code class="language-cs"> //查询剩余红包个数  int RedEnvelopeCount = getRedEnvelopes();  if (RedEnvelopeCount.Count == 0)  {      //返回用户红包抢完了 do something      return;  }  //通知用户抢到了 do something  //扣减红包个数  subtracRedEnvelopeCount();</code></pre> <p>2.此时如果同一时间多个并发请求进来，我们就会发生多个线程同时执行这段核心逻辑，导致业务错误</p> <ul> <li> <p>1.发生<code>超抢</code>,抢到的人大于实际个数，谁抢到的不算？</p> </li> <li> <p>2.发生<code>少抢</code>，几个人同时抢到同一个，算谁的？</p> </li> </ul> <p>我相信这2种情况，要是在真实的抢红包中，发生到谁头上，都不爽吧？按东哥的话说<code>我都气的想打人</code></p> <p>所以我们要着手解决，解决的思路就是，<code>核心业务的代码</code>同一时刻只能被一个线程执行，所以为了保证原子性，我们就需要使用到<code>锁</code>来锁住核心业务代码，在这里我们使用C#的<code>Lock</code>来实现</p> <pre><code class="language-cs">//静态全局唯一 private readonly static object _lock = new object(); using (_lock) {     int RedEnvelopeCount = getRedEnvelopes();     if (RedEnvelopeCount.Count == 0)     {         //返回用户红包抢完了         return;     }     //通知用户抢到了     //扣减红包个数     subtracRedEnvelopeCount(); }</code></pre> <h6 id="3单进程多实例多线程">3.单进程多实例多线程</h6> <p>上面我们列举并介绍了在单个实例中遇到并发产生的业务问题，我们通过锁的方式来暂时解决了问题，那么接下来我们继续思考，如果红包再多一点，抢的并发量起来了，单台服务器不能承载这么多并发，为了保证高可用，我们需要将红包服务，进行集群部署，利用nginx来负载均衡一下。</p> <p>1.在单个实例中我们为了保证业务执行的原子性，锁住了核心业务代码，保证<code>同一时刻</code>只有<code>一个线程</code>执行，但是现在多个实例来处理请求，假设现在2个用户提交抢红包的请求，在同一时刻被服务器负载均衡到2台不同的实例，那么此时就会遇到2个进程同时操作核心业务逻辑，<code>超抢</code>和<code>少抢</code>的事情又会发生，瞬间头又大了，那么针对这种业务情况，我们应该使用<code>分布式锁</code>来解决不同进程之间争夺资源的情况。</p> <p>2.接下来就是我们最后一个问题，如何实现分布式锁，其实对于集群系统实现分布式锁的方式有很多种，基于Zookeeper,Redis，包括数据库，等都可以实现，相较于Zookeeper和数据库 ,Redis单线程对于<code>实现分布式锁</code>拥有天生绝对的优势，而且它操作内存的方式就性能而言是非常优秀的，鉴于咱们这篇博客主要是跟Redis相关的，所以主要介绍使用Redis的方式，当然基于Redis中也存在不同的做法。</p> <p>3.实现锁的核心业务就是<code>加锁``释放锁</code>这2个功能，我们根据Redis内部<code>单线程</code>执行的原理自己来初步实现一个</p> <pre><code class="language-cs"> //设置key，加锁 防止死锁超时，设置60毫秒自动过期  bool result = database.StringSet("distributed-lock", "lock", expiry: TimeSpan.FromSeconds(60));  //失败说明锁已经被获取，直接返回  if (!result)  {      // "人有点多，再点点...";      return;  }  //获取剩余个数  int RedEnvelopeCount = getRedEnvelopes();  if (RedEnvelopeCount.Count == 0)  {      //返回用户红包抢完了      return;  }  //通知用户抢到了  //扣减红包个数  subtracRedEnvelopeCount();  //释放锁 database.KeyDelete("distributed-lock");</code></pre> <p>上面实现了最简单和最基础的分布式锁，但是还存在缺陷，仔细思考不难发现</p> <ul> <li> <p>1.执行业务的时间大于持有锁的最大时间，导致锁释放，业务还没执行完，乱了那也玩不了</p> </li> <li> <p>2.获取锁后执行到业务代码时抛异常了，锁没及时释放，而是等待自动释放，所以需要加异常处理</p> </li> </ul> <p>我们根据这2个缺陷来进一步完善,解决上面的问题，首先需要先保证执行业务的情况下，<code>谁加的锁由谁来释放</code>,然后<code>添加异常处理代码</code>用于处理业务异常能及时释放锁</p> <pre><code class="language-cs">//获取Guid作为当前请求唯一身份信息 string value = Guid.NewGuid().ToString("N");  //设置key，加锁，防止死锁超时，设置60毫秒自动过期 bool result = database.StringSet("distributed-lock", value, expiry: TimeSpan.FromSeconds(60));  //失败说明锁已经被获取，直接返回 if (!result) return;  // "人有点多，再点点...";  try {     int RedEnvelopeCount = getRedEnvelopes(); //获取剩余个数     if (RedEnvelopeCount.Count == 0)return; //返回用户红包抢完了      //通知用户抢到了     //扣减红包个数     subtracRedEnvelopeCount(); } finally {     //保证由当前请求释放，不会别的进来释放导致乱套     if (value.Equals(database.StringGet("distributed-lock")))     {         //释放锁         bool isDelete = database.KeyDelete("distributed-lock");     } }</code></pre> <p>4.最后我们使用<code>StackExchange.Redis</code>提供的方法来实现封装一个分布式锁，首先扩展IServiceCollection 将StackExchange.Redis 操作实例注入</p> <pre><code class="language-cs">//扩展连接客户端 public static class RedisServiceCollectionExtensions {     public static IServiceCollection AddRedisCache(this IServiceCollection services, string connectionString)     {         ConfigurationOptions configuration = ConfigurationOptions.Parse(connectionString);         ConnectionMultiplexer connectionMultiplexer = ConnectionMultiplexer.Connect(connectionString);         services.AddSingleton(connectionMultiplexer);         return services;     } } //注入容器 services.AddRedisCache("127.0.0.1:6379,password=xxx,connectTimeout=2000");</code></pre> <p>5.具体利用<code>LockTake</code>通过轮训询问的方式获取锁，通过<code>LockRelease</code>释放锁，在实现的源码中，加锁的原理就是设置一个string类型的key value以及过期时间</p> <pre><code class="language-cs">public class DistributedLock {     private readonly ConnectionMultiplexer _connectionMultiplexer;     private IDatabase db = null;     public DistributedLock(ConnectionMultiplexer connectionMultiplexer)     {        _connectionMultiplexer = connectionMultiplexer;        db = connectionMultiplexer.GetDatabase(0);     }      private void FetchLock()     {       while (true)        {           //当前锁的持有时间超过60毫秒就会被释放，这个时间应该设置比被锁住业务执行时间长           bool flag = db.LockTake("distributed-lock", Thread.CurrentThread.ManagedThreadId, TimeSpan.FromSeconds(60));           if (flag)  // 1、如果加锁成功直接退出，否则继续获取锁           {              break;           }            Thread.Sleep(10); // 防止死循环。通过等待10毫秒时间，释放资源        }    }    public void UnLock()   {      bool flag = db.LockRelease("distributed-lock", Thread.CurrentThread.ManagedThreadId);      _connectionMultiplexer.Close();   }  }</code></pre> <p>6.基于Redis实现的分布式锁，在Redis主从或者哨兵乃至集群中，会存在<code>锁丢失</code>的情况，具体就是当请求给Master节点写入锁后，Master节点宕机，此时主从还没来得及同步，但此时已经选择了一个Slaver为主节点，而最开始的设置的锁不见了，针对这种情况比较极端，可以利用<code>Zookeeper</code>来实现分布式锁作为解决方案，因为在数据一致性上<code>Zookeeper</code>是优于<code>Redis</code>的，当然<code>Redis</code>的性能也是较<code>Zookeeper</code>更为突出一些，用<code>CAP理论</code>来定义的话，Zookeeper趋向于<code>CP</code>更关注一致性,Redis趋向于<code>AP</code>更关注可用性.</p> <h5 id="4redis容灾高可用">4.Redis容灾高可用</h5> <p>就服务实例而言，单个服务实例<code>保证容灾</code>和<code>高可用</code>基本很难，因为一个实例随时都有宕机的风险，所以引入了<code>集群</code>的概念，通过多个服务实例，来共同保证系统提供稳定的服务，其实在Redis中也一样，也有保证容灾和高可用的方案，在一定程度上，实现的方案在大的策略层面思路都差不多，只是具体实现的方式不同罢了，至于最终选择保证<code>数据信息层面的高可用</code>，还是性能资源层面的高可用，需要用户去根据自己业务来分析，选择使用哪一种方案。</p> <p>在Redis中，有3种方式来实现高可用的方案，分别是</p> <ul> <li> <p>1.主从模式 （Master Slaver）</p> </li> <li> <p>2.哨兵模式 (Sentinel)</p> </li> <li> <p>3.数据分片 (Cluster)</p> </li> </ul> <h6 id="1主从模式和哨兵">1.主从模式和哨兵</h6> <p><code>主从模式</code>是Redis提供<code>高可用</code>的第一种方案，理解起来也比较简单，一个主节点多个从节点，主节点负责写入，然后会把数据同步到从节点，从节点负责读取，但是会存在不可避免的缺陷</p> <ul> <li> <p>1.如果宕机，它不具备自动容错和恢复功能，需要手动切换从节点为主节点。</p> </li> <li> <p>2.宕机导致数据未及时同步，降低可用性</p> </li> <li> <p>3.所有节点数据一样，内存浪费，并且在线扩容复杂，伸缩性差，海量数据存储无法解决。</p> </li> <li> <p>4.高并发主节点写入数据压力极大。</p> </li> </ul> <p><code>哨兵模式</code>是Redis提供的第二种方案，可以说是第一种主从方案的完善版本，因为它在主从的基础上，增加了<code>监控</code>功能，主节点宕机后提供<code>哨兵</code>自动选举master并将其他的slave指向新的master，哨兵是一个独立运行的进程，它的实现原理是哨兵进程向所有的redis机器发送心跳消息，从而监控运行状况,同样由于是基于主从而诞生，那么也存在主从中的一些缺陷。</p> <h6 id="2集群分片模式">2.集群分片模式</h6> <p>1.<code>集群和分片基本概念</code></p> <p>前面2种方案归根结底，就是使用主从复制和读写分离的方式保证高可用，但是内存占用，主节点压力过大，相较于Redis提供的第三种<code>集群和数据分片</code>的方案，存在的缺陷也非常明显,下面我们介绍<code>集群和数据分片</code>。</p> <blockquote> <p>1.<code>集群和数据分片</code>简单理解就是将主从复制的核心策略，做了集群来横向扩展，包含多个主从节点，采用去中心化思想，数据按照 slot 存储分布在多个节点，并且节点间数据共享，可动态调整数据分布，</p> </blockquote> <blockquote> <p>2.在集群中每一个节点都是<code>互相通信</code>采用<strong><code>Gossip</code></strong> 病毒协议，在一个节点写入的数据，其他任何节点都会查询到。</p> </blockquote> <p>2.<code>集群内部数据存取原理</code></p> <blockquote> <p>1.<code>Slot</code> 槽，存储数据的容器,总共16384个Slot ,采用平均分配，并且只有<code>主节点</code>才能被分配</p> </blockquote> <blockquote> <p>2.<code>Hash</code>算法用于对数据进行计算，得到一个Hash值，然后对16384<code>取模</code>选择存到哪个区间的<code>Slot</code></p> </blockquote> <p>3.<code>Windows下集群搭建</code></p> <p>1.我们部署集群使用<code>redis-trib.rb</code>，首先<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://pan.baidu.com/s/1_5N8V1ht4MEv5dtEHTNX6w"  target="_blank" rel="nofollow">下载环境 提取码1234</a></p> <p>2.安装需要用到Ruby语言运行环境，然后进入安装目录<code>Ruby22-x64</code>中，通过<code>gem</code>命令安装文件</p> <pre><code class="language-ruby">gem install –-local youFloder\redis-3.2.2.gem</code></pre> <p>3.准备Redis服务实例，此处准备6个实例，并配置Redis配置文件，然后启动<code>每一个</code>服务实例</p> <pre><code class="language-cmd">redis-server redis-6380.conf  redis-server redis-6381.conf  .... ....</code></pre> <pre><code class="language-conf">port 6380 #节点端口 bind 127.0.0.1   #节点主机ip appendonly yes 开启aof appendfilename "appendonly.6380.aof"    cluster-enabled yes                                     cluster-config-file nodes.6380.conf cluster-node-timeout 15000 cluster-slave-validity-factor 10 cluster-migration-barrier 1 cluster-require-full-coverage yes</code></pre> <p>3.进入到<code>redis-trib.rb</code>目录打开命令窗口，进行搭建集群</p> <pre><code class="language-cmd">ruby redis-trib.rb create -–replicas 1 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384 127.0.0.1:6385</code></pre> <p>4.检查集群状态,出现图片中的提示代表搭建成功</p> <pre><code class="language-cmd">ruby redis-trib.rb check 127.0.0.1:6380</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/405b64a5b57c30e520797ec372cfb065.jpg" alt="Redis缓存中间件详解"></p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-54.htm">java sm3国密算法加密、验证工具类</a></p>
                                        <p>下一个：<a href="/html/category/article-56.htm">创建型设计模式: 单例模式(Singleton Pattern)</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-212.htm">从查询重写角度理解elasticsearch的高亮原理</a></h4>
                <p>一、高亮的一些问题 elasticsearch提供了三种高亮方式，前面我们已经简单的了解了elasticsearch的高亮原理; 高亮处理跟实际使用查询类型有十分紧密的关系，其中主要的一点就是muti</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-241.htm">git 回滚到之前某一commit</a></h4>
                <p>git log git reset –hard 8ff24a6803173208f3e606e32dfcf82db9ac84d8</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-255.htm">解决antdv的table因数据量过大导致的卡顿问题</a></h4>
                <p>遇到的问题：antdv的table表格使用时因数据量过大，造成标签页切换卡顿的问题 解决办法：绑定滚动事件，页面只显示在可视区域内的数据，没在可视区域内的数据不予展示，dom元素的scrollHeig</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-233.htm">使用Python实现KNN算法解决简单分类问题</a></h4>
                <p>使用Python实现KNN算法解决简单分类问题 KNN分类 KNN算法属于监督学习算法，它可以解决分类问题，也可以解决回归问题。对于一组带标签的数据，当我们使用KNN算法进行分类时，有两种分类方式。K</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-248.htm">vue父组件向子组件传值与传递方法</a></h4>
                <p>vue父组件向子组件传值与传递方法 学习笔记 1、父组件向子组件传值（props）  在子组件中，默认是无法访问到父组件中的data上的数据和methods中的方法 父组件可以在引用子组件的时候，通过</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-244.htm">Spring按业务模块输出日志到不同的文件_在线工具</a></h4>
                <p>一、背景 在我们开发的过程中，可能存在如下情况： 1、有些时候我们需要调用第三方的接口，一般情况下，调用接口，我们都会记录请求的入参和响应的。如果我们自己系统的日志和第三方的日志混合到一个日志文件中，</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-258.htm">vue实现自定义全局右键菜单_vue.js</a></h4>
                <p>前段时间公司在做一个webIDE项目，其中有对文件树的各种操作，主要通过右键菜单实现，今天就来记录一下怎么在vue项目中实现全局的自定义右键菜单。效果如图所示：  注意： 需要在项目中找到页面整体布局</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-214.htm">JavaScript找到两个数组之间的差异方法详解</a></h4>
                <p>我们有两个这样的数字数组- const&nbsp;arr1&nbsp;=&nbsp;[12,&nbsp;54,&nbsp;2,&nbsp;4,&nbsp;6,&nbsp;34,&nbsp;3]; co</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-204.htm">Kafka启动报错处理：/opt/module/kafka/bin/kafka-run-class.sh: 第 258 行:exec: java: 未找到</a></h4>
                <p>今天在学习Kafka的时候，写了个脚本，用于集群中kafka的群起。发现启动不了。???? 去掉-daemon参数后，继续启动，看到了它报的错误(日志中也有显示)。找不到java？？？ 看了相关资料后</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-228.htm">Android jetpack room+ViewModel+liveData 数据自动更新</a></h4>
                <p>Android jetpack room的使用_安果移不动的博客-CSDN博客 接上篇博客 我们用google推荐的这种方式  &nbsp; 修改： StudentDao package com.an</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>