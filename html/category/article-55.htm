<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-55.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>java springMVC之@RequestMapping注解 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">java springMVC之@RequestMapping注解</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="htmledit_views"> <p id="main-toc"><strong>目录</strong></p> <p id="main-toc-toc" style="margin-left:0px;"><a href="#main-toc" rel="nofollow">@RequestMapping注解</a></p> <p id="%E6%B3%A8%E8%A7%A3%E6%A0%87%E8%AF%86%E4%BD%8D%E7%BD%AE-toc" style="margin-left:40px;"><a href="#%E6%B3%A8%E8%A7%A3%E6%A0%87%E8%AF%86%E4%BD%8D%E7%BD%AE" rel="nofollow">注解标识位置</a></p> <p id="value%E5%B1%9E%E6%80%A7-toc" style="margin-left:40px;"><a href="#value%E5%B1%9E%E6%80%A7" rel="nofollow">value属性</a></p> <p id="method%E5%B1%9E%E6%80%A7-toc" style="margin-left:40px;"><a href="#method%E5%B1%9E%E6%80%A7" rel="nofollow">method属性</a></p> <p id="params%E5%B1%9E%E6%80%A7-toc" style="margin-left:40px;"><a href="#params%E5%B1%9E%E6%80%A7" rel="nofollow">params属性</a></p> <p id="headers%E5%B1%9E%E6%80%A7-toc" style="margin-left:40px;"><a href="#headers%E5%B1%9E%E6%80%A7" rel="nofollow">headers属性</a></p> <p id="springMVC%E6%94%AF%E6%8C%81ant%E9%A3%8E%E6%A0%BC%E8%B7%AF%E5%BE%84-toc" style="margin-left:40px;"><a href="#springMVC%E6%94%AF%E6%8C%81ant%E9%A3%8E%E6%A0%BC%E8%B7%AF%E5%BE%84" rel="nofollow">ant风格路径</a></p> <p id="%E8%B7%AF%E5%BE%84%E5%8D%A0%E4%BD%8D%E7%AC%A6-toc" style="margin-left:40px;"><a href="#%E8%B7%AF%E5%BE%84%E5%8D%A0%E4%BD%8D%E7%AC%A6" rel="nofollow">路径占位符</a></p> <hr id="hr-toc"/> <h1>@RequestMapping注解</h1> <p><strong>@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。 SpringMVC接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</strong></p> <h2 id="%E6%B3%A8%E8%A7%A3%E6%A0%87%E8%AF%86%E4%BD%8D%E7%BD%AE"><strong>注解标识位置</strong></h2> <p><strong>（1）</strong>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息。</p> <p><strong>（2）</strong>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息。</p> <p><strong>标识在方法上时</strong></p> <pre><code>@Controller //@RequestMapping(value = "/web") public class RequestMappingController {      @RequestMapping(value = "/testRequestMapping")     public String testRequestMapping() {         //返回的字符串是去掉视图前缀和后缀的文件名         //比如说在某一路径下的test.html文件，只需要返回test即可跳转到该页面         //在springMVC.xml配置文件中设置视图前后缀         return "test";     }  }</code></pre> <p>跳转路径设置如下（这里我们使用了thymeleaf来管理路径）</p> <pre><code>&lt;a th:href="@{/testRequestMapping}"&gt;测试RequestMapping注解&lt;/a&gt;&lt;br&gt;</code></pre> <p>跳转结果</p> <p><img fetchpriority="high" decoding="async" alt="" height="123" src="http://img.555519.xyz/uploads3/20220901/9186ce7e0704ce3063af67103ad5486b.jpg"></p> <p>可以看到地址栏和我们设置的value属性一样。</p> <p><strong>&nbsp;标识在类上时</strong></p> <p>如果我们在类上设置一个RequestMapping，及取消上面代码中RequestMapping的注释，那么跳转的地址更改如下</p> <pre><code>&lt;a th:href="@{/web/testRequestMapping}"&gt;测试RequestMapping注解&lt;/a&gt;&lt;br&gt;</code></pre> <p><strong>在类上标记了之后，相当于这一个类中所有的路径前面都加上了类上所标记的路径。</strong></p> <h2 id="value%E5%B1%9E%E6%80%A7">value属性</h2> <p><strong>value属性通过请求的请求地址匹配请求映射</strong>，value属性可以是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求。</p> <pre><code>@RequestMapping(value = {"/testRequestMapping", "/test"})     public String test() {         return "test";     }</code></pre> <p><strong>value的值为多个时，表示从这几个路径都可以访问到这一个页面。</strong></p> <h2 id="method%E5%B1%9E%E6%80%A7"><strong>method属性</strong></h2> <p><strong>method属性通过请求的请求方式（get或post）匹配请求映射</strong>，表示该请求能匹配的请求方式，如果不设置method属性，就表示不以请求方式为访问的限制条件。当满足value属性设置的路径但不满足method设置的请求方式时就会报错。</p> <pre><code>@RequestMapping(value = {"/testRequestMapping", "/test"},         method = {RequestMethod.GET, RequestMethod.POST} ) public String test() {     return "test"; }</code></pre> <h2 id="params%E5%B1%9E%E6%80%A7">params属性</h2> <p><strong>params属性通过请求参数匹配请求映射</strong>，@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数。</p> <p>（1）"param"：要求请求映射所匹配的请求必须携带param请求参数。</p> <p>（2）"!param"：要求请求映射所匹配的请求必须不能携带param请求参数。</p> <p>（3）"param=value"：要求请求映射所匹配的请求必须携带param请求参数且param=value。</p> <p>（4）"param!=value"：要求请求映射所匹配的请求必须携带param请求参数但是param!=value。</p> <p>例如我们在访问路径上面设置传递过去的访问参数</p> <pre><code>&lt;a th:href="@{/web/testRequestMapping(username='HLJ',password='654321')}"&gt;测试RequestMapping注解false&lt;/a&gt;&lt;br&gt; &lt;a th:href="@{/web/testRequestMapping(username='JLH',password='123456')}"&gt;测试RequestMapping注解true&lt;/a&gt;&lt;br&gt;</code></pre> <p>接收方法如下</p> <pre><code>@RequestMapping(value = {"/testRequestMapping", "/test"},         method = {RequestMethod.GET, RequestMethod.POST},         params = {"username=JLH","password!=654321"} ) public String test() {     return "test"; }</code></pre> <p><strong>这样就表示当username和password都满足条件的时候才会跳转成功。</strong></p> <h2 id="headers%E5%B1%9E%E6%80%A7">headers属性</h2> <p><strong>headers属性通过请求的请求头信息匹配请求映射，</strong>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系。</p> <p>"header"：要求请求映射所匹配的请求必须携带header请求头信息。</p> <p>"!header"：要求请求映射所匹配的请求必须不能携带header请求头信息。</p> <p>"header=value"：要求请求映射所匹配的请求必须携带header请求头信息且header=value。</p> <p>"header!=value"：要求请求映射所匹配的请求必须携带header请求头信息且header!=value。</p> <p>访问地址</p> <pre><code>&lt;a th:href="@{/testParamsAndHeaders}"&gt;测试headers&lt;/a&gt;&lt;br&gt;</code></pre> <p>接收设置</p> <pre><code>@RequestMapping(value = "/testParamsAndHeaders",             headers = {"Host=localhost:8080","Accept-Language=zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6"})     public String testParamsAndHeaders() {         return "test";     }</code></pre> <p>&nbsp;通过查看网页的请求标头可以发现如下信息</p> <p><img decoding="async" alt="" height="164" src="http://img.555519.xyz/uploads3/20220901/6d7ec4245749146ac36f787faa64e3b8.jpg"></p> <p><strong>&nbsp;这里我们通过Host和Accept-Language来设置headers属性进行测试，只要标头的信息和headers中的匹配，就能够访问成功。</strong></p> <h2 id="springMVC%E6%94%AF%E6%8C%81ant%E9%A3%8E%E6%A0%BC%E8%B7%AF%E5%BE%84"><strong>ant风格路径</strong></h2> <p>？：表示任意的单个字符。</p> <p>*：表示任意的0个或多个字符。</p> <p>**：表示任意的一层或多层目录，<strong>在使用**时，只能使用/**/xxx的方式</strong>。</p> <p id="%E6%8E%A5%E6%94%B6%E8%B7%AF%E5%BE%84%E8%AE%BE%E7%BD%AE">接收路径设置</p> <pre><code>@RequestMapping(value = "/a?a/testAnt") public String testAnt1() {     return "test"; }  @RequestMapping(value = "/a*a/testAnt") public String testAnt2() {     return "test"; }  @RequestMapping(value = "/**/testAnt") public String testAnt3() {     return "test"; }</code></pre> <p>访问路径设置</p> <pre><code>&lt;a th:href="@{/a1a/testAnt}"&gt;使用?(一个问号匹配单个字符)&lt;/a&gt;&lt;br&gt; &lt;a th:href="@{/a1123123123a/testAnt}"&gt;使用*(开头和结尾的字符匹配即可)&lt;/a&gt;&lt;br&gt; &lt;a th:href="@{/tqwe/testAnt}"&gt;使用**(多目录都可以，只要最后是testAnt)&lt;/a&gt;&lt;br&gt;</code></pre> <p>因为springMVC支持ant风格的路径，所以上面的路径都能被接收到。</p> <h2 id="%E8%B7%AF%E5%BE%84%E5%8D%A0%E4%BD%8D%E7%AC%A6">路径占位符</h2> <p>当我们要把某些数据通过路径的方式传输到服务器时，原始的方式是/路径?username=123&amp;password=321，而现在可以改写成：/路径/username=123/password=321，并且可以通过在RequestMapping注解的value属性中设置占位符获取传输的数据，通过@PathVariable赋值给形参。</p> <p>访问路径设置</p> <pre><code>&lt;a th:href="@{/testPath/JLH/123456}"&gt;测试占位符&lt;/a&gt;&lt;br&gt;</code></pre> <p>设置占位符</p> <pre><code>@RequestMapping(value = "/testPath/{username}/{password}") public String testPath(@PathVariable("id") Integer id, @PathVariable("username") String username) {     System.out.println("id:" + id);     System.out.println("username:" + username);     return "test"; }</code></pre> <p>这样就可以很容易的获取到通过路径传递过来的参数。</p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-54.htm">删除PicGo的右键菜单的方法</a></p>
                                        <p>下一个：<a href="/html/category/article-56.htm">Vue中this.$router.replace和this.$router.push的区别</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-233.htm">echarts根据数据动态生成不同条数的折线图</a></h4>
                <p>一、功能需求背景 1、后台可自定义折线图的折线名称、数据、数量（几条） 2、满足不同折线图之间随意切换 3、折线图可鼠标拖动缩放和滚动条收缩查看 4、同一页面涉及多个echarts 二、功能涉及ech</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-250.htm">配置tomcat，修改对项目的访问路径</a></h4>
                <p>在Idea中对项目访问路径的配置题  &nbsp;当将wai包直接部署到tomcat中时，如何修改对项目的访问路径？ 两种方案： 1、首先将tomcat的目录下的webapps/ROOT目录下的所有内</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1331.htm">为什么我建议需要定期重建数据量大但是性能关键的表_在线工具</a></h4>
                <p>个人创作公约：本人声明创作的所有文章皆为自己原创，如果有参考任何文章的地方，会标注出来，如果有疏漏，欢迎大家批判。如果大家发现网上有抄袭本文章的，欢迎举报，并且积极向这个github 仓库 提交 is</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-252.htm">[js] 回调函数 回调地狱 Promise async/await</a></h4>
                <p>1. 回调函数 callback   一种封装代码的手段   什么是 callback , 概念 =&gt; 把 函数A 当做 实参 传递到 函数B 内部 =&gt; 在 函数B 内部以 形参 的方式</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-242.htm">KestrelServer网络连接的创建详解</a></h4>
                <p>《注册监听终结点（Endpoint）》已经详细讲述了如何使用KestrelServer，现在我们来简单聊聊这种处理器的总体设计和实现原理。当KestrelServer启动的时候，注册的每个终结点将转换</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-230.htm">Vuex的各个模块封装</a></h4>
                <p>一、各个模块的作用：   state 用来数据共享数据存储  mutation 用来注册改变数据状态（同步）  getters 用来对共享数据进行过滤并计数操作  action 解决异步改变共享数据（</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-220.htm">SpringCloud&#8212;-Feign隔离和降级</a></h4>
                <p>限流是一种预防措施，虽然限流可以尽量避免因高并发而引起的服务故障，但服务还会因为其它原因而故障。 而要将这些故障控制在一定范围，避免雪崩，就要靠线程隔离（舱壁模式）和熔断降级手段了。线程隔离：调用者在</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-256.htm">feign post 参数对象不加@RequestBody的用法</a></h4>
                <p>最近在做小程序调支付服务接口的一个功能，这个feign接口传参真的太费事。 代码我就改造了下，不直接上真实代码。 比如小程序调支付服务的订单查询接口，支付服务那边的controller的订单查询方法是</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-790.htm">详细分析虚拟DOM与diff算法</a></h4>
                <p>????虚拟DOM与diff算法 在vue、react等技术出现之前，每次修改DOM都需要通过遍历查询DOM树的方式，找到需要更新的DOM，然后修改样式或结构，资源损耗十分严重。而对于虚拟DOM来说，</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-235.htm">lombok和JPA的死递归</a></h4>
                <p>这是一个Bug JPA我觉得是一个封装的很棒的框架，至于说很臃肿这个事，我觉得在需求需要很多复杂查询的时候，不适合用JPA。因为它的封装太棒了，以致于增强了表和实体类之间的耦合。不过在一些简单查询的部</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">34</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>