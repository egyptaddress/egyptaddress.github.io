<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-186.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>从源码角度分析创建线程池究竟有哪些方式 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">从源码角度分析创建线程池究竟有哪些方式</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<p><strong>大家好，我是冰河~~</strong></p> <p>在Java的高并发领域，线程池一直是一个绕不开的话题。有些童鞋一直在使用线程池，但是，对于如何创建线程池仅仅停留在使用Executors工具类的方式，那么，创建线程池究竟存在哪几种方式呢？就让我们一起从创建线程池的源码来深入分析究竟有哪些方式可以创建线程池。</p> <h3 id="使用executors工具类创建线程池">使用Executors工具类创建线程池</h3> <p>在创建线程池时，初学者用的最多的就是Executors 这个工具类，而使用这个工具类创建线程池时非常简单的，不需要关注太多的线程池细节，只需要传入必要的参数即可。Executors 工具类提供了几种创建线程池的方法，如下所示。</p> <ul> <li>Executors.newCachedThreadPool：创建一个可缓存的线程池，如果线程池的大小超过了需要，可以灵活回收空闲线程，如果没有可回收线程，则新建线程</li> <li>Executors.newFixedThreadPool：创建一个定长的线程池，可以控制线程的最大并发数，超出的线程会在队列中等待</li> <li>Executors.newScheduledThreadPool：创建一个定长的线程池，支持定时、周期性的任务执行</li> <li>Executors.newSingleThreadExecutor: 创建一个单线程化的线程池，使用一个唯一的工作线程执行任务，保证所有任务按照指定顺序（先入先出或者优先级）执行</li> <li>Executors.newSingleThreadScheduledExecutor:创建一个单线程化的线程池，支持定时、周期性的任务执行</li> <li>Executors.newWorkStealingPool：创建一个具有并行级别的work-stealing线程池</li> </ul> <p>其中，Executors.newWorkStealingPool方法是Java 8中新增的创建线程池的方法，它能够为线程池设置并行级别，具有更高的并发度和性能。除了此方法外，其他创建线程池的方法本质上调用的是ThreadPoolExecutor类的构造方法。</p> <p>例如，我们可以使用如下代码创建线程池。</p> <pre><code class="language-java">Executors.newWorkStealingPool(); Executors.newCachedThreadPool(); Executors.newScheduledThreadPool(3);</code></pre> <h3 id="使用threadpoolexecutor类创建线程池">使用ThreadPoolExecutor类创建线程池</h3> <p>从代码结构上看ThreadPoolExecutor类继承自AbstractExecutorService，也就是说，ThreadPoolExecutor类具有AbstractExecutorService类的全部功能。</p> <p>既然Executors工具类中创建线程池大部分调用的都是ThreadPoolExecutor类的构造方法，所以，我们也可以直接调用ThreadPoolExecutor类的构造方法来创建线程池，而不再使用Executors工具类。接下来，我们一起看下ThreadPoolExecutor类的构造方法。</p> <p>ThreadPoolExecutor类中的所有构造方法如下所示。</p> <pre><code class="language-java">public ThreadPoolExecutor(int corePoolSize, 			      int maximumPoolSize, 			      long keepAliveTime, 			      TimeUnit unit, 			     BlockingQueue&lt;Runnable&gt; workQueue) { 	this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, 		 Executors.defaultThreadFactory(), defaultHandler); }  public ThreadPoolExecutor(int corePoolSize, 				int maximumPoolSize, 				long keepAliveTime, 				TimeUnit unit, 				BlockingQueue&lt;Runnable&gt; workQueue, 			        ThreadFactory threadFactory) { this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, 	 threadFactory, defaultHandler); }  public ThreadPoolExecutor(int corePoolSize, 				int maximumPoolSize, 				long keepAliveTime, 			        TimeUnit unit, 				BlockingQueue&lt;Runnable&gt; workQueue, 				RejectedExecutionHandler handler) { this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, 	 Executors.defaultThreadFactory(), handler); }  public ThreadPoolExecutor(int corePoolSize, 				int maximumPoolSize, 				long keepAliveTime, 				TimeUnit unit, 			        BlockingQueue&lt;Runnable&gt; workQueue, 				ThreadFactory threadFactory, 				RejectedExecutionHandler handler) { 	if (corePoolSize &lt; 0 || 		maximumPoolSize &lt;= 0 || 		maximumPoolSize &lt; corePoolSize || 		keepAliveTime &lt; 0) 		throw new IllegalArgumentException(); 	if (workQueue == null || threadFactory == null || handler == null) 		throw new NullPointerException(); 	this.acc = System.getSecurityManager() == null ? 			null : 			AccessController.getContext(); 	this.corePoolSize = corePoolSize; 	this.maximumPoolSize = maximumPoolSize; 	this.workQueue = workQueue; 	this.keepAliveTime = unit.toNanos(keepAliveTime); 	this.threadFactory = threadFactory; 	this.handler = handler; }</code></pre> <p>由ThreadPoolExecutor类的构造方法的源代码可知，创建线程池最终调用的构造方法如下。</p> <pre><code class="language-java">public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, 			  long keepAliveTime, TimeUnit unit, 			  BlockingQueue&lt;Runnable&gt; workQueue, 			  ThreadFactory threadFactory, 		          RejectedExecutionHandler handler) { 	if (corePoolSize &lt; 0 || 		maximumPoolSize &lt;= 0 || 		maximumPoolSize &lt; corePoolSize || 		keepAliveTime &lt; 0) 		throw new IllegalArgumentException(); 	if (workQueue == null || threadFactory == null || handler == null) 		throw new NullPointerException(); 	this.acc = System.getSecurityManager() == null ? 			null : 			AccessController.getContext(); 	this.corePoolSize = corePoolSize; 	this.maximumPoolSize = maximumPoolSize; 	this.workQueue = workQueue; 	this.keepAliveTime = unit.toNanos(keepAliveTime); 	this.threadFactory = threadFactory; 	this.handler = handler; }</code></pre> <p>关于此构造方法中各参数的含义和作用，各位可以移步《<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/l1028386804/article/details/104409796"  target="_blank" rel="nofollow">高并发之——不得不说的线程池与ThreadPoolExecutor类浅析</a>》进行查阅。</p> <p>大家可以自行调用ThreadPoolExecutor类的构造方法来创建线程池。例如，我们可以使用如下形式创建线程池。</p> <pre><code class="language-java">new ThreadPoolExecutor(0, Integer.MAX_VALUE,                        60L, TimeUnit.SECONDS,                        new SynchronousQueue&lt;Runnable&gt;());</code></pre> <h3 id="使用forkjoinpool类创建线程池">使用ForkJoinPool类创建线程池</h3> <p>在Java8的Executors工具类中，新增了如下创建线程池的方式。</p> <pre><code class="language-java">public static ExecutorService newWorkStealingPool(int parallelism) { 	return new ForkJoinPool 		(parallelism, 		 ForkJoinPool.defaultForkJoinWorkerThreadFactory, 		 null, true); }  public static ExecutorService newWorkStealingPool() { 	return new ForkJoinPool 		(Runtime.getRuntime().availableProcessors(), 		 ForkJoinPool.defaultForkJoinWorkerThreadFactory, 		 null, true); }</code></pre> <p>从源代码可以可以，本质上调用的是ForkJoinPool类的构造方法类创建线程池，而从代码结构上来看ForkJoinPool类继承自AbstractExecutorService抽象类。接下来，我们看下ForkJoinPool类的构造方法。</p> <pre><code class="language-java">public ForkJoinPool() { 	this(Math.min(MAX_CAP, Runtime.getRuntime().availableProcessors()), 		 defaultForkJoinWorkerThreadFactory, null, false); }  public ForkJoinPool(int parallelism) { 	this(parallelism, defaultForkJoinWorkerThreadFactory, null, false); }  public ForkJoinPool(int parallelism, 				ForkJoinWorkerThreadFactory factory, 				UncaughtExceptionHandler handler, 				boolean asyncMode) { 	this(checkParallelism(parallelism), 		 checkFactory(factory), 		 handler, 		 asyncMode ? FIFO_QUEUE : LIFO_QUEUE, 		 "ForkJoinPool-" + nextPoolId() + "-worker-"); 	checkPermission(); }  private ForkJoinPool(int parallelism, 				 ForkJoinWorkerThreadFactory factory, 				 UncaughtExceptionHandler handler, 				 int mode, 				 String workerNamePrefix) { 	this.workerNamePrefix = workerNamePrefix; 	this.factory = factory; 	this.ueh = handler; 	this.config = (parallelism &amp; SMASK) | mode; 	long np = (long)(-parallelism); // offset ctl counts 	this.ctl = ((np &lt;&lt; AC_SHIFT) &amp; AC_MASK) | ((np &lt;&lt; TC_SHIFT) &amp; TC_MASK); }</code></pre> <p>通过查看源代码得知，ForkJoinPool的构造方法，最终调用的是如下私有构造方法。</p> <pre><code class="language-java">private ForkJoinPool(int parallelism, 				 ForkJoinWorkerThreadFactory factory, 				 UncaughtExceptionHandler handler, 				 int mode, 				 String workerNamePrefix) { 	this.workerNamePrefix = workerNamePrefix; 	this.factory = factory; 	this.ueh = handler; 	this.config = (parallelism &amp; SMASK) | mode; 	long np = (long)(-parallelism); // offset ctl counts 	this.ctl = ((np &lt;&lt; AC_SHIFT) &amp; AC_MASK) | ((np &lt;&lt; TC_SHIFT) &amp; TC_MASK); }</code></pre> <p>其中，各参数的含义如下所示。</p> <ul> <li>parallelism：并发级别。</li> <li>factory：创建线程的工厂类对象。</li> <li>handler：当线程池中的线程抛出未捕获的异常时，统一使用UncaughtExceptionHandler对象处理。</li> <li>mode：取值为FIFO_QUEUE或者LIFO_QUEUE。</li> <li>workerNamePrefix：执行任务的线程名称的前缀。</li> </ul> <p>当然，私有构造方法虽然是参数最多的一个方法，但是其不会直接对外方法，我们可以使用如下方式创建线程池。</p> <pre><code class="language-java">new ForkJoinPool(); new ForkJoinPool(Runtime.getRuntime().availableProcessors()); new ForkJoinPool(Runtime.getRuntime().availableProcessors(),              ForkJoinPool.defaultForkJoinWorkerThreadFactory,              null, true);</code></pre> <h3 id="使用scheduledthreadpoolexecutor类创建线程池">使用ScheduledThreadPoolExecutor类创建线程池</h3> <p>在Executors工具类中存在如下方法类创建线程池。</p> <pre><code class="language-java">public static ScheduledExecutorService newSingleThreadScheduledExecutor() { 	return new DelegatedScheduledExecutorService 		(new ScheduledThreadPoolExecutor(1)); }  public static ScheduledExecutorService newSingleThreadScheduledExecutor(ThreadFactory threadFactory) { 	return new DelegatedScheduledExecutorService 		(new ScheduledThreadPoolExecutor(1, threadFactory)); }  public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) { 	return new ScheduledThreadPoolExecutor(corePoolSize); }  public static ScheduledExecutorService newScheduledThreadPool( 		int corePoolSize, ThreadFactory threadFactory) { 	return new ScheduledThreadPoolExecutor(corePoolSize, threadFactory); }</code></pre> <p>从源码来看，这几个方法本质上调用的都是ScheduledThreadPoolExecutor类的构造方法，ScheduledThreadPoolExecutor中存在的构造方法如下所示。</p> <pre><code class="language-java">public ScheduledThreadPoolExecutor(int corePoolSize) { 	super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, 		  new DelayedWorkQueue()); }  public ScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory) { 	super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, 		  new DelayedWorkQueue(), threadFactory); }  public ScheduledThreadPoolExecutor(int corePoolSize, RejectedExecutionHandler handler) { 	super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, 		  new DelayedWorkQueue(), handler); }  public ScheduledThreadPoolExecutor(int corePoolSize,ThreadFactory threadFactory, RejectedExecutionHandler handler) { 	super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, 		  new DelayedWorkQueue(), threadFactory, handler); }</code></pre> <p>而从代码结构上看，ScheduledThreadPoolExecutor类继承自ThreadPoolExecutor类，本质上还是调用ThreadPoolExecutor类的构造方法，只不过此时传递的队列为DelayedWorkQueue。我们可以直接调用ScheduledThreadPoolExecutor类的构造方法来创建线程池，例如以如下形式创建线程池。</p> <pre><code class="language-java">new ScheduledThreadPoolExecutor(3)</code></pre> <p><strong>好了，今天就到这儿吧，我是冰河，我们下期见~~</strong></p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-185.htm">Vue组件间传值的方式</a></p>
                                        <p>下一个：<a href="/html/category/article-187.htm">SQL Server中函数、存储过程与触发器的用法_MsSql</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-227.htm">Spring Boot四大神器之CLI</a></h4>
                <p>目录             1. Spring Boot CLI简介： 2. 安装CLI:   手动安装：   3. 运行Groovy脚本 4. CLI运行原理说明：（CLI帮我们做了什么？）   </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-258.htm">你确定你会用Enum枚举了？</a></h4>
                <p>一般在我们开发时如果能使用枚举罗列的，一般都会定义一个枚举类型。将枚举类型作为方法的参数，可以方便的进行调用，给我们带来不少的遍历，当然有时候它还不如直接用一个int类型带来，带来一定灵活性。但只要能</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-254.htm">图像处理学习笔记——BMP图片详解</a></h4>
                <p>一、位图和调色板的概念  1.位图（Bitmap）： 例如我们常说的屏幕分辨率为 640*480，刷新频率为70Hz，意思是说每行要扫描 640 个象素，一共有 480 行，每秒重复扫描屏幕 70 次</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-218.htm">【SpringMVC笔记02】SpringMVC接收请求参数的几种方式</a></h4>
                <p>这篇文章，主要介绍SpringMVC框架中接收请求参数的几种方式。  目录 一、SpringMVC接收请求参数 1.1、通过方法参数接收 1.2、通过HttpServletRequest接收参数 1.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-230.htm">Vuex的各个模块封装</a></h4>
                <p>一、各个模块的作用：   state 用来数据共享数据存储  mutation 用来注册改变数据状态（同步）  getters 用来对共享数据进行过滤并计数操作  action 解决异步改变共享数据（</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-216.htm">Citus 分布式 PostgreSQL 集群 &#8211; SQL Reference(SQL支持和变通方案)</a></h4>
                <p>由于Citus 通过扩展PostgreSQL 提供分布式功能，因此它与PostgreSQL 结构兼容。这意味着用户可以使用丰富且可扩展的PostgreSQL 生态系统附带的工具和功能来处理使用Citu</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-222.htm">由浅入深，带你用JavaScript实现响应式原理（Vue2、Vue3响应式原理）</a></h4>
                <p>由浅入深，带你用JavaScript实现响应式原理 前言 为什么前端框架Vue能够做到响应式？当依赖数据发生变化时，会对页面进行自动更新，其原理还是在于对响应式数据的获取和设置进行了监听，一旦监听到数</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-235.htm">lombok和JPA的死递归</a></h4>
                <p>这是一个Bug JPA我觉得是一个封装的很棒的框架，至于说很臃肿这个事，我觉得在需求需要很多复杂查询的时候，不适合用JPA。因为它的封装太棒了，以致于增强了表和实体类之间的耦合。不过在一些简单查询的部</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-261.htm">Java 集合框架ArrayList 储存自定义数组</a></h4>
                <p>package LinkedList;  import java.util.ArrayList; import java.util.Iterator;  import p.bean.Person;  </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-262.htm">Python 认识列表和元组</a></h4>
                <p>列表和元组，都是一个可以放置任何数据类型的有序集合。   列表的特性 动态的（mutable）：长度大小不固定，可以随意地增加、删减或者改变元素。 会修改原来列表中的元素，而不会创建新的列表。 # 新</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>