<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-43.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>反射的概念 和基本使用（一） - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">反射的概念 和基本使用（一）</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<h1 id="1-反射">1 反射</h1> <h3 id="什么是反射">什么是反射</h3> <blockquote> <p>java反射 是指在运行状态中 对于任意一个类 我们都可以知到这个类的所有方法和属性 也可以调用其所有的方法和属性  这种动态获取的方式 我们称为<strong>反射</strong></p> </blockquote> <h3 id="什么是class对象">什么是class对象</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7979522ca41f14c021cfeea795249129.jpg" alt="反射的概念 和基本使用（一）"></p> <blockquote> <p>我们通过使用<code>反射</code> 就是通过Class类来实现的<code>Class</code> 类的实例表示正在运行的 Java 应用程序中的类和接口。</p> <p>也就是jvm中有N多的实例每个类都有该Class对象。（包括基本数据类型）</p> </blockquote> <h3 id="反射的使用">反射的使用</h3> <h4 id="获取class对象的三种方式">获取class对象的三种方式</h4> <h5 id="基本类"><strong>基本类</strong></h5> <pre><code class="language-java">/**  *  * @author : look-word  * @date : 2022-04-05 20:49  **/ public class Student {     private String username;     private String gender;      public  String getInfo() {         this.setUsername("张三");         this.setGender("男");         return this.username+"="+this.gender;     }      public String getUsername() {         return username;     }      public void setUsername(String username) {         this.username = username;     }      public String getGender() {         return gender;     }      public void setGender(String gender) {         this.gender = gender;     } }</code></pre> <h5 id="测试代码如下"><strong>测试代码如下</strong></h5> <pre><code class="language-java">/**  * @author : look-word  * @date : 2022-04-05 20:54  **/ public class Test {     public static void main(String[] args) {          /*             1 创建对象 获取其class对象          */         Student student = new Student();         Class&lt;? extends Student&gt; aClass = student.getClass();         System.out.println(aClass.getSimpleName());         /*             2 任何数据类型（包括基本数据类型）都有一个“静态”的class属性          */         Class&lt;? extends Student&gt; bClass=Student.class;         System.out.println(aClass == bClass?"两者是同一对象":"两者不是同一对象");         /*             3 通过Class类的forName方法获取          */         try {             //  Class.forName(类的相对路径)             Class&lt;?&gt; cClass = Class.forName("bean.Student");             System.out.println(bClass == cClass?"两者是同一对象":"两者不是同一对象");         } catch (ClassNotFoundException e) {             e.printStackTrace();         }     } }</code></pre> <h5 id="结果如下"><strong>结果如下</strong></h5> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c864112bfaabe40687973992ac013ecc.jpg" alt="反射的概念 和基本使用（一）"></p> <h5 id="证明">证明</h5> <blockquote> <p>在运行期间 一个类只有一个class对象的产生</p> <p>常用的是<code>第三次</code> 清晰 明了 因为 在一个项目中 可能会产生 相同名字的类</p> <p>解决疑惑  为什么要是用 第三种</p> <p>第一种对象都有了还要反射干什么。</p> <p>第二种需要导入类的包，依赖太强，不导包就抛编译错误。</p> <p><code>第三种</code>，一个字符串可以传入也可写在配置文件中等多种方法。</p> </blockquote> <h4 id="获取class类中的所有构造方法">获取Class类中的所有构造方法</h4> <h5 id="基本类-1">基本类</h5> <pre><code class="language-java">public class Student {     //---------------构造方法-------------------     //（默认的构造方法）     Student(String str){         System.out.println("(默认)的构造方法 s = " + str);     }      //无参构造方法     public Student(){         System.out.println("调用了公有、无参构造方法执行了。。。");     }      //有一个参数的构造方法     public Student(char name){         System.out.println("姓名：" + name);     }      //有多个参数的构造方法     public Student(String name ,int age){         System.out.println("姓名："+name+" 年龄："+ age);//这的执行效率有问题，以后解决。     }      //受保护的构造方法     protected Student(boolean n){         System.out.println("受保护的构造方法 n = " + n);     }      //私有构造方法     private Student(int age){         System.out.println("私有的构造方法   年龄："+ age);     } }</code></pre> <h5 id="测试代码">测试代码</h5> <pre><code class="language-java">/**  * 测试构造方法  * @author : look-word  * @date : 2022-04-05 21:18  **/ public class TestConstructor {  /**  * 通过Class对象可以获取某个类中的：构造方法、成员变量、成员方法；并访问成员；  *  * 1.获取构造方法：  * 		1).批量的方法：  * 			public Constructor[] getConstructors()：所有"公有的"构造方法             public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有)   * 		2).获取单个的方法，并调用：  * 			public Constructor getConstructor(Class... parameterTypes):获取单个的"公有的"构造方法：  * 			public Constructor getDeclaredConstructor(Class... parameterTypes):获取"某个构造方法"可以是私有的，或受保护、默认、公有；  *  * 			调用构造方法：  * 			Constructor--&gt;newInstance(Object... initargs) */     public static void main(String[] args) throws Exception {         Class&lt;?&gt; student = Class.forName("bean.Student");         /*             1 获取所有共有的构造方法          */         System.out.println("\n1 获取所有共有的构造方法");         Constructor&lt;?&gt;[] constructors = student.getConstructors();         for (Constructor&lt;?&gt; constructor : constructors) {             System.out.println(constructor);         }          /*             2 获取共有的无参构造方法 可以写 null 或者 不填          */         System.out.println("\n2 获取共有的无参构造方法 可以写 null 或者 不填");         Constructor&lt;?&gt; constructor2 = student.getConstructor();         constructor2.newInstance();          /*             3 获取 给定参数共有的构造方法 public bean.Student(java.lang.String,int)          */         System.out.println("\n 3 获取 给定参数共有的构造方法 public bean.Student(java.lang.String,int)");         Constructor&lt;?&gt; constructor3 = student.getConstructor(String.class, int.class);         constructor3.newInstance("张三",19);          /*             4 获取 私有给定参数的构造方法 私有 不给定参数 不传参数即可          */         Constructor&lt;?&gt; constructor4 = student.getDeclaredConstructor(int.class);         /*             获取私有的属性 或者构造方法是 需要 设置无障碍 俗称 暴力访问             不设置 会出异常 java.lang.IllegalAccessException          */         constructor4.setAccessible(true);         constructor4.newInstance(19);     } }</code></pre> <h5 id="执行结果">执行结果</h5> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/d6dcd384df6988ff11a3d3ea1648149d.jpg" alt="反射的概念 和基本使用（一）"></p> <h5 id="注意">注意</h5> <blockquote> <p>获取私有属性的时候 一定要设置无障碍</p> <p>setAccessible(true);</p> <p>不设置 会出异常 java.lang.IllegalAccessException</p> <p>newInstance(Object... initargs)  创建一个新实例<br /> 使用此<code>Constructor</code> 对象表示的构造方法来创建该构造方法的声明类的新实例，并用指定的初始化参数初始化该实例。</p> <p>每次是用<code>newInstance</code>创建的对象 都是不同的对象 代表不同的实例</p> </blockquote> <h4 id="操作成员变量">操作成员变量</h4> <h5 id="基本类-2">基本类</h5> <pre><code class="language-java">  public class Student { 	public Student(){ 		 	} 	//**********字段*************// 	public String name; 	protected int age; 	char sex; 	private String phoneNum; 	 	@Override 	public String toString() { 		return "Student [name=" + name + ", age=" + age + ", sex=" + sex 				+ ", phoneNum=" + phoneNum + "]"; 	} }</code></pre> <h5 id="测试代码-1">测试代码</h5> <pre><code class="language-java">/**  * @author : look-word  * @date : 2022-04-05 21:55  **/ public class TestField {  /*  * 获取成员变量并调用：  *  * 1.批量的  * 		1).Field[] getFields():获取所有的"公有字段"  * 		2).Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有；  * 2.获取单个的：  * 		1).public Field getField(String fieldName):获取某个"公有的"字段；  * 		2).public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的)  *  * 	 设置字段的值：  * 		Field --&gt; public void set(Object obj,Object value):  * 					参数说明：  * 					1.obj:要设置的字段所在的对象；  * 					2.value:要为字段设置的值； */     public static void main(String[] args) throws Exception{         Class&lt;?&gt; aClass = Class.forName("bean.Student");         Student student = new Student();          /*             获取所有的共有字段          */         System.out.println("-------------------获取所有的共有字段--------------------");         Field[] fields = aClass.getFields();         for (Field field : fields) {             /*                 filed =&gt; public java.lang.String bean.Student.username                 filed =&gt; 成员变量              */              /*                我理解为 给某个对象的 成员变量 赋值                当前的filed 为 username 因为这里只能获取为 共有属性的成员变量              * field.set(student,"zhangsan");              */             field.set(student,"zhangsan");             System.out.println(student);             /*                 field.get(student);                 获取某student中的 field 的 内容              */             Object o = field.get(student);             System.out.println(o);             /*              *  打印filed的内容 =&gt; public java.lang.String bean.Student.username              */             System.out.println(field);         }          System.out.println("-------------------给私有字段赋值--------------------");         Field phone = aClass.getDeclaredField("phone");         phone.setAccessible(true);// 设置无障碍          phone.set(student,"110");// 赋值给student对象          System.out.println("-------------------获取私有字段--------------------");         Field phone1 = aClass.getDeclaredField("phone");         phone1.setAccessible(true);// 设置无障碍         System.out.println(phone1.get(student));//取出student对象中的phone属性的值     } }</code></pre> <h5 id="注意-1">注意</h5> <blockquote> <p>在操作私有属性的时候 不管是获取还是设置值 都需要设置无障碍</p> <p>setAccessible(true);// 设置无障碍</p> </blockquote> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-42.htm">SpringSecurity核心过滤器-CsrfFilter</a></p>
                                        <p>下一个：<a href="/html/category/article-44.htm">Java调用REST接口（get，post请求方法）</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-255.htm">解决antdv的table因数据量过大导致的卡顿问题</a></h4>
                <p>遇到的问题：antdv的table表格使用时因数据量过大，造成标签页切换卡顿的问题 解决办法：绑定滚动事件，页面只显示在可视区域内的数据，没在可视区域内的数据不予展示，dom元素的scrollHeig</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-224.htm">go语言panic函数详解</a></h4>
                <p>程序异常被叫做panic，直译为运行时恐慌 当panic被抛出异常后，如果我们没有在程序中添加任何保护措施的话，程序就会打印出panic的详细情况之后，终止运行  panic: runtime err</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-221.htm">关于encodeURI和encodeURIComponent的使用场景</a></h4>
                <p>encodeURI：适用于url跳转时。 encodeURIComponent：适用于url作为参数传递时。 tips：当url作为参数传递时如果没有用encodeURIComponent进行编码，会</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-207.htm">C ++中的虚拟基类</a></h4>
                <p>在本教程中，我们将讨论一个程序，以了解C ++中的虚拟基类。 虚拟类主要在多重继承期间使用。为了避免将同一类的多个实例带到同一类中，这随后会引起歧义，因此使用虚拟类。 示例 #include&nbsp</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-228.htm">Android jetpack room+ViewModel+liveData 数据自动更新</a></h4>
                <p>Android jetpack room的使用_安果移不动的博客-CSDN博客 接上篇博客 我们用google推荐的这种方式  &nbsp; 修改： StudentDao package com.an</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-241.htm">git 回滚到之前某一commit</a></h4>
                <p>git log git reset –hard 8ff24a6803173208f3e606e32dfcf82db9ac84d8</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-214.htm">JavaScript找到两个数组之间的差异方法详解</a></h4>
                <p>我们有两个这样的数字数组- const&nbsp;arr1&nbsp;=&nbsp;[12,&nbsp;54,&nbsp;2,&nbsp;4,&nbsp;6,&nbsp;34,&nbsp;3]; co</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-203.htm">Python tkinter库图形绘制例子分享_python_</a></h4>
                <p>目录  一、椭圆绘制 二、矩形绘制 三、多边形绘制    一、椭圆绘制 实例代码：  import tkinter as tk                    # 导入tkinter库，并重命名</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-248.htm">vue父组件向子组件传值与传递方法</a></h4>
                <p>vue父组件向子组件传值与传递方法 学习笔记 1、父组件向子组件传值（props）  在子组件中，默认是无法访问到父组件中的data上的数据和methods中的方法 父组件可以在引用子组件的时候，通过</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-206.htm">眼见不一定为实：调用链HBase倾斜修复</a></h4>
                <p>hello，大家好，我是小楼。 今天给大家分享一个关于HBase数据倾斜的排查案例，不懂调用链？不懂HBase？没关系，看完包懂~ 背景 最近HBase负责人反馈HBase存储的调用链数据偶尔出现极其</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>