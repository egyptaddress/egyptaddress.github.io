<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-120.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Lambda8 表达式 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Lambda8 表达式</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<h2 id="lambda-表达式">Lambda 表达式</h2> <p>Lambda 表达式是 JDK8 的一个新特性，可以取代大部分的匿名内部类，写出更优雅的 Java 代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。<br /> JDK 也提供了大量的内置函数式接口供我们使用，使得 Lambda 表达式的运用更加方便、高效。</p> <p>可以对某些匿名内部类的写法进行简化，它是函数式编程思想的一个重要体现，不用关注是什么对象，而是更关注对数据进行了什么操作。</p> <h3 id="基本格式">基本格式</h3> <pre><code class="language-markdown">(参数列表)-&gt;{代码}</code></pre> <h3 id="范例">范例</h3> <h4 id="范例一">范例一：</h4> <p><strong>在创建线程并启动时可以使用匿名内部类的写法；</strong></p> <ul> <li>匿名内部类方式：</li> </ul> <pre><code class="language-java">new Thread(new Runnable() {     @Override     public void run() {         System.out.println(Thread.currentThread());     } }).start();</code></pre> <ul> <li>Lambda方式：</li> </ul> <pre><code class="language-java">new Thread(() -&gt; {     System.out.println(Thread.currentThread()); }).start();</code></pre> <h4 id="范例二">范例二：</h4> <p><strong>IntBinaryOperator是一个接口，使用匿名内部类的写法调用该方法；</strong></p> <ul> <li>匿名内部类方式：</li> </ul> <pre><code class="language-java">public static int calculateNum(IntBinaryOperator operator) {     int a = 10;     int b = 20;     return operator.applyAsInt(a, b); }  @Test public void testLambda2() {     int i = calculateNum(new IntBinaryOperator() {         @Override         public int applyAsInt(int left, int right) {             return left + right;         }     });      System.out.println(i); }</code></pre> <ul> <li>Lambda方式：</li> </ul> <pre><code class="language-java">public static int calculateNum(IntBinaryOperator operator) {     int a = 10;     int b = 20;     return operator.applyAsInt(a, b); }  @Test public void testLambda2() {     int i = calculateNum((int left, int right) -&gt; {         return left + right;     });      System.out.println(i); }</code></pre> <h4 id="范例三">范例三：</h4> <p><strong>IntPredicate是一个接口。先使用匿名内部类的写法调用该方法；</strong></p> <ul> <li>匿名内部类方式：</li> </ul> <pre><code class="language-java">public static void printNum(IntPredicate predicate) {     int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     for (int i : arr) {         if (predicate.test(i)) {             System.out.println(i);         }     } }  @Test public void testLambda3() {     printNum(new IntPredicate() {         @Override         public boolean test(int value) {             return value % 3 == 0;         }     }); }</code></pre> <ul> <li>Lambda方式：</li> </ul> <pre><code class="language-java">public static void printNum(IntPredicate predicate) {     int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     for (int i : arr) {         if (predicate.test(i)) {             System.out.println(i);         }     } }  @Test public void testLambda3() {     printNum((int value) -&gt; {         return value % 3 == 0;     }); }</code></pre> <h4 id="范例四">范例四：</h4> <p><strong>Function是一个接口，先使用匿名内部类的写法调用该方法；</strong></p> <ul> <li>匿名内部类方式：</li> </ul> <pre><code class="language-java">public static &lt;R&gt; R typeConver(Function&lt;String, R&gt; function) {     String str = "1235";     R result = function.apply(str);     return result; }  @Test public void testLambda4() {     Integer result = typeConver(new Function&lt;String, Integer&gt;() {         @Override         public Integer apply(String s) {             return Integer.valueOf(s);         }     });     System.out.println(result); }</code></pre> <ul> <li>Lambda方式：</li> </ul> <pre><code class="language-java">public static &lt;R&gt; R typeConver(Function&lt;String, R&gt; function) {     String str = "1235";     R result = function.apply(str);     return result; }  @Test public void testLambda4() {     Integer result = typeConver((String s) -&gt; {         return Integer.valueOf(s);     });     System.out.println(result); }</code></pre> <h4 id="范例五">范例五：</h4> <p><strong>IntConsumer是一个接口，先使用匿名内部类的写法调用该方法；</strong></p> <ul> <li>匿名内部类方式：</li> </ul> <pre><code class="language-java">public static void foreachArr(IntConsumer consumer) {     int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     for (int i : arr) {         consumer.accept(i);     } }  @Test public void testLambda5() {     foreachArr(new IntConsumer() {         @Override         public void accept(int value) {             System.out.println(value);         }     });</code></pre> <ul> <li>Lambda方式：</li> </ul> <pre><code class="language-java">public static void foreachArr(IntConsumer consumer) {     int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     for (int i : arr) {         consumer.accept(i);     } }  @Test public void testLambda5() {     foreachArr((int value) -&gt; {         System.out.println(value);     }); }</code></pre> <h3 id="省略规则">省略规则</h3> <ul> <li>参数类型可以省略；</li> </ul> <pre><code class="language-java">public static void foreachArr(IntConsumer consumer) {     int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     for (int i : arr) {         consumer.accept(i);     } }  @Test public void testLambda5() {     foreachArr((value) -&gt; {         System.out.println(value);     }); }</code></pre> <ul> <li>方法体只有一句代码时大括号return和唯一一句代码的分号可以省略；</li> </ul> <pre><code class="language-java">public static void foreachArr(IntConsumer consumer) {     int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     for (int i : arr) {         consumer.accept(i);     } }  @Test public void testLambda5() {     foreachArr((value) -&gt; System.out.println(value)); }</code></pre> <ul> <li>方法只有一个参数时小括号可以省略；</li> </ul> <pre><code class="language-java">public static void foreachArr(IntConsumer consumer) {     int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     for (int i : arr) {         consumer.accept(i);     } }  @Test public void testLambda5() {     foreachArr(value -&gt; System.out.println(value)); }</code></pre> <ul> <li>以上这些规则都记不住也可以省略不记，可通过idea的replaceLambda表达式快速生成lambda表达式；</li> </ul> <h2 id="stream-流">Stream 流</h2> <p>Stream将要处理的元素集合看作一种流，在流的过程中，借助Stream API对流中的元素进行操作。</p> <h3 id="stream---特性">Stream - 特性</h3> <p>Stream可以由数组或集合创建，对流的操作分为两种：</p> <ul> <li>中间操作，每次返回一个新的流，可以有多个；</li> <li>终端操作，每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值。</li> </ul> <p>Stream特性：</p> <ul> <li> <p>stream不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果；</p> </li> <li> <p>stream不会改变数据源，通常情况下会产生一个新的集合或一个值；</p> </li> <li> <p>stream具有延迟执行特性，只有调用终端操作时，中间操作才会执行。</p> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/e98245ba7034202f40ea79585ea56cfb.jpg" alt="Lambda8 表达式"></p> <h3 id="stream---创建方式">Stream - 创建方式</h3> <p>Stream创建方式有三种：</p> <ul> <li> <p>通过 java.util.Collection.stream() 方法用集合创建流；</p> </li> <li> <p>使用java.util.Arrays.stream(T[] array)方法用数组创建流；</p> </li> <li> <p>使用Stream的静态方法：of()、iterate()、generate()。</p> </li> </ul> <pre><code class="language-java">import java.util.Arrays; import java.util.List; import java.util.concurrent.atomic.AtomicInteger; import java.util.stream.Collectors; import java.util.stream.IntStream; import java.util.stream.Stream;  /**  * @author hos  * @Createdate 2022/3/21 14:40  */ public class StreamCreateType {      public static void main(String[] args) {          /**          * Stream 流的创建有3种方式          *  1. Collection.stream（）方法用集合创建          *  2. Arrays.stream(T[] array) 方法用数组创建          *  3. 使用Stream的静态方法：of()、iterate()、generate()          */         //方式一: Collection.stream（）方法用集合创建         List&lt;String&gt; list = Arrays.asList("1", "2", "3", "4", "5", "6", "7", "8", "9");         // 创建一个顺序流         Stream&lt;String&gt; stream = list.stream();         // 创建一个并行流         Stream&lt;String&gt; stringStream = list.parallelStream();         List&lt;String&gt; collect = stringStream.collect(Collectors.toList());          //方式二: Arrays.stream(T[] array) 方法用数组创建         int[] array = {1, 2, 3, 4, 5};         IntStream stream1 = Arrays.stream(array);         System.out.println(stream1.max().getAsInt());           //方式三: 使用Stream的静态方法：of()、iterate()、generate()         Stream&lt;Integer&gt; intStream = Stream.of(1, 2, 3, 4, 5, 6);         Stream&lt;Integer&gt; stream2 = Stream.iterate(0, (x) -&gt; x + 3).limit(4);         // 0 3 6 9         stream2.forEach(System.out::println);          AtomicInteger m = new AtomicInteger(10);         Stream&lt;Integer&gt; stream3 = Stream.generate(()-&gt; m.getAndIncrement()).limit(3);         //10 11 12         stream3.forEach(System.out::println);     } }</code></pre> <h3 id="stream---使用">Stream - 使用</h3> <h4 id="中间操作">中间操作</h4> <h5 id="map">map</h5> <p>map，可以将一个流的元素按照一定的映射规则映射到另一个流中；</p> <p>map，接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</p> <h5 id="filter">filter</h5> <p>filter，对流中的元素进行条件过滤，符合过滤条件的才能继续留在流中；</p> <p>filter，按照一定的规则校验流中的元素，将符合条件的元素提取到新的流中的操作。</p> <h5 id="distinct">distinct</h5> <p>distinct，去除流中的重复元素；</p> <h5 id="sorted">sorted</h5> <p>sorted()，自然排序，流中元素需实现Comparable接口；</p> <p>sorted(Comparator com)，Comparator排序器自定义排序。</p> <h5 id="limit">limit</h5> <p>limit，可以设置流的最大长度，超出的部分将被抛弃；</p> <h5 id="skip">skip</h5> <p>skip，跳过流中的前n个元素，返回剩下的元素；</p> <h5 id="flatmap">flatMap</h5> <p>flatMap，接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流；</p> <p>map只能把一个对象转换成另一个对象来作为流中的元素。而flatMap可以把一个对象转换成多个对象作为流中的元素。</p> <h4 id="终结操作">终结操作</h4> <h5 id="foreach">forEach</h5> <p>forEach方法，通过 lambda 表达式的方式遍历集合中的元素；</p> <p>forEach，对流中的元素进行遍历操作，通过传入的参数去指定对遍历到的元素进行什么具体操作。</p> <h5 id="count">count</h5> <p>count，用来获取当前流中元素的个数；</p> <h5 id="maxmin">max&amp;min</h5> <p>max&amp;min，可以用来或者流中的最值。</p> <h5 id="collect">collect</h5> <p>collect，把当前流转换成一个集合；</p> <p>collect，把一个流收集起来，最终可以是收集成一个值也可以收集成一个新的集合；流不存储数据，那么在流中的数据完成处理后，需要将流中的数据重新归集到新的集合里。</p> <h5 id="reduce">reduce</h5> <p>reduce，把一个流缩减成一个值，能实现对集合求和、求乘积和求最值操作；</p> <p>reduce，对流中的数据按照你指定的计算方式计算出一个结果。</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-119.htm">Error response from daemon: Get https://registry-1.docker.io/v2/: net/http: TLS handshake timeout</a></p>
                                        <p>下一个：<a href="/html/category/article-121.htm">Springboot的自动配置原理</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1332.htm">Centos7离线安装Nginx亲测版</a></h4>
                <p>Centos7 Nginx编译包制作 找一台可连接互联网的虚拟机来制作编译好的Nginx包，具体操作如下 1、准备一台虚拟机（可访问互联网） 2、安装所需插件 $ yum -y install gcc</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1321.htm">Spring Boot的依赖配置文件的解析</a></h4>
                <p>SpringBoot笔记-day01 在pom.xml中 &lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&l</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2240.htm">webpack 执行npm run 时，因为版本依赖报的那些错</a></h4>
                <p>环境介绍 webpack 4.34.0 webpack-dev-server 3.7.0 报错 Error: invalid "instanceof" keyword value Promise   </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1911.htm">动态添加select后不显示layui动态添加select后重新渲染</a></h4>
                <p>一、问题：利用jQuery动态添加的代码中包含select，运行后不显示 1、显示的状态 2、后台的代码 正常情况下应该像队长班级一样显示，但是却惊奇的发现，事与愿违 二、原因 Layui会对sele</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1331.htm">为什么我建议需要定期重建数据量大但是性能关键的表_在线工具</a></h4>
                <p>个人创作公约：本人声明创作的所有文章皆为自己原创，如果有参考任何文章的地方，会标注出来，如果有疏漏，欢迎大家批判。如果大家发现网上有抄袭本文章的，欢迎举报，并且积极向这个github 仓库 提交 is</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-237.htm">Java空指针异常和解决办法</a></h4>
                <p>目录  问题描述：   尝试1： 尝试2：   使用Optional防止出现空指针异常 引用    问题描述： public class Main20220419 {     public stati</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1351.htm">Rabbit MQ 怎么保证可靠性、幂等性、消费顺序</a></h4>
                <p>RabbitMQ如何保证消息的可靠性 RabbitMQ消息丢失的三种情况 生产者弄丢消息时的解决方法  方法一：生产者在发送数据之前开启RabbitMQ的事务(采用该种方法由于事务机制，会导致吞吐量下</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2239.htm">【面试普通人VS高手系列】HashMap是怎么解决哈希冲突的？</a></h4>
                <p>常用数据结构基本上是面试必问的问题，比如HashMap、LinkList、ConcurrentHashMap等。 关于HashMap，有个学员私信了我一个面试题说： “HashMap是怎么解决哈希冲突</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-260.htm">Vue中 Vue.prototype 详解及使用</a></h4>
                <p>我们可能会在很多组件里用到数据/实用工具，但是不想污染全局作用域。这种情况下，可以通过在原型上定义它们使其在每个 Vue 的实例中可用。 1. 基本示例 在main.js中添加一个变量到 Vue.pr</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1053.htm">Spring Cloud中使用Feign实现负载均衡详解</a></h4>
                <p>本文属于【夯实Spring Cloud】系列文章，该系列旨在用通俗易懂的语言，带大家了解和学习Spring Cloud技术，希望能给读者带来一些干货。系列目录如下：  【夯实Spring Cloud】</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">48</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>