<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-790.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>详细分析虚拟DOM与diff算法 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">详细分析虚拟DOM与diff算法</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<h2 id="虚拟dom与diff算法">????虚拟DOM与diff算法</h2> <p>在vue、react等技术出现之前，每次修改DOM都需要通过遍历查询DOM树的方式，找到需要更新的DOM，然后修改样式或结构，资源损耗十分严重。而对于虚拟DOM来说，每次DOM的更改就变成了JS对象的属性的更改，能方便的查找JS对象的属性变化，要比查询DOM树的性能开销小，所以能够改善浏览器的性能问题。</p> <p>对于vue，从vue2就开始支持虚拟DOM。</p> <p><strong>diff算法</strong>：简单来说就是找出两个对象的差异，只对有差异的一小块DOM进行更新，而不是整个DOM，从而达到最小量更新的效果</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/71caa7675ec634c13769e9b12812c93e.jpg" alt="详细分析虚拟DOM与diff算法"></p> <p><strong>虚拟DOM</strong>：内部会把代码段解析成一个对象（真实DOM是通过模板编译变成虚拟DOM的）</p> <p>用JS对象描述DOM的层次结构，DOM中的一切属性都在虚拟DOM中有对应的属性</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/94e4013420bcd05ffdf9ae27dcaf884c.jpg" alt="详细分析虚拟DOM与diff算法"></p> <h2 id="snabbdom环境搭建">snabbdom环境搭建</h2> <p>是虚拟DOM库，diff算法的鼻祖，vue源码借鉴了<code>snabbdom</code></p> <p>官方git:https://github.com/snabbdom/snabbdom</p> <p>git上的<code>snabbdom</code>源码是用<code>TypeScript</code>写的，如果要直接使用编译出来的<code>Javascript</code>版的<code>snabbdom</code>库，可以从npm上下载<code>npm i -D snabbdom</code></p> <p><code>snabbdom</code>库是DOM库，不能在node js环境运行，需要搭建<code>webpack</code>和<code>webpack-dev-server</code>开发环境。需要注意的是必须安装<code>webpack@5</code>。</p> <pre><code>npm i -D webpack@5 webpack-cli@3 webpack-dev-server@3</code></pre> <p>配置<code>webpack.config.js</code>文件，参考官网进行配置：https://webpack.docschina.org/</p> <pre><code>const path = require('path');  module.exports = {     // 入口     entry: './src/index.js',      // 出口     output: {         // 虚拟打包路径，文件夹不会真正生成，而是在8080端口虚拟生成         publicPath: 'xuni',         // 打包出来的文件名         filename: "bundle.js",     },     // 配置webpack-dev-server     devServer: {         // 端口号         port: 8082,         // 静态根目录         contentBase: 'www',     }, }</code></pre> <p>将项目根目录下的<code>package.json</code>文件中修改<code>script</code>的配置，就可以通过<code>npm run dev</code>启动项目</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/e546fb2791532ebd6dca1be00608acc0.jpg" alt="详细分析虚拟DOM与diff算法"></p> <p>配置完之后将官网的Example进行测试，由于示例要获取id=container的节点，所以我们需要提前准备一个id为container的div。</p> <pre><code><!DOCTYPE html> <html lang="en"> <head>     <meta charset="UTF-8">     <title>Title</title> </head> <body>     <div id="container"></div>     <script src="/xuni/bundle.js"></script> </body> </html></code></pre> <p>需要注意的点</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/8bacae341fdaca181733065a89731a89.jpg" alt="详细分析虚拟DOM与diff算法"></p> <p>页面出现如下状态即表示配置完成</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/8696902bb836118c627c35c63d6c5043.jpg" alt="详细分析虚拟DOM与diff算法"></p> <h2 id="虚拟dom和h函数">虚拟DOM和h函数</h2> <p>diff是发生在虚拟DOM上的</p> <p>新虚拟DOM和老虚拟DOM进行diff(精细化比较)，算出应该如何最小量更新，最后反映到真正的DOM上。</p> <p>h函数用来产生虚拟节点(vnode)</p> <pre><code>h('a',{ props: { href: 'https://www.baidu.com' } }, '百度');</code></pre> <p>会得到这样的虚拟节点</p> <pre><code>{ "sel": "a", "data": { props: { href: 'https://www.baidu.com' } }, "text": "百度" }</code></pre> <p>它表示的真正的DOM节点</p> <pre><code>百度</code></pre> <p>如果需要让虚拟节点上树，需要借助<code>patch</code>函数</p> <pre><code>import {     init,     classModule,     propsModule,     styleModule,     eventListenersModule,     h, } from "snabbdom";  // 创建patch函数 var patch = init([classModule, propsModule, styleModule, eventListenersModule]);  //创建虚拟节点 var vNode1 = h('a',{ props: { href: 'https://www.baidu.com' } }, '百度');  // 让虚拟节点上树 const container = document.getElementById('container'); patch(container,vNode1);</code></pre> <p><strong>h函数可以嵌套使用，从而得到虚拟DOM树</strong></p> <pre><code>h('ul',{},[ 	h('li',{},'可乐'); 	h('li',{},'雪碧'); 	h('li',{},'椰汁'); ])</code></pre> <h2 id="diff算法">diff算法</h2> <p>实现最小量更新。需要<code>key</code>。<code>key</code>是这个节点的唯一标识，告诉diff算法，在更改前后它们是同一个DOM节点。</p> <p><strong>只有同一个虚拟节点，才进行精细化比较。</strong>否则就是暴力删除旧的、插入新的。</p> <p>同一个虚拟节点：选择器相同且key相同</p> <p><strong>只进行同层比较，不会进行跨层比较。</strong></p> <p>比如下面这两个DOM节点，虽然是同一片虚拟节点，但是跨层了，依旧会暴力删除旧的、插入新的。</p> <pre><code>const vnode1 = h('div',{},[ 	h('p',{ key: 'A' }, 'A'), 	h('p',{ key: 'B' }, 'B'), 	h('p',{ key: 'C' }, 'C'), 	h('p',{ key: 'D' }, 'D'), ]);  const vnode2 = h('div',{},h('section',{},[ 	h('p',{ key: 'A' }, 'A'), 	h('p',{ key: 'B' }, 'B'), 	h('p',{ key: 'C' }, 'C'), 	h('p',{ key: 'D' }, 'D'), ]))</code></pre> <p>分析源码也可以验证以上所述</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/44d0356766fcfa2395a24eed73dedcbe.jpg" alt="详细分析虚拟DOM与diff算法"></p> <p>首先会去判断是不是虚拟节点，不是的话会先去把它包装成虚拟节点</p> <p>然后判断是不是同一个节点，不是的话插入新的、删除旧的，是的话精细化比较</p> <p>执行的流程图</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/1dab75bcc07fe515f3454bbf2a405a76.jpg" alt="详细分析虚拟DOM与diff算法"></p> <h3 id="patch函数">patch函数</h3> <p>首先判断oldVnode是否是虚拟节点，如果是DOM节点的话先把oldVnode包装成虚拟节点</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/62c0f62099f70ae0b3145b484278625b.jpg" alt="详细分析虚拟DOM与diff算法"></p> <p>然后判断新节点和旧节点是否是同一个节点，判断<code>key</code>的值是否相同，标签名是否相同，是否都定义了data(data包含一些具体的信息，onclick、style等)</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/886ad3ad795ee129174a9230af2c789f.jpg" alt="详细分析虚拟DOM与diff算法"></p> <p>如果不是同一节点，新节点直接替换老节点，删除旧的、插入新的。在源码中，创建所有的子节点时，需要递归。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/33ab4d34bb65e04d50a2fd28ca8d13db.jpg" alt="详细分析虚拟DOM与diff算法"></p> <p>如果新旧节点是同一个节点时，会执行<code>patchVnode</code>进行子节点比较</p> <h3 id="patchvnode函数">patchVnode函数</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/5254e9112b53c414fbbac740de9f7528.jpg" alt="详细分析虚拟DOM与diff算法"></p> <p>首先会找到对应的真实DOM</p> <pre><code>const elm = (vnode.elm = oldVnode.elm)!;</code></pre> <p>如果新老节点相同，直接返回<code>if(oldVnode === vnode) return</code></p> <ul> <li> <p>如果vnode没有文本节点(<code>isUndef(vnode.text)</code>)</p> <ul> <li> <p>都有children且不相同</p> <p>使用<code>updateChildren</code>对比children（<strong>diff算法的核心</strong>）</p> </li> <li> <p>只有vnode有children</p> <p>则oldVnode是一个空标签或者是文本节点，如果是文本节点就清空文本节点，然后将vnode的children创建为真实DOM后插入到空标签内。</p> </li> <li> <p>只有oldVnode有children</p> <p>vnode没有的东西，在oldVnode内需要删除掉<code>removeVnodes</code>（oldVnode有且vnode没有的，都清空或移除）</p> </li> <li> <p>只有oldVnode有文本</p> <p>清空文本</p> </li> </ul> </li> <li> <p>如果vnode有text属性且不同</p> <p>以<code>vnode</code>为标准，无论<code>oldVnode</code>是什么类型节点，直接设置为<code>vnode</code>内的文本</p> </li> </ul> <h3 id="updatechildren函数">updateChildren函数</h3> <p>updateChildren方法的核心：</p> <ul> <li> <p>提取出新老节点的子节点：新节点子节点ch和老节点子节点oldCh</p> </li> <li> <p>ch和oldCh分别设置StartIdx(头指针)和EndIdx(尾指针)变量，相互比较。此时就有四个变量：<code>oldStartIdx、oldEndIdx、newStartIdx、newEndIdx</code>(这里采用双指针的思想)</p> <p>有四种方式来比较：</p> <ol> <li> <p>oldStartIdx和newStartIdx比较</p> <p>如果匹配，DOM不用修改，将oldStartIdx和newStartIdx的下标往后移一位</p> </li> <li> <p>oldEndIdx和newEndIdx比较</p> <p>如果匹配，DOM不用修改，将oldEndIdx和newEndIdx的下标往前移一位</p> </li> <li> <p>oldStartIdx和newEndIdx比较</p> <p>如果匹配，DOM不用修改，将oldStartIdx对应的真实DOM插入到最后一位，oldStartIdx的下标后移一位，newEndIdx的下标前移一位。</p> </li> <li> <p>oldEndIdx和newStartIdx比较</p> <p>如果匹配，DOM不用修改，将oldEndIdx对应的真实DOM插入到oldEndIdx对应真实Dom的前面，oldEndIdx的下标前移一位，newStartIdx的下标后移一位。</p> </li> </ol> </li> </ul> <p>如果4种方式都没有匹配成功，如果设置了key就通过key进行比较，在比较过程中startIdx++，endIdx--，一旦<code>StartIdx > EndIdx</code>表明ch或者oldCh至少有一个已经遍历完成，此时就会结束比较</p> <p>处理结束后，如果新节点有剩余，就添加；如果旧节点有剩余，就删除</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/5967b0cd211529836be9f3672a70c2cf.jpg" alt="详细分析虚拟DOM与diff算法"></p> <h2 id="v-for中key作用与原理">v-for中key作用与原理</h2> <p>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】产生【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p> <p>（1）旧虚拟DOM中找到了与新虚拟DOM相同的key</p> <p>		①若虚拟DOM中内容没变，直接使用之前的真实DOM</p> <p>		②若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</p> <p>（2）旧虚拟DOM中未找到与新虚拟DOM相同的key</p> <p>		创建新的真实DOM，随后渲染到页面</p> <p>所以，如果用index作为key可能会引发的问题：</p> <p>（1）若对数据进行：逆序添加、逆序删除等破环顺序操作，会产生没有必要的真实DOM更新==>界面效果没问题，但效率低</p> <p>（2）如果结构中还包含输入类的DOM，会产生错误DOM错误==>界面有问题</p> <p><strong>实际开发中如何选择key</strong></p> <ol> <li>最好使用每条数据的<strong>唯一标识</strong>作为key，比如id、手机号、身份证号、学号等唯一值</li> <li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的</li> </ol> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-789.htm">vue 实现简单表格分页功能</a></p>
                                        <p>下一个：<a href="/html/category/article-1053.htm">Spring Cloud中使用Feign实现负载均衡详解</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4514.htm">戴尔vostro不认硬盘（戴尔 不识别硬盘）</a></h4>
                <p>摘要：       本篇文章给大家谈谈戴尔vostro不认硬盘，以及戴尔 不识别硬盘对应的知识点，希望对各位有所帮助，不要忘了收藏本站喔。本文目录一览：1、戴尔笔记本电脑光驱位硬盘有时不能识别... </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1925.htm">Spring Ioc源码分析系列&#8211;Ioc的基础知识准备_在线工具</a></h4>
                <p>Spring Ioc源码分析系列--Ioc的基础知识准备  本系列文章代码基于Spring Framework 5.2.x  Ioc的概念 在Spring里，Ioc的定义为The IoC Contai</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3755.htm">Kotlin中的扩展函数（静态分派）</a></h4>
                <p>扩展函数  扩展函数可以在已有类中添加新的方法，不会对原类做修改   举例1  对Context进行扩展showToast方法，可以在Fragment、Activity、Application中弹出T</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1940.htm">vue2 自定义指令 实现全屏 、对话框拖拽</a></h4>
                <p>模块下载 用于全屏 npm i screenfull@5.1.0 -S   新建文件 新建directives.js文件，复制下面代码 import Vue from "vue";  // 全屏 im</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4124.htm">谈谈高并发系统的一些解决方案</a></h4>
                <p>本文结合项目经验，整理一份大纲，供参考。 常用指标   RT（Response Time）：响应时间。可能会衍生出 TP999、TP99、TP95、TP90等指标。一般在几毫秒到几百毫秒之间。   Q</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2239.htm">【面试普通人VS高手系列】HashMap是怎么解决哈希冲突的？</a></h4>
                <p>常用数据结构基本上是面试必问的问题，比如HashMap、LinkList、ConcurrentHashMap等。 关于HashMap，有个学员私信了我一个面试题说： “HashMap是怎么解决哈希冲突</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3756.htm">接口隔离原则（Interface Segregation Principle，ISP）</a></h4>
                <p>接口隔离原则（Interface Segregation Principle，ISP）要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法。  定义  客户端不应该</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4095.htm">Docker基础 — 36、CMD指令和ENTRYPOINT指令的区别</a></h4>
                <p>目录  1、CMD指令和ENTRYPOINT指令说明 2、CMD指令只有最后一条生效的原因 3、CMD指令演示 4、ENTRYPOINT指令演示 5、总结   CMD指令和ENTRYPOINT指令作用</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1351.htm">Rabbit MQ 怎么保证可靠性、幂等性、消费顺序</a></h4>
                <p>RabbitMQ如何保证消息的可靠性 RabbitMQ消息丢失的三种情况 生产者弄丢消息时的解决方法  方法一：生产者在发送数据之前开启RabbitMQ的事务(采用该种方法由于事务机制，会导致吞吐量下</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1321.htm">Spring Boot的依赖配置文件的解析</a></h4>
                <p>SpringBoot笔记-day01 在pom.xml中 &lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&l</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">28</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>