<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-167.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Python——import、time、os、random模块 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Python——import、time、os、random模块</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <blockquote> <p>什么是模块？<br /> 模块是 Python 程序架构的一个核心概念<br /> • 每一个以扩展名<strong>py</strong> 结尾的 Python 源代码文件都是一个模块；<br /> • 模块名同样也是一个<strong>标识符</strong>，需要符合标识符的命名规则；<br /> • 模块就好比是工具包，要想使用这个工具包中的工具，就需要先 导入import 这个模块；<br /> • 在模块中定义的 全局变量 、函数、类 都是提供给外界直接使用的工具。</p> </blockquote> <pre><code class="prism language-python"><span class="token comment"># 文件1：module01_fibonacci_返回小于n的数列值.py</span>  gl_num<span class="token operator">=</span><span class="token number">100</span><span class="token keyword">def</span><span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""生成值小于 n 的斐波那契数列"""</span>     a<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token keyword">while</span> a<span class="token operator">&lt;</span> n<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>         a<span class="token punctuation">,</span> b<span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span><span class="token function">prt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是模块1"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"1-{n}范围内的斐波那契数列为："</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python"><span class="token comment"># 文件2：module02_fibonacci_返回n个数.py</span>  gl_num<span class="token operator">=</span><span class="token number">100</span><span class="token keyword">def</span><span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""生成 n 个斐波那契数列的值"""</span>     a<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token keyword">for</span> i<span class="token keyword">in</span><span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>         a<span class="token punctuation">,</span> b<span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span><span class="token function">prt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是模块2"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"前{n}个斐波那契数列为："</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python"><span class="token comment"># 在另一个文件中导入 module01 和 module02</span><span class="token keyword">import</span> module01_fibonacci_返回小于n的数列值<span class="token keyword">import</span> module02_fibonacci_返回n个数<span class="token keyword">print</span><span class="token punctuation">(</span>module01_fibonacci_返回小于n的数列值<span class="token punctuation">.</span>gl_num<span class="token punctuation">)</span><span class="token comment">#  调用module01 中的全局变量 gl_num1</span><span class="token keyword">print</span><span class="token punctuation">(</span>module02_fibonacci_返回n个数<span class="token punctuation">.</span>gl_num<span class="token punctuation">)</span><span class="token comment">#  调用module02 中的全局变量 gl_num2</span>  module01_fibonacci_返回小于n的数列值<span class="token punctuation">.</span>prt<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> module01_fibonacci_返回小于n的数列值<span class="token punctuation">.</span>fib<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment">#  调用module01 中的函数 fib1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span> module02_fibonacci_返回n个数<span class="token punctuation">.</span>prt<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> module02_fibonacci_返回n个数<span class="token punctuation">.</span>fib<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment">#  调用module02 中的函数 fib2</span></code></pre> <p>需要在同一级文件，在 第三个程序mo1使用 import 导入 文件1：module01_fibonacci_返回小于n的数列值.py 、文件2：module02_fibonacci_返回n个数.py 执行mo1 才会出现以下成果<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/d2fa37fe0c0844c0e40849676eaca061.jpg" alt="Python——import、time、os、random模块"></p> <blockquote> <p>cpython-37 表示 Python 解释器的版本<br /> 这个 pyc 文件是由 Python 解释器将 模块的源码 转换为字节码，<strong>.pyc</strong>表示程序已经编译过</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/0a778840ad2979891818dbdae57aa6cb.jpg" alt="Python——import、time、os、random模块"></p> <blockquote> <p>使用 as 指定模块的别名 如果在开发过程中需要导入一些名称较长的模块，那么可使用as为这些模块起别名 import 模块名 as 别名<br /><strong>注意</strong>：模块别名 应该符合 大驼峰命名法（首字母大写）<br /> import module01_fibonacci_返回小于n的数列值 as FibMod</p> </blockquote> <pre><code class="prism language-python"><span class="token keyword">import</span> module01_fibonacci_返回小于n的数列值<span class="token keyword">as</span> FibMod<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"模块1中的全局变量："</span><span class="token punctuation">,</span> FibMod<span class="token punctuation">.</span>gl_num<span class="token punctuation">)</span> FibMod<span class="token punctuation">.</span>prt<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> FibMod<span class="token punctuation">.</span>fib<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></code></pre> <blockquote> <p>语法：from 模块名 import 工具名 优点：导入之后，不需要 通过 模块名，可以直接使用 模块提供的工具<br /> 支持一次导入多个函数、类、变量等，函数与函数之间使用逗号隔开。</p> </blockquote> <pre><code class="prism language-python"><span class="token keyword">from</span> module01_fibonacci_返回小于n的数列值<span class="token keyword">import</span> fib<span class="token punctuation">,</span>prt prt<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> fib<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''注意： 如果 两个模块，存在 同名的函数，那么 后导入模块的函数，会 覆盖掉先导入的函数。 解决方法可以用 as 关键字 给其中一个工具起一个别名 '''</span><span class="token keyword">from</span> module01_fibonacci_返回小于n的数列值<span class="token keyword">import</span> fib<span class="token punctuation">,</span> prt<span class="token keyword">from</span> module02_fibonacci_返回n个数<span class="token keyword">import</span> fib<span class="token punctuation">,</span> prt<span class="token comment"># 后导入的同名函数覆盖之前导入的函数</span>  prt<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> fib<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre> <p>利用通配符“*”可使用from…import…导入模块中的全部内容，语法格式如下：from 模块名 import *</p> <p><strong>小结</strong>：虽然通过“from 模块名 import …”方式可简化模块中内容的引用，但可能会出现函数重名的问题。因此，相对而言使用import语句导入模块更为安全。</p> <p><strong>模块位置搜索顺序<br /> 当导入一个模块时，python解释器对模块位置的搜索顺序为：</strong></p> <p>（1）当前目录，如果有就直接导入<br /> （2）如果没有，再搜索Python PATH环境变量下的每个目录<br /> （3）Python 中每一个模块都有一个内置属性<strong>file</strong> 可以 查看模块 的 完整路径<br /> （4）模块搜索路径存储在 sys 模块中的 sys.path变量中。</p> <pre><code class="prism language-python"><span class="token comment"># 内置属性 __file__ 查看模块的完整路径</span><span class="token keyword">import</span> module01_fibonacci_返回小于n的数列值<span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>module01_fibonacci_返回小于n的数列值<span class="token punctuation">.</span>__file__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>__file__<span class="token punctuation">)</span><span class="token comment">#列举模块内容： dir (模块名)</span><span class="token comment">#返回一个排好序的字符串列表，内容是模块中定义的变量和函数。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># sys 模块中的 sys.path 搜索模块路径</span><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span></code></pre> <p>每一个.py文件都应该是可以被导入的<br /> 在导入文件时，文件中 所有没有任何缩进的代码 都会被执行一遍！<br /> 这就会出现测试代码本来仅在模块内使用，然而被导入到其他文件中。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/b23ab23d9b6dd100e1a2b127905fe813.jpg" alt="Python——import、time、os、random模块"><br /><strong>如何把测试代码仅在模块内使用，不被导入到其他文件中？</strong><br /><strong>_name _ 属性可以做到！！</strong></p> <p>如果 是被其他文件导入的，_<em>name</em>_ 就是<strong>模块名</strong><br /><strong>如果 是当前执行的程序 _<em>name</em>_ 会等于 _<em>main</em>_</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/6164933b83d26c12a2030cbfd27d561c.jpg" alt="Python——import、time、os、random模块"><br /> 在很多 Python 文件中都会看到以下格式的代码：</p> <pre><code class="prism language-python"><span class="token comment"># 导入模块</span><span class="token comment"># 定义全局变量</span><span class="token comment"># 定义类</span><span class="token comment"># 定义函数</span><span class="token comment"># 在代码的最下方</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># ...</span><span class="token keyword">pass</span><span class="token comment"># 根据 __name__ 判断是否执行下方代码</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> <h2><a id="time__153" rel="nofollow"></a>time 模块</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/6a7a7e565b0941bfff6ff3482c6af9d3.jpg" alt="Python——import、time、os、random模块"></p> <pre><code class="prism language-python"><span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---start---"</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 休眠2秒</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-- end---"</span><span class="token punctuation">)</span></code></pre> <h2><a id="os_162" rel="nofollow"></a>os模块</h2> <p>提供了访问操作系统服务的功能，该模块中常用函数如下表所示。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/4a95a46f494792f11b851615942d069e.jpg" alt="Python——import、time、os、random模块"></p> <h2><a id="random_166" rel="nofollow"></a>random模块</h2> <p>随机数模块，该模块中定义了多个可产生各种随机数的函数。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220904/b9372102e04365f1d876ff5537c5e474.jpg" alt="Python——import、time、os、random模块"></p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-166.htm">.NET性能优化-你应该为集合类型设置初始大小</a></p>
                                        <p>下一个：<a href="/html/category/article-168.htm">vue proxyTable的跨域中pathRewrite配置方式_vue.js</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-229.htm">Docker提交镜像-数据卷-可视化</a></h4>
                <p>在熟悉完Docker的安装及基本命令使用之后，我们开始学习下Docker的进阶操作：包括但不限于新建Docker镜像，数据卷的挂载，以及Docker的可视化等。 Docker提交镜像 启动镜像 我们先</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-240.htm">SpringBoot配置跨域Cors</a></h4>
                <p>01、同源策略 同源策略[same origin policy]是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。 同源策略是浏览器安全的基石。  什么是源 源[or</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-227.htm">Spring Boot四大神器之CLI</a></h4>
                <p>目录             1. Spring Boot CLI简介： 2. 安装CLI:   手动安装：   3. 运行Groovy脚本 4. CLI运行原理说明：（CLI帮我们做了什么？）   </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-259.htm">游戏开发设计模式：单例模式</a></h4>
                <p>一、单例模式  文章目录  一、单例模式     1.1 单例模式总结介绍   1.1.1什么是单例模式 1.1.2单例模式分类 1.1.3单例类特点 1.1.4如何保证线程安全？   1.2 单例模</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-235.htm">lombok和JPA的死递归</a></h4>
                <p>这是一个Bug JPA我觉得是一个封装的很棒的框架，至于说很臃肿这个事，我觉得在需求需要很多复杂查询的时候，不适合用JPA。因为它的封装太棒了，以致于增强了表和实体类之间的耦合。不过在一些简单查询的部</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-214.htm">Spring Boot 分层构建 Docker 镜像实战</a></h4>
                <p>系统环境：   Docker 版本：19.03.13   Open JDK 基础镜像版本：openjdk:8u275   私有的 Harbor 镜像仓库：自建 Harbor 私库   项目 Githu</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-224.htm">jackson   json对象、实体类相互转换</a></h4>
                <p>json对象转换为实体类，使用jackson 进行jsonObject、实体类对象转换。 首先导入依赖 &lt;dependency&gt;     &lt;groupId&gt;com.faster</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-254.htm">图像处理学习笔记——BMP图片详解</a></h4>
                <p>一、位图和调色板的概念  1.位图（Bitmap）： 例如我们常说的屏幕分辨率为 640*480，刷新频率为70Hz，意思是说每行要扫描 640 个象素，一共有 480 行，每秒重复扫描屏幕 70 次</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-262.htm">Python 认识列表和元组</a></h4>
                <p>列表和元组，都是一个可以放置任何数据类型的有序集合。   列表的特性 动态的（mutable）：长度大小不固定，可以随意地增加、删减或者改变元素。 会修改原来列表中的元素，而不会创建新的列表。 # 新</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-209.htm">pandas高阶应用</a></h4>
                <p>1、时间序列相关操作 pd的date_range中的基本时间序列频率     Alias   Description（偏移量类型）   说明     B   business day frequenc</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">24</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>