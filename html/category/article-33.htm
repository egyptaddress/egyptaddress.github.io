<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-33.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>MySQL使用索引优化性能_Mysql - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">MySQL使用索引优化性能_Mysql</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">1.索引问题</a></li> <li><a href="#_label1" rel="nofollow">2.索引的存储分类</a></li> <li><a href="#_label2" rel="nofollow">3.如何使用索引</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_2_0" rel="nofollow">3.1使用索引</a></li> <li><a href="#_lab2_2_1" rel="nofollow">3.2存在索引但不使用索引</a></li> </ul> <li><a href="#_label3" rel="nofollow">4.查看索引使用情况</a></li> <ul class="second_class_ul"></ul> <li><a href="#_label4" rel="nofollow">5.两个简单实用的优化方法</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_4_2" rel="nofollow">5.1定期分析表和检查表</a></li> <li><a href="#_lab2_4_3" rel="nofollow">5.2定期优化表</a></li> </ul> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>1.索引问题</h2> <p>索引是数据库优化中最常用也是最重要的手段之一，通过索引通常可以帮助用户解决大多数 的SQL性能问题。本章节将对MySQL中的索引的分类、存储、使用方法做详细的介绍。</p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>2.索引的存储分类</h2> <p>MyISAM存储引擎的表数据和索引是自动分开存储的，各自是独立的一个文件；InnoDB存储引擎的表数据和索引是存储在同一个表空间里面，但可以有多个文件组成。MySQL中索引的存储类型目前只有两种（BTREE和HASH），具体和表的存储引擎相关：MyISAM和InnoDB存储引擎都只支持BTREE索引；MEMORY/HEAP存储引擎可以支持HASH和BTREE索引。MySQL目前不支持函数索引，但是能对列的前面某一部分进索引，例如上章节库存表goods_stock.LotNO批次字段，可以只取Model的前4个字符进行索引，这个特性可以大大缩小索引文件的大小，我们在设计表结构的时候也可以对文本列根据此特性进行灵活设计。下面是创建前缀索引的一个例子：</p> <div class="ay1code"> <pre class="brush:sql;">EXPLAIN SELECT * FROM goods_stock WHERE LotNO LIKE '2021%';</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/61cd50576fd0837bd43b86ac424b7bbe.jpg"></p> <div class="ay1code"> <pre class="brush:sql;">-- 创建前缀索引  CREATE INDEX idx_stock_2 ON goods_stock (LotNO(4));</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/a0cd7a6293a52054223268fd94c8ef53.jpg"></p> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>3.如何使用索引</h2> <p>索引用于快速找出在某个列中有一特定值的行。对相关列使用索引是提高SELECT操作性能的最佳途径。查询要使用索引最主要的条件是查询条件中需要使用索引关键字，如果是多列索引，那么只有查询条件使用了多列关键字最左边的前缀时，才可以使用索引，否则将不能使用索引。</p> <p class="maodian"><a name="_lab2_2_0" rel="nofollow"></a></p> <h3>3.1使用索引</h3> <p>在MySQL中，下列几种情况下有可能使用到索引。</p> <p>对于创建的多列索引，只要查询的条件中用到了最左边的列，索引一般就会被使用， 举例说明如下：</p> <div class="ay1code"> <pre class="brush:sql;">-- 首先在库存表goods_stock按Model，Brand的顺序创建一个复合索引  CREATE INDEX idx_stock_1 ON goods_stock (Model,Brand);</pre> </div> <p>然后按Model进行表查询，具体命令如下：</p> <div class="ay1code"> <pre class="brush:sql;">EXPLAIN SELECT * FROM goods_stock WHERE Model='LM358DT';</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/642ea702aec1cf214e547fb153241ae9.jpg"></p> <p>可以发现即便where条件中不是用Model与Brand字段的组合条件，索引仍然能用到，这就是索引的前缀特性（按照索引列顺序查询）。但是如果只按Brand条件查询表，那么索引就不会被用到，具体如下：</p> <div class="ay1code"> <pre class="brush:sql;">EXPLAIN SELECT * FROM goods_stock WHERE Brand='TI';</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/a8973531aa42a01dba6a08f82fd1735a.jpg"></p> <p>对于使用like的查询，后面如果是常量并且只有％号不在第一个字符，索引才可能会被使用，来看下面两个执行计划：</p> <div class="ay1code"> <pre class="brush:sql;">EXPLAIN SELECT * FROM goods_stock WHERE Model LIKE '%LM358';</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/b0f1738c05a43ec6d0d9623b09c8db41.jpg"></p> <div class="ay1code"> <pre class="brush:sql;">EXPLAIN SELECT * FROM goods_stock WHERE Model LIKE 'LM358%';</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/4d780a681f041e8f3f9d85a4bd1cef4c.jpg"></p> <p>可以发现第一个SQL没有使用索引，而第二个SQL就能够使用索引，区别就在于“%”的位置不同，前者把“%”放到第一位就不能用到索引，而后者没有放到第一位就使用了索引。另外，如果如果like后面跟的是一个列的名字，那么索引也不会被使用。如果对大的文本进行搜索，使用全文索引而不要使用like ‘%...%’。</p> <p>如果列名是索引，使用column_name is null时候将会使用索引。如下例中查询LotNO为null的记录时候就会用到索引：</p> <div class="ay1code"> <pre class="brush:sql;">EXPLAIN SELECT * FROM goods_stock WHERE LotNO IS NULL;</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/ce23d5e0abb018b5929f0e9e1882e522.jpg"></p> <p class="maodian"><a name="_lab2_2_1" rel="nofollow"></a></p> <h3>3.2存在索引但不使用索引</h3> <p>在下列情况下，虽然存在索引，但是MySQL并不会使用相应的索引。</p> <p>如果MySQL估计使用索引比全表扫描更慢，则不使用索引。例如如果列 key_part1 均匀分布在 1 和 100 之间，下列查询中使用索引就不是很好：</p> <div class="ay1code"> <pre class="brush:sql;">SELECT * FROM table_name where key_part1 &gt; 1 and key_part1 &lt; 90;</pre> </div> <p>如果使用MEMORY/HEAP表并且where条件中不使用“=”进行索引列，那么不会用到索引。HEAP表只有在“=”的条件下才会使用索引。<br />用or分割开的条件，如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及到的索引都不会被用到，例如：</p> <div class="ay1code"> <pre class="brush:sql;">SHOW INDEX FROM goods_stock;</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/857a548bec248fa829de26bd8f537565.jpg"></p> <p>通过命令可以看到goods_stock库存表有两个索引，然后我们再执行如下语句看是否使用索引：</p> <div class="ay1code"> <pre class="brush:sql;">EXPLAIN SELECT * FROM goods_stock WHERE LotNO='20200821' OR PackageUnit='包';</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/b96d57ec9395a59f6ecd7ece10cbce3d.jpg"></p> <p>可见虽然在LotNO这个列上存在索引idx_stock_2，但是这个SQL语句并没有用到这个索引，原因就是or中有一个条件中的列没有索引。</p> <p>如果列类型是字符串，那么一定记得在where条件中把字符常量值用引号引起来，否则即便这个列上有索引，MySQL也不会用到的，因为MySQL默认把输入的常量值进行转换以后才进行检索，请看如下例子：</p> <div class="ay1code"> <pre class="brush:sql;">DESC goods_stock;</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/bcce9c6464136efd50a22e2f3624632f.jpg"></p> <p>通过DESC命令我们可以看到goods_stock库存表中的LotNO字段是字符型，如果我们在SQL语句中的LotNO字段加入一个数值型为20200821的条件值，因此即便在LotNO上有索引，MySQL也不能正确地用上索引，而是继续进行全表扫描，具体如下：</p> <div class="ay1code"> <pre class="brush:sql;">EXPLAIN SELECT * FROM goods_stock WHERE LotNO=20200821;</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/aecded1cd93cf74c663b6dd524650d44.jpg"></p> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>4.查看索引使用情况</h2> <p>如果索引正在工作，Handler_read_key的值将很高，这个值代表了一个行被索引值读的次数，很低的值表明增加索引得到的性能改善不高，因为索引并不经常使用。Handler_read_rnd_next的值高则意味着查询运行低效，并且应该建立索引补救。这个值的含义是在数据文件中读下一行的请求数。如果正进行大量的表扫描，Handler_read_rnd_next的值较高，则通常说明表索引不正确或写入的查询没有利用索引。可以先刷新状态再查询，具体如下：</p> <div class="ay1code"> <pre class="brush:sql;">FLUSH STATUS;  SHOW STATUS LIKE 'Handler_read%';</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/23081564b52fab87197d1d07222de41b.jpg"></p> <p>参数解释如下：</p> <ul> <li>Handler_read_first：此选项表明SQL是在做一个全索引扫描，注意是全部，而不是部分，所以说如果存在WHERE语句，这个选项是不会变的。</li> <li>Handler_read_key：此选项数值如果很高，MySQL高效的使用了索引，一切运转良好。</li> <li>Handler_read_next：此选项表明在进行索引扫描时，按照索引从数据文件里取数据的次数。</li> <li>Handler_read_prev：此选项表明在进行索引扫描时，按照索引倒序从数据文件里取数据的次数，一般就是ORDER BY … DESC。</li> <li>Handler_read_rnd：就是查询直接操作了数据文件，很多时候表现为没有使用索引或者文件排序。</li> <li>Handler_read_rnd_next：此选项值较高时候，则通常说明表索引不正确或写入的查询没有利用索引。</li> </ul> <p class="maodian"><a name="_label4" rel="nofollow"></a></p> <h2>5.两个简单实用的优化方法</h2> <p>对于大多数开发人员来说，可能只希望掌握一些简单实用的优化方法，对于更多更复杂的优化，更倾向于交给专业DBA来做。本小节将向大家介绍两个简单适用的优化方法。</p> <p class="maodian"><a name="_lab2_4_2" rel="nofollow"></a></p> <h3>5.1定期分析表和检查表</h3> <p>分析表的语法如下：</p> <div class="ay1code"> <pre class="brush:sql;">ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</pre> </div> <p>本语句用于分析和存储表的关键字分布，分析的结果将可以使得系统得到准确的统计信息，使得SQL能够生成正确的执行计划。如果用户感觉实际执行计划并不是预期的执行计划，执行一次分析表可能会解决问题。在分析期间，使用一个读取锁定对表进行锁定。这对于MyISAM, BDB和InnoDB表有作用。对于MyISAM表，本语句与使用myisamchk -a相当，下例中对goods_stock表做了表分析：</p> <div class="ay1code"> <pre class="brush:sql;">ANALYZE TABLE goods_stock;</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/c7e7cb11aa7bb486cccf658f02e48765.jpg"></p> <p>检查表的语法如下：</p> <div class="ay1code"> <pre class="brush:sql;">CHECK TABLE tbl_name [, tbl_name] ... [option] ... option = {QUICK | FAST | MEDIUM | EXTENDED | CHANGED}</pre> </div> <p>检查表的作用是检查一个或多个表是否有错误。CHECK TABLE对MyISAM和InnoDB表有作用。对于MyISAM表，关键字统计数据被更新，例如：</p> <div class="ay1code"> <pre class="brush:sql;">CHECK TABLE goods_stock;</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/dbe5403940372f8e693f6d25fa7f21ec.jpg"></p> <p>CHECK TABLE也可以检查视图是否有错误，比如在视图定义中被引用的表已不存在，举例如下：</p> <p>（1）首先我们创建一个表。</p> <div class="ay1code"> <pre class="brush:sql;">CREATE TABLE test  (    ID INT(11)  );</pre> </div> <p>（2）再创建一个视图。</p> <div class="ay1code"> <pre class="brush:sql;">CREATE VIEW test_view AS SELECT * FROM test;</pre> </div> <p>（3）然后CHECK一下该视图，发现没有问题。</p> <div class="ay1code"> <pre class="brush:sql;">CHECK TABLE test_view;</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/5b6745c9ab9040d629573b383c8fd179.jpg"></p> <p>（4）现在删除掉视图依赖的表。</p> <div class="ay1code"> <pre class="brush:sql;">DROP TABLE test;</pre> </div> <p>（5）再来CHECK一下刚才的视图，发现报错了。</p> <div class="ay1code"> <pre class="brush:sql;">CHECK TABLE test_view;</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/4d211c2e98e8fb24c3b0ea17e011a47e.jpg"></p> <p class="maodian"><a name="_lab2_4_3" rel="nofollow"></a></p> <h3>5.2定期优化表</h3> <p>优化表的语法如下：</p> <div class="ay1code"> <pre class="brush:sql;">OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</pre> </div> <p>如果已经删除了表的一大部分，或者如果已经对含有可变长度行的表（含有VARCHAR、BLOB或TEXT列的表）进行了很多更改，则应使用OPTIMIZE TABLE 命令来进行表优化。这个命令可以将表中的空间碎片进行合并，并且可以消除由于删除或者更新造成的空间浪费，但OPTIMIZE TABLE命令只对MyISAM、BDB和InnoDB表起作用。以下例子显示了优化goods_stock库存表的过程：</p> <div class="ay1code"> <pre class="brush:sql;">-- 先查看下goods_stock库存表是什么表类型  SHOW TABLE STATUS LIKE 'goods_stock%';</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/84fbf6a62d07be7b8a3f88997165bc9e.jpg"></p> <div class="ay1code"> <pre class="brush:sql;">OPTIMIZE TABLE goods_stock;</pre> </div> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220420/db8ce1d3533c256090941ac5886b8d28.jpg"></p> <p>注意：ANALYZE、CHECK、OPTIMIZE执行期间将对表进行锁定，因此一定注意要在数据库不繁忙的情况下执行相关的操作。</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-32.htm">Go语学习笔记 &#8211; gorm使用 &#8211; 表增删改查 | Web框架Gin（八）</a></p>
                                        <p>下一个：<a href="/html/category/article-34.htm">iOS全埋点解决方案-UITableView和UICollectionView点击事件</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-229.htm">基于docker部署Oracle 19c的详细记录_docker</a></h4>
                <p>目录  一. 拉取Oracle 19c镜像 二. 查看镜像 三. 创建Oracle 19c镜像的容器  3.1创建目录 3.2 创建实例 3.3 查看日志  四、 修改密码  五、连接数据库  5.1</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-217.htm">Java 集合框架ArrayList 储存自定义数组</a></h4>
                <p>package LinkedList;  import java.util.ArrayList; import java.util.Iterator;  import p.bean.Person;  </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-203.htm">C++逆向 可变参数Hook</a></h4>
                <p>目录  C++逆向 可变参数Hook  0x00 前言： 0x01 C++可变参数：  可变参数简介 可变参数代码实战   0x02 逆向分析C++可变参数原理 0x03 printf Hook实战 </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-211.htm">MaxCompute SQL函数详解 ODPS SQL函数详解之日期相关函数</a></h4>
                <p>MaxCompute SQL函数详解 ODPS SQL函数详解 日期函数  to_date函数  返回类型：datetime   语法：to_date(类型 参数1,类型 参数2); 	 to_dat</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-235.htm">SpringCloud系列之五&#8212;集中配置组件Config+消息总线Bus</a></h4>
                <p>文章目录        前言 集中配置组件SpringCloudConfig   1.SpringCloudConfig 简介 2.配置客户端 3.配置服务端 4.测试   消息总线 SpringCl</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-209.htm">C#中检查null的语法糖_在线工具</a></h4>
                <p>今天看到已经更新了devblogs，新增的C# 11的!!（用于检查null的语法）经过非常长的讨论，最后取消了。然后我又想起来null检查，这个可以说一说。 函数参数null检查 传统写法 写一个函</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-261.htm">docker存储路径修改</a></h4>
                <p>docker修改对应的存储路径 修改daemon.json的内容不进行复述。 假设你已经编辑好/etc/docker/daemon.json文件的graph配置，要将其从d01修改到d02 {   "</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-233.htm">Spring Security 一键接入验证码登录和小程序登录</a></h4>
                <p>最近实现了一个多端登录的Spring Security组件，用起来非常丝滑，开箱即用，可插拔，而且灵活性非常强。我觉得能满足大部分场景的需要。目前完成了手机号验证码和微信小程序两种自定义登录，加上默认</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-219.htm">正则表达式-匹配ip及rtsp</a></h4>
                <p>IP地址是指互联网协议地址（英语：Internet Protocol Address，又译为网际协议地址），是IP Address的缩写。IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-242.htm">SpringSecurity核心服务详解</a></h4>
                <p>现在我们对 Spring Security 体系结构及其核心类有了一个高层次的概述，让我们更仔细地看一两个核心接口及其实现，特别是AuthenticationManager&nbsp;、UserDet</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>