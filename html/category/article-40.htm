<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-40.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>SpringMVC学习笔记&#8211;文件上传与MultipartResolver - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">SpringMVC学习笔记&#8211;文件上传与MultipartResolver</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="htmledit_views">                     <strong>要在基于SpringMVC的Web应用程序中通过表单上传文件，那么MultipartResolver将是在服务器端处理文件上传的主要组件<br /></strong> </p> <p><strong>&nbsp;multipart/form-data编码方式支持基于表单的文件上传。</strong></p> <p><strong>使用MultipartResolver进行文件上传的简单分析：<br /></strong></p> <p><strong>MultipartResolver的接口定义如下：<br /></strong></p> <p><strong></strong></p> <pre><code class="language-java">public interface MultipartResolver{     boolean isMultipart(HttpServletRequest request); 	MultipartHttpsServletRequest resolverMultipart(HttpServletRequest request)throws MultipartException; 	void cleanupMultipart(MultipartHttpServletRequest request);  }</code></pre> <p><span style="font-family:KaiTi_GB2312">MultipartResolver 位于 HandlerMapping 之前，请求一来就交由它来处理。当 Web 请求到达 DispatcherServlet 并等待处理的时候，<br /> DispatcherServlet 首先会检查能否从自的 WebApplicationContext 中找到一个名称为 multipartResolver(由 DispatcherServlet 的<br /> 常量 MULTIPART_RESOLVER_BEAN_NAME 所决定)的 MultipartResolver 实例。如果能够获得一个 MultipartResolver 的实例，DispatcherServlet&nbsp;<br /> 将调用 MultipartResolver 的 isMultipart(request) 方法检查当前 Web 请求是否为 multipart类型。如果是，DispatcherServlet 将调用 MultipartResolver 的<br /> resolveMultipart(request) 方法，对原始 request 进行装饰，并返回一个 MultipartHttpServletRequest 供后继处理流程使用(最初的 HttpServletRequest 被偷梁<br /> 换柱成了 MultipartHttpServletRequest)，否则，直接返回最初的 HttpServletRequest</span><br />  </p> <p><strong><span style="font-family:KaiTi_GB2312">SpringMVC框架内为MultipartResolver提供了两个可用的实现类，即org.springframework.web.multipartcommons.CommonsMultipartResolver<br /> 和org.springframework.web.multipart.cos.CosMultipartResolver。前者使用CommonsFileUpload类库实现，后者则使用Oreilly Cos类库实现<br /> 我们选择使用CommonsFileUpload进行文件上传，需要在DispatcherServlet的WebApplicationContext中添加bean定义如下：</span><br /></strong></p> <p><strong><span style="font-family:KaiTi_GB2312"></span></strong></p> <pre><code class="language-html">&lt;bean id="multipartResolver" 		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" 		p:maxUploadSize="1000000"&gt; &lt;bean/&gt;</code></pre> <p> CommonsMultipartResolver将负责分析当前multipart请求，然后将分析的结果附着到要返回的MultipartHttpservletRequest实例上。当后继处理<br /> <br /> 流程的controller处理web请求的时候，就可以使用特定的MultipartHttpsServletRequest进行上传文件的获取和处理。<br />  </p> <p><strong><span style="font-family:KaiTi_GB2312">但MultipartResolver返回MultipartHttpServlet给后继处理流程，并且后继处理流程中的组件也使用MultipartHttpServletRequest处理完相应的Web<br /> 请求，DispatcherServlet将保证调用MultipartResolver的CleanupMultipart()方法，释放处理文件上传过程中所占用的系统资源，这样，整个文件上传<br /> 的生命周期即告结束。<br /></span></strong></p> <p><strong><span style="font-family:KaiTi_GB2312">下面来介绍一下我实现的文件上传的例子<br /></span></strong></p> <p><strong><span style="font-family:KaiTi_GB2312"><br /></span></strong></p> <p><strong><span style="font-family:KaiTi_GB2312">要实现文件上传，首先添加一个MultipartResolver的实例到DispatcherServlet的WebApplicationContext中。<br /></span></strong></p> <p><strong><span style="font-family:KaiTi_GB2312"></span></strong></p> <pre><code class="language-html">&lt;bean id="multipartResolver" 		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" 		p:maxUploadSize="1000000"&gt; 	&lt;/bean&gt;</code></pre> <p> 为了使用SimpleFormController专门处理表单的提交，我们需要为数据绑定提供一个Command对象，定义如下：<br />  </p> <p><strong><span style="font-family:KaiTi_GB2312"></span></strong></p> <pre><code class="language-java">public class FileUploadingCommand { 	private byte[] fileToUpload; 	private String comment; 	public byte[] getFileToUpload() { 		return fileToUpload; 	} 	public void setFileToUpload(byte[] fileToUpload) { 		this.fileToUpload = fileToUpload; 	} 	public String getComment() { 		return comment; 	} 	public void setComment(String comment) { 		this.comment = comment; 	} 	@Override 	public String toString() { 		return new ToStringBuilder(this).append("fileToUpload",fileToUpload).append("comment",comment).toString(); 	} }</code></pre> <p> 定义的最终的Controller实现类如下：<br />  </p> <p><strong><span style="font-family:KaiTi_GB2312"></span></strong></p> <pre><code class="language-java">public class FileUploadFormController extends SimpleFormController{     @Override 	protected void doSubmitAction(Object command) throws Exception { 		FileUploadingCommand commandBean=(FileUploadingCommand)command; 		byte[] fileContent=commandBean.getFileToUpload(); 		String comment=commandBean.getComment(); 		FileUtils.writeByteArrayToFile(new File("zhsi"), fileContent); 	} 	 	@Override 	protected void initBinder(HttpServletRequest request, 			ServletRequestDataBinder binder) throws Exception { 		super.initBinder(request, binder); 		binder.registerCustomEditor(byte[].class, new ByteArrayMultipartFileEditor()); 		 	} }</code></pre> <p> 为了在数据绑定过程数据能够成功转型，我们需要为DataBinder添加相应的自定义PropertyEditor实现，覆写SimpleFormController的initBinder()<br /> <br /> 方法可以达到目的。<br />  </p> <p><strong><span style="font-family:KaiTi_GB2312">下面是SpringMVC.xml配置文件：<br /></span></strong></p> <p><strong><span style="font-family:KaiTi_GB2312"></span></strong></p> <pre><code class="language-html">&lt;bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt; 		&lt;property name="mappings"&gt; 			&lt;props&gt; 				&lt;prop key="login.do"&gt;login&lt;/prop&gt; 			&lt;/props&gt; 		&lt;/property&gt; 	&lt;/bean&gt; 	&lt;bean name="login" class="com.web.springMVC.controller.FileUploadFormController"&gt;  		&lt;property name="commandName"&gt; 			&lt;value&gt;command&lt;/value&gt; 		&lt;/property&gt; 		&lt;!-- 这里直接实现了将请求参数绑定到对象上 --&gt; 		&lt;property name="commandClass"&gt; 		&lt;value&gt;com.web.springMVC.model.FileUploadingCommand&lt;/value&gt; 		&lt;/property&gt; 		&lt;property name="successView" value="success"&gt;&lt;/property&gt;  	&lt;bean/&gt; 	&lt;bean id="multipartResolver" 		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" 		p:maxUploadSize="1000000"&gt; 	&lt;/bean&gt; 	&lt;bean id="viewResolver" 		class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; 		&lt;property name="prefix" value="/WEB-INF/jsp/" /&gt;  &lt;!-- 默认放在WebRoot下 --&gt; 		&lt;property name="suffix" value=".jsp" /&gt;  	&lt;/bean&gt;</code></pre> <p> 页面login.jsp：<br />  </p> <p><strong><span style="font-family:KaiTi_GB2312"></span></strong></p> <pre><code class="language-html">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" 	pageEncoding="UTF-8"%&gt; &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 	&lt;form action="login.do" method="post" enctype="multipart/form-data"&gt; 		选择上传文件&lt;input name="fileToUpload" type="file"/&gt;&lt;br/&gt; 		文件说明&lt;textarea name="comment"&gt;&lt;/textarea&gt; 		&lt;input name="submit" type="submit" value="提交"/&gt; 	&lt;/form&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <p> 页面success.jsp</p> <p><strong><span style="font-family:KaiTi_GB2312"></span></strong></p> <pre><code class="language-html">&lt;body&gt; 	&lt;table&gt; 		&lt;tbody&gt; 			&lt;tr&gt; 				&lt;td&gt;User Info:&lt;/td&gt; 			&lt;/tr&gt; 			&lt;tr&gt; 				&lt;td&gt;&lt;c:out value="${command.comment}"&gt;&lt;/c:out&gt;&lt;/td&gt; 			&lt;/tr&gt; 		&lt;/tbody&gt; 	&lt;/table&gt; &lt;/body&gt;</code></pre> <p> 上述便可以实现简单的文件上传了</div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-39.htm">面试必问的8个CSS响应式单位,你知道几个？</a></p>
                                        <p>下一个：<a href="/html/category/article-41.htm">在Datatable，DataView和DataGridView中不显示重复的记录</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-235.htm">SpringCloud系列之五&#8212;集中配置组件Config+消息总线Bus</a></h4>
                <p>文章目录        前言 集中配置组件SpringCloudConfig   1.SpringCloudConfig 简介 2.配置客户端 3.配置服务端 4.测试   消息总线 SpringCl</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-259.htm">C ++程序查找n个数的GCD和LCM</a></h4>
                <p>这是找出n个数字的GCD和LCM的代码。两个或更多不都是零的整数的GCD或最大公除数是将每个整数相除的最大正整数。GCD也被称为最大公因数。 两个数字的最小公倍数(LCM)是两个数字的倍数的最小数字（</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-256.htm">Vue3项目中的骨架屏</a></h4>
                <p>实现场景:刚进入页面的时候,需要后端接口回传的数据,还没有回来,为了客户有更好的体验,需要设置骨架屏,效果图如下:  &nbsp;实现步骤: 1.设置通用组件骨架屏(可以设置的属性:高，宽，背景颜色，</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-240.htm">python神经网络使用Keras构建RNN训练_python</a></h4>
                <p>目录  Keras中构建RNN的重要函数  1、SimpleRNN 2、model.train_on_batch  全部代码     Keras中构建RNN的重要函数  1、SimpleRNN Sim</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-252.htm">Azure Virtual Desktop创建配置管理详解</a></h4>
                <p>一，引言 Azure 虚拟创面是一项 Azure 服务，可以让我们管理： 　　1）VDI（虚拟桌面基础架构） 　　2）云端的 RDSH：RDSH 是 RDS（远程桌面服务）中的一个角色。这些类型的服务</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-249.htm">Unity 内置渲染管线转URP</a></h4>
                <p>一、CG 替换 HLSL   未使用光照计算的shader升级后不做修改仍然可以使用，但是可能会不兼容SRP Batcher，所以仍然需要修改，使用了光照计算的shader必须要修改。   SubSh</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-209.htm">C#中检查null的语法糖_在线工具</a></h4>
                <p>今天看到已经更新了devblogs，新增的C# 11的!!（用于检查null的语法）经过非常长的讨论，最后取消了。然后我又想起来null检查，这个可以说一说。 函数参数null检查 传统写法 写一个函</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-224.htm">Asp.Net在线预览Word文档的解决方案与思路</a></h4>
                <p>前几天有个老项目找到我，有多老呢？比我工作年限都长，见到这个项目我还得叫一声前辈。 这个项目目前使用非常稳定，十多年了没怎么更新过，现在客户想加一个小功能：在线预览Word文档。 首先想到的是用第三方</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-250.htm">Springboot 设置过滤器以及重复读取request里的body</a></h4>
                <p>需求：request的content-type为applciation/json，进入controller之前需要把body中的参数取出来做一次处理，然后和hearder中的另一个参数做对比。 思路：</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-214.htm">SpringBoot实战数据访问整合Mybatis和Redis</a></h4>
                <p>前言 在开发中我们通常会对数据库的数据进行操作，SpringBoot对关系性和非关系型数据库的访问操作都提供了非常好的整合支持。SpringData是spring提供的一个用于简化数据库访问、支持云服</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>