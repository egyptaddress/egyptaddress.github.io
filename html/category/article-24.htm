<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-24.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>设计模式学习笔记状态模式及其实现 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">设计模式学习笔记状态模式及其实现</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<p>状态模式（State Pattern）指允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</p> <p>一般用来实现状态机，而状态机常用在游戏、工作流引擎等系统的开发中：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f4cad716ebc75b30c47ae89e8f385ed6.jpg" alt="设计模式学习笔记状态模式及其实现"></p> <p>有限状态机（Finite State Machine，FSM），状态机有三个组成部分：状态（State）、事件（Event）和动作（Action）。其中事件也叫作转移条件（Transition Condition）,事件主要用于触发状态的转移及动作的执行，动作不是必须的，也可能只转移状态，不执行任何动作。</p> <h2 id="一状态模式的介绍">一、状态模式的介绍</h2> <p>状态模式又名状态对象（Objects for States），它是一种对象行为型模式。它的解决思想是当控制一个对象状态转换的条件表达式过于复杂时，把相关“判断逻辑”提取出来，用各个不同的类进行表示，系统处于哪种情况、直接使用相应的状态类对象进行处理。</p> <h3 id="11-状态模式的结构">1.1 状态模式的结构</h3> <p>在状态模式的结构中，通过实现抽象状态类的具体状态类来定义多个状态，每个状态类仅实现自己的逻辑，上下文类负责切换状态。其结构类图如下所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b802cab023d82d6a2dfd652f064cfc90.jpg" alt="设计模式学习笔记状态模式及其实现"></p> <ul> <li><code>State</code>：抽象状态类，提供一个方法封装上下文对象的状态</li> <li><code>ConcreteState1、ConcreteState2</code>：具体状态类，继承抽象状态类，实现状态下的行为</li> <li><code>Context</code>：上下文类，负责对具体状态进行切换</li> <li><code>Client</code>：客户端，调用具体状态和上下文</li> </ul> <h3 id="12-状态模式的实现">1.2 状态模式的实现</h3> <p>首先是<strong>抽象状态类</strong>，具体代码如下：</p> <pre><code class="language-java">public abstract class State {     /**抽象业务方法，不同的具体状态可以有不同的实现*/     public abstract void handle(); }</code></pre> <p>其次是实现抽象状态类的<strong>具体状态类</strong>：</p> <pre><code class="language-java">public class ConcreteState1 extends State{      @Override     public void handle(Context context) {         System.out.println("进入ConcreteState1中~");         context.setState(this);     }      @Override     public String toString() {         return "concreteState1";     } } public class ConcreteState2 extends State{      @Override     public void handle(Context context) {         System.out.println("进入ConcreteState2中~");         context.setState(this);     }      @Override     public String toString() {         return "ConcreteState2";     } }</code></pre> <p>接下来是<strong>上下文类</strong>，维护当前状态，并负责具体状态的切换</p> <pre><code class="language-java">public class Context {      private State state;      //设置初始状态为null     public Context() {         state = null;     } 	//实现状态转换     public void setState(State state) {         this.state = state;     }      public State getState() {         return state;     } }</code></pre> <p><strong>客户端</strong>测试类</p> <pre><code class="language-java">public class Client {     public static void main(String[] args) {         Context context = new Context();         System.out.println("现在的状态是：" + context.getState());         System.out.println("---------------------------------");         State concreteState1 = new ConcreteState1();         concreteState1.handle(context);         System.out.println("现在的状态是：" + context.getState());         System.out.println("---------------------------------");         State concreteState2 = new ConcreteState2();         concreteState2.handle(context);         System.out.println("现在的状态是：" + context.getState());      } }</code></pre> <p>测试结果：</p> <pre><code>现在的状态是：null --------------------------------- 进入ConcreteState1中~ 现在的状态是：concreteState1 --------------------------------- 进入ConcreteState2中~ 现在的状态是：ConcreteState2</code></pre> <h2 id="二状态模式的应用场景">二、状态模式的应用场景</h2> <p>状态模式的应用比较广泛，比如游戏中角色状态的转换、公文审批中的流转等等。</p> <p>以下情况可以考虑使用状态模式：</p> <ul> <li>对象的行为依赖于它的某些属性值（状态），而且状态的改变将导致行为的变化</li> <li>代码中包含大量与对象状态有关的条件语句（if-else）,这些条件语句的出现会导致代码的可维护性和灵活性变差。</li> </ul> <h2 id="三状态模式实战">三、状态模式实战</h2> <p>本案例中模拟营销活动审核状态流转场景，在一个活动的上线中是需要多个层级进行审核才能上线的(案例来源于《重学Java设计模式》)。如下图中可以看到流程节点中包括各个状态到下一个状态扭转的关联条件：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4f01017212e09b6116c0fcca2466393d.jpg" alt="设计模式学习笔记状态模式及其实现"></p> <p>因此在审批过程中就难免会包含很多条件语句的判断，长此以往，随着状态数量的增加，会增加代码的可维护性和可读性。下面就利用状态模式来实现多状态的审批过程，先来看看状态模式模型的结构：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/798a1f04f1e8899359429bd8510e6829.jpg" alt="设计模式学习笔记状态模式及其实现"></p> <ul> <li><code>State</code>：状态抽象类，定义所有状态的操作接口</li> <li><code>CheckState、CloseState、DoingState...</code>：具体状态类，各种状态的具体逻辑实现</li> <li><code>StateHandler</code>：状态处理类，相当于之前结构中提到的上下文类，负责对状态流程进行统一处理</li> </ul> <h3 id="具体代码">具体代码</h3> <ol> <li><strong>基本活动信息</strong>和<strong>活动枚举状态</strong></li> </ol> <pre><code class="language-java">public class ActivityInfo {      private String activityId;     private String activityName;     private Enum&lt;Status&gt; status;     private Date beginTime;     private Date endTime;      //get\set\Constructor } public enum Status {     Editing,     Check,     Pass,     Refuse,     Doing,     Close,     Open }</code></pre> <ol start="2"> <li><strong>活动业务处理</strong></li> </ol> <pre><code class="language-java">public class ActivityService {      private static Map&lt;String, Enum&lt;Status&gt;&gt; statusMap = new ConcurrentHashMap&lt;&gt;();      public static void init(String activityId, Enum&lt;Status&gt; initStatus) {         ActivityInfo activityInfo = new ActivityInfo();         activityInfo.setActivityId(activityId);         activityInfo.setActivityName("测试活动");         activityInfo.setStatus(initStatus);         activityInfo.setBeginTime(new Date());         activityInfo.setEndTime(new Date());         statusMap.put(activityId, initStatus);     }      /**      * 查询活动信息      * @param activityId 活动ID      * @return 查询后的活动信息      */     public static ActivityInfo queryActivityInfo(String activityId) {         ActivityInfo activityInfo = new ActivityInfo();         activityInfo.setActivityId(activityId);         activityInfo.setActivityName("测试活动");         activityInfo.setStatus(statusMap.get(activityId));         activityInfo.setBeginTime(new Date());         activityInfo.setEndTime(new Date());         return activityInfo;     }      /**      * 查询活动状态      * @param activityId 活动ID      * @return 查询后的活动状态      */     public static Enum&lt;Status&gt; queryActivityStatus(String activityId) {         return statusMap.get(activityId);     }      public static synchronized void execStatus(String activityId, Enum&lt;Status&gt; beforeStatus, Enum&lt;Status&gt; afterStatus) {         /*如果前后两个状态相同，直接返回*/         if (!beforeStatus.equals(statusMap.get(activityId))) {             return;         }         /*反之更新statusMap*/         statusMap.put(activityId, afterStatus);     } }</code></pre> <p>2.<strong>活动返回格式</strong></p> <pre><code class="language-java">public class Result {      private String code;     private String info;          //get/set }</code></pre> <ol start="3"> <li><strong>抽象状态类</strong>和<strong>具体状态实现</strong></li> </ol> <pre><code class="language-java">public abstract class State {      /**提审*/     public abstract Result arraignment(String activityId, Enum&lt;Status&gt; currentStatus);     /**撤审*/     public abstract Result checkRevoke(String activityId, Enum&lt;Status&gt; currentStatus);     /**审核通过*/     public abstract Result checkPass(String activityId, Enum&lt;Status&gt; currentStatus);     /**拒审*/     public abstract Result checkRefuse(String activityId, Enum&lt;Status&gt; currentStatus);     /**关闭*/     public abstract Result close(String activityId, Enum&lt;Status&gt; currentStatus);     /**开启活动*/     public abstract Result open(String activityId, Enum&lt;Status&gt; currentStatus);     /**活动中*/     public abstract Result doing(String activityId, Enum&lt;Status&gt; currentStatus);  } public class CheckState extends State {     @Override     public Result arraignment(String activityId, Enum&lt;Status&gt; currentStatus) {         return new Result("0001", "提审后不能重复提审");     }      @Override     public Result checkRevoke(String activityId, Enum&lt;Status&gt; currentStatus) {         ActivityService.execStatus(activityId, Status.Check, Status.Editing);         return new Result("0000", "活动审核撤销回编辑");     }      @Override     public Result checkPass(String activityId, Enum&lt;Status&gt; currentStatus) {         ActivityService.execStatus(activityId, Status.Check, Status.Pass);         return new Result("0000", "活动审核通过");     }      @Override     public Result checkRefuse(String activityId, Enum&lt;Status&gt; currentStatus) {         ActivityService.execStatus(activityId, Status.Check, Status.Refuse);         return new Result("0000", "活动审核被拒绝");     }      @Override     public Result close(String activityId, Enum&lt;Status&gt; currentStatus) {         return new Result("0001", "活动审核后不能直接关闭");     }      @Override     public Result open(String activityId, Enum&lt;Status&gt; currentStatus) {         return new Result("0001", "活动审核后不能再开启");     }      @Override     public Result doing(String activityId, Enum&lt;Status&gt; currentStatus) {         return new Result("0001", "活动审核不通过无法进入活动中");     } } //下面依次是其他几个状态，较多省略</code></pre> <ol start="4"> <li><strong>状态处理类</strong>，相当于前面的上下文，负责进行状态转移</li> </ol> <pre><code class="language-java">public class StateHandler {      private Map&lt;Enum&lt;Status&gt;, State&gt; stateMap = new ConcurrentHashMap&lt;&gt;();      public StateHandler() {         stateMap.put(Status.Check, new CheckState());         stateMap.put(Status.Close, new CloseState());         stateMap.put(Status.Doing, new DoingState());         stateMap.put(Status.Refuse, new RefuseState());         stateMap.put(Status.Pass, new PassState());         stateMap.put(Status.Open, new OpenState());         stateMap.put(Status.Editing, new EditingState());     }      public Result arraignment(String activityId, Enum&lt;Status&gt; currentStatus) {         return stateMap.get(currentStatus).arraignment(activityId, currentStatus);     }      public Result checkPass(String activityId, Enum&lt;Status&gt; currentStatus) {         return stateMap.get(currentStatus).checkPass(activityId, currentStatus);     }      public Result checkRefuse(String activityId, Enum&lt;Status&gt; currentStatus) {         return stateMap.get(currentStatus).checkRefuse(activityId, currentStatus);     }      public Result checkRevoke(String activityId, Enum&lt;Status&gt; currentStatus) {         return stateMap.get(currentStatus).checkRevoke(activityId, currentStatus);     }      public Result close(String activityId, Enum&lt;Status&gt; currentStatus) {         return stateMap.get(currentStatus).close(activityId, currentStatus);     }      public Result open(String activityId, Enum&lt;Status&gt; currentStatus) {         return stateMap.get(currentStatus).open(activityId, currentStatus);     }      public Result doing(String activityId, Enum&lt;Status&gt; currentStatus) {         return stateMap.get(currentStatus).doing(activityId, currentStatus);     } }</code></pre> <p>5.<strong>测试类</strong></p> <pre><code class="language-java">public class ApiTest {      private Logger logger = LoggerFactory.getLogger(ApiTest.class);      @Test     public void test_Check2Close() {         String activityId = "100001";         ActivityService.init(activityId, Status.Check);         StateHandler stateHandler = new StateHandler();         Result result = stateHandler.close(activityId, Status.Check);         logger.info("测试结果（提审到关闭）：{}", JSON.toJSONString(result));         logger.info("活动信息：{} 状态：{}", JSON.toJSONString(ActivityService.queryActivityInfo(activityId)), JSON.toJSONString(ActivityService.queryActivityStatus(activityId)));     }      @Test     public void test_Refuse2Revoke() {         String activityId = "100001";         ActivityService.init(activityId, Status.Refuse);          StateHandler stateHandler = new StateHandler();         Result result = stateHandler.checkRevoke(activityId, Status.Refuse);          logger.info("测试结果(拒绝To撤审)：{}", JSON.toJSONString(result));         logger.info("活动信息：{} 状态：{}", JSON.toJSONString(ActivityService.queryActivityInfo(activityId)), JSON.toJSONString(ActivityService.queryActivityInfo(activityId).getStatus()));     } }</code></pre> <p>测试结果：</p> <pre><code>19:49:48.755 [main] INFO  ApiTest - 测试结果(拒绝To撤审)：{"code":"0000","info":"拒绝后返回编辑状态"} 19:49:48.768 [main] INFO  ApiTest - 活动信息：{"activityId":"100001","activityName":"测试活动","beginTime":1649591388759,"endTime":1649591388759,"status":"Editing"} 状态："Editing"</code></pre> <h2 id="参考资料">参考资料</h2> <p>《重学Java设计模式》</p> <p>《设计模式》</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://c.biancheng.net/view/1388.html"  target="_blank" rel="nofollow">http://c.biancheng.net/view/1388.html</a></p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-23.htm">.Net IDE智能提示汉化(.Net6、AspNetCore)</a></p>
                                        <p>下一个：<a href="/html/category/article-25.htm">写了个开源小中间件——运行时动态日志等级开关</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-254.htm">图像处理学习笔记——BMP图片详解</a></h4>
                <p>一、位图和调色板的概念  1.位图（Bitmap）： 例如我们常说的屏幕分辨率为 640*480，刷新频率为70Hz，意思是说每行要扫描 640 个象素，一共有 480 行，每秒重复扫描屏幕 70 次</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-248.htm">SpringBoot中处理的转发与重定向</a></h4>
                <p>转发：一次请求，服务器内部调用另外的组件处理，request和response可以共用，有限制性，只能转发到本应用中的某些资源，页面或者controller请求 课可以访问WEB-INF目录下面的页面</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-249.htm">element树形数据与懒加载失效</a></h4>
                <p>这个bug 卡了我好久 我以为是我的代码有问题 但是 发现我的版本没有这个功能 table树形数据设置，不显示下拉箭头 将官网相关demo复制到本地仍不能正常工作，没有报错 后面百度了好久才发现 版本</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-234.htm">从 jQuery 到 Vue3 的快捷通道_在线工具</a></h4>
                <p>当初使用 jQuery 做了几个简单的项目，算是有一点点了解，现在学习Vue3，发现了一个可以快速转换思维的通道 —— 使用CDN的方式模拟 Vite 建立的项目！  CDN方式 jQuery的使用非</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-238.htm">PyQt5之MenuBar菜单控件的使用（三）</a></h4>
                <p>文章目录  MenuBar 详解 一、定义   1.QMenuBar类 2.QMenu类 2.QAction类   二、创建一个菜单栏     MenuBar 详解 在PyQt5中，菜单栏、主菜单和菜</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-257.htm">JavaScript如何将字符串转换为分层对象</a></h4>
                <p>假设我们有一种特殊的字符串，其中包含成对的字符，像这样- const&nbsp;str&nbsp;=&nbsp;"AABBCCDDEE"; 我们需要基于此字符串构造一个对象，该字符串应如下所示： co</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1332.htm">Centos7离线安装Nginx亲测版</a></h4>
                <p>Centos7 Nginx编译包制作 找一台可连接互联网的虚拟机来制作编译好的Nginx包，具体操作如下 1、准备一台虚拟机（可访问互联网） 2、安装所需插件 $ yum -y install gcc</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-237.htm">Java空指针异常和解决办法</a></h4>
                <p>目录  问题描述：   尝试1： 尝试2：   使用Optional防止出现空指针异常 引用    问题描述： public class Main20220419 {     public stati</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-250.htm">配置tomcat，修改对项目的访问路径</a></h4>
                <p>在Idea中对项目访问路径的配置题  &nbsp;当将wai包直接部署到tomcat中时，如何修改对项目的访问路径？ 两种方案： 1、首先将tomcat的目录下的webapps/ROOT目录下的所有内</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1053.htm">Spring Cloud中使用Feign实现负载均衡详解</a></h4>
                <p>本文属于【夯实Spring Cloud】系列文章，该系列旨在用通俗易懂的语言，带大家了解和学习Spring Cloud技术，希望能给读者带来一些干货。系列目录如下：  【夯实Spring Cloud】</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">36</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>