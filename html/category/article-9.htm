<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-9.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>如何在代码层面提高CPU分支预测效率 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">如何在代码层面提高CPU分支预测效率</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<p><span style="font-size: 1em;">说几个常见的能够提升CPU分支预测效率的方法。</span></p> <h3>将最常见的条件比较单独从switch中移出</h3> <p data-pid="ArQDDrLO">分支预测除了需要预测方向，还需要预测分支的目标地址。目标地址BTA(Branch Target Address)分为两种：</p> <ul> <li data-pid="kkGZ5out">直接跳转(PC-relative, direct) ： offset以立即数形式固定在指令中，所以目标地址也是固定的。</li> <li data-pid="cHPpELa1">间接跳转(absolute, indirect)：目标地址来自通用寄存器，而寄存器的值不固定。</li> </ul> <p data-pid="BaneM2qD">对于直接跳转，使用BTB可以很好的进行预测。但是对于间接跳转，目标地址不固定，更难预测。switch-case的指令实现(类似<code>jmpq *$rax</code>，$rax是case对应label地址)、C++虚函数调用就属于间接跳转。间接跳转如果还用直接跳转的BTB预测，准确率只有50%左右。</p> <p data-pid="_Sqvm3rG">很多CPU针对间接跳转都有单独的预测器，比如的Intel的论文<a class="wrap external" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://link.zhihu.com/?target=https%3A//www.ece.ucdavis.edu/~akella/270W05/centrino+microarchitecture+and+performance.pdf"  target="_blank" data-za-detail-view-id="1043" rel="nofollow">The Intel Pentium M Processor: Microarchitecture and Performance</a>中介绍额Indirect Branch Predictor：通过额外引入context-information——Global Branch History来提高间接跳转的目标地址预测准确率。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6e8fd883bda4de1da5207559b461fe3d.jpg" alt="如何在代码层面提高CPU分支预测效率" class="content_image lazy" data-caption="" data-size="normal" data-actualsrc="https://pica.zhimg.com/50/v2-95792370007181005cb78c6cb1ef5bbb_720w.jpg?source=1940ef5c" data-lazy-status="ok"/></p> <p data-pid="IJFPDyVY">switch-case的优点是将诸多if/else(conditional branch)转换为统一的unconditioal branch，但缺点就是目标地址难以预测。如果某个case的命中率特别高，就可以将其从switch中单独提出来，这样该分支的预测方向 &amp;&amp; 目标地址都很好预测。</p> <p data-pid="H6E-BHP8">比如<a class="wrap external" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://link.zhihu.com/?target=https%3A//github1s.com/apache/dubbo/blob/HEAD/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/dispatcher/ChannelEventRunnable.java"  target="_blank" data-za-detail-view-id="1043" rel="nofollow">java dubbo代码里的一个例子：</a>：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9fa24c43115d0171b3831af745d898fb.jpg" alt="如何在代码层面提高CPU分支预测效率" width="1416" class="origin_image zh-lightbox-thumb lazy" data-caption="" data-size="normal" data-rawwidth="1416" data-rawheight="1061" data-default-watermark-src="https://pica.zhimg.com/50/v2-afa0c41c03c2d64a87cf4738525a886c_720w.jpg?source=1940ef5c" data-original="https://pic1.zhimg.com/v2-10be5de9ab63643490383a617938bd17_r.jpg?source=1940ef5c" data-actualsrc="https://pica.zhimg.com/50/v2-10be5de9ab63643490383a617938bd17_720w.jpg?source=1940ef5c" data-lazy-status="ok"/></p> <p data-pid="fecnnu-V">超过99.9%情况state取值都是<code>ChannelState.RECEIVED</code>&nbsp;，将其单独提出来。<a class="wrap external" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://link.zhihu.com/?target=https%3A//dubbo.apache.org/zh/blog/2019/02/03/%25E6%258F%2590%25E5%2589%258Dif%25E5%2588%25A4%25E6%2596%25AD%25E5%25B8%25AE%25E5%258A%25A9cpu%25E5%2588%2586%25E6%2594%25AF%25E9%25A2%2584%25E6%25B5%258B/"  target="_blank" data-za-detail-view-id="1043" rel="nofollow">官网博客有一个benchmark</a>，性能有很大的改观。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/02bc34b77842d50958bb74cd62c46bc8.jpg" alt="如何在代码层面提高CPU分支预测效率" width="994" class="origin_image zh-lightbox-thumb lazy" data-caption="" data-size="normal" data-rawwidth="994" data-rawheight="316" data-default-watermark-src="https://pic2.zhimg.com/50/v2-19b15c6c16058f0bb740fe6595559efa_720w.jpg?source=1940ef5c" data-original="https://pic1.zhimg.com/v2-901e0d7bbd2a88bf644632c33d3e613d_r.jpg?source=1940ef5c" data-actualsrc="https://pic2.zhimg.com/50/v2-901e0d7bbd2a88bf644632c33d3e613d_720w.jpg?source=1940ef5c" data-lazy-status="ok"/></p> <h3>将使用【控制】的条件转移转换为使用【数据】的条件转移</h3> <p data-pid="YUFn9yle">CMOV指令就是典型的例子。<strong>CPU无需进行分支预测</strong>，但是会计算一个条件的两种结果，然后通过检查条件码，要么更新目的寄存器，要么保持不变。</p> <p data-pid="BGDfjo8Y">比如</p> <div class="highlight"> <pre><code>v = test-expr ? then-expr : else-expr</code></pre> </div> <p data-pid="AqS7-Udj">会转换为下列伪代码：</p> <div class="highlight"> <pre><code>v = then-expr; ve = else-expr; t = test-expr; if(!t) v=ve;</code></pre> </div> <p data-pid="43xwBoDw">编译器会倾向于将使用三元运算符且两种结果的计算量不大的表达式转换为CMOV条件数据转移。<a class="wrap external" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://link.zhihu.com/?target=https%3A//github1s.com/facebook/folly/blob/main/folly/FBString.h%23L404"  target="_blank" data-za-detail-view-id="1043" rel="nofollow">例如facebook folly中的例子</a>，注意看注释：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/4baa13a2600caecd1573dd275ded07a1.jpg" alt="如何在代码层面提高CPU分支预测效率" width="960" class="origin_image zh-lightbox-thumb lazy" data-caption="" data-size="normal" data-rawwidth="960" data-rawheight="563" data-default-watermark-src="https://pica.zhimg.com/50/v2-da0175054957a2a150d8ea6ec5abbe7f_720w.jpg?source=1940ef5c" data-original="https://pic3.zhimg.com/v2-e3448b9e83a27a146c7c73f0efe58b1b_r.jpg?source=1940ef5c" data-actualsrc="https://pica.zhimg.com/50/v2-e3448b9e83a27a146c7c73f0efe58b1b_720w.jpg?source=1940ef5c" data-lazy-status="ok"/></p> <p data-pid="0fD_qaiZ"><strong>当分支的结果完全由外部输入决定，local branch history和global branch history都毫无规律时，效果会更好。</strong>下面这个是《Computer Systems A Programmer's Perspective 》5.11.2小节的例子，第二个版本性能是第一个三倍：</p> <div class="highlight"> <pre><code>/* Rearrange two vectors so that for each i, b[i] &gt;= a[i] */ void minmax1(long a[], long b[], long n) {   long i;   for (i = 0; i &lt; n; i++) {     if (a[i] &gt; b[i]) {       long t = a[i];       a[i] = b[i];       b[i] = t;     }   } }  /* Rearrange two vectors so that for each i, b[i] &gt;= a[i] */ void minmax2(long a[], long b[], long n) {   long i;   for (i = 0; i &lt; n; i++) {     long min = a[i] &lt; b[i] ? a[i] : b[i];     long max = a[i] &lt; b[i] ? b[i] : a[i];     a[i] = min;     b[i] = max;   } }</code></pre> </div> <h3>使用算数逻辑代替分支</h3> <p data-pid="wo4OfPsE">比如<a class="wrap external" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://link.zhihu.com/?target=http%3A//www.davespace.co.uk/arm/efficient-c-for-arm/unsignedrange.html"  target="_blank" data-za-detail-view-id="1043" rel="nofollow">ARM优化手册</a>里提到，可以将范围比较转换为无条件计算，编译器有时候也会自动做这个转换：</p> <div class="highlight"> <pre><code>// origin version int insideRange1(int v, int min, int max) {   return v &gt;= min &amp;&amp; v &lt; max; }  // optimized version int insideRange2(int v, int min, int max) {   return (unsigned) (v - min) &lt; (max - min); }</code></pre> </div> <p data-pid="nEFaw8QS">韦易笑大佬针对这个做过更详细的优化和测试，反正我是看晕了：</p> <div class="RichText-LinkCardContainer"> <p class="md-end-block md-p"><span class="md-link md-pair-s"><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://zhuanlan.zhihu.com/p/144963553"  rel="nofollow">https://zhuanlan.zhihu.com/p/144963553</a></span></p> <p class="md-end-block md-p md-focus"><span class="md-link md-pair-s"><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://zhuanlan.zhihu.com/p/147039093"  rel="nofollow">https://zhuanlan.zhihu.com/p/147039093</a></span></p> </div> <p data-pid="o0J9D8WT">引用文章内的<a class="wrap external" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://link.zhihu.com/?target=https%3A//quick-bench.com/q/EbCR9psA3lUEhpn8bYLwVtJ-FWk"  target="_blank" data-za-detail-view-id="1043" rel="nofollow">测试数据</a>：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/2e1af4966bc88308b808cd7cb15556fa.jpg" alt="如何在代码层面提高CPU分支预测效率" width="2246" class="origin_image zh-lightbox-thumb lazy" data-caption="" data-size="normal" data-rawwidth="2246" data-rawheight="1109" data-default-watermark-src="https://pica.zhimg.com/50/v2-e02d9890c38786a7710bf5b6424b53da_720w.jpg?source=1940ef5c" data-original="https://pic2.zhimg.com/v2-2cd5e95da0ff0233591a9e4ee9526304_r.jpg?source=1940ef5c" data-actualsrc="https://pic3.zhimg.com/50/v2-2cd5e95da0ff0233591a9e4ee9526304_720w.jpg?source=1940ef5c" data-lazy-status="ok"/></p> <p data-pid="SS2rZVgj"><a class="wrap external" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://link.zhihu.com/?target=https%3A//www.chessprogramming.org/Avoiding_Branches%23Absolute_value_of_an_Integer"  target="_blank" data-za-detail-view-id="1043" rel="nofollow">Avoiding Branches</a>里有更多的例子，不过用之前还是做测试更靠谱。</p> <h3>使用template移除分支</h3> <p data-pid="EWhVdfub">2018年Stephen Yang的博士论文<a class="wrap external" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://link.zhihu.com/?target=https%3A//www.usenix.org/system/files/conference/atc18/atc18-yang.pdf"  target="_blank" data-za-detail-view-id="1043" rel="nofollow">NanoLog: A Nanosecond Scale Logging System</a>介绍了一款C++日志库Nanolog，将日志调用开销的中位数降为了个位数纳秒级别。作者在文章<a class="wrap external" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://link.zhihu.com/?target=https%3A//web.stanford.edu/~ouster/cgi-bin/papers/YangPhD.pdf"  target="_blank" data-za-detail-view-id="1043" rel="nofollow">NANOLOG: A NANOSECOND SCALE LOGGING SYSTEM</a>中提到了Nanolog的关键技术和优化，第三条就是将printf在运行时的大量分支逻辑利用C++ template优化成编译期的运算。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/759e6eace0e901be37e7c6b5cd3e0443.jpg" alt="如何在代码层面提高CPU分支预测效率" width="1651" class="origin_image zh-lightbox-thumb lazy" data-caption="" data-size="normal" data-rawwidth="1651" data-rawheight="589" data-default-watermark-src="https://pic1.zhimg.com/50/v2-2878d969b6a4b84beb7b9bc1bd9cedde_720w.jpg?source=1940ef5c" data-original="https://pic3.zhimg.com/v2-fa5011f2b84df8b3c2698ff3b892b8fd_r.jpg?source=1940ef5c" data-actualsrc="https://pica.zhimg.com/50/v2-fa5011f2b84df8b3c2698ff3b892b8fd_720w.jpg?source=1940ef5c" data-lazy-status="ok"/></p> <h3>likely/unlikely</h3> <p data-pid="9ZjiraMw">这个很多人已经介绍过了，<a class="wrap external" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://link.zhihu.com/?target=https%3A//en.cppreference.com/w/cpp/language/attributes/likely"  target="_blank" data-za-detail-view-id="1043" rel="nofollow">C++20已经将其标准化</a>，支持将更可能执行的代码放在hot path上，对icache更友好。<a class="wrap external" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://link.zhihu.com/?target=https%3A//github1s.com/facebook/folly/blob/main/folly/FBString.h%23L501-L502"  target="_blank" data-za-detail-view-id="1043" rel="nofollow">例如facebook folly中的例子</a>：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/64e04468398523a68de1de4547aef6c2.jpg" alt="如何在代码层面提高CPU分支预测效率" width="1616" class="origin_image zh-lightbox-thumb lazy" data-caption="" data-size="normal" data-rawwidth="1616" data-rawheight="433" data-default-watermark-src="https://pica.zhimg.com/50/v2-33c14cb00e0fc814f60ae165484aef88_720w.jpg?source=1940ef5c" data-original="https://pic3.zhimg.com/v2-2d92d999be5a94bdca5bd2be858e9e75_r.jpg?source=1940ef5c" data-actualsrc="https://pic1.zhimg.com/50/v2-2d92d999be5a94bdca5bd2be858e9e75_720w.jpg?source=1940ef5c" data-lazy-status="ok"/></p> <p data-pid="hX8YEiyi"><code>FOLLY_LIKELY</code>是一个包装：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/714207a2f8893ce12a8317c82d654c2f.jpg" alt="如何在代码层面提高CPU分支预测效率" width="1465" class="origin_image zh-lightbox-thumb lazy" data-caption="" data-size="normal" data-rawwidth="1465" data-rawheight="1047" data-default-watermark-src="https://pica.zhimg.com/50/v2-24f6e8e34e2afee59083857ccf618553_720w.jpg?source=1940ef5c" data-original="https://pic3.zhimg.com/v2-66ea0b1f7c06e3268871228f611599a1_r.jpg?source=1940ef5c" data-actualsrc="https://pic1.zhimg.com/50/v2-66ea0b1f7c06e3268871228f611599a1_720w.jpg?source=1940ef5c" data-lazy-status="ok"/></p> <p data-pid="lh7W5ouq">更进一步，有些ISA的分支指令有一个bit，支持programmer去指定分支是否taken。现代CPU使用的<a class="wrap external" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://link.zhihu.com/?target=http%3A//www.irisa.fr/caps/people/seznec/JILP-COTTAGE.pdf"  target="_blank" data-za-detail-view-id="1043" rel="nofollow">TAGE分支预测器</a>，部分实现会使用该bit去初始化predictor(是初始化，不是一直使用programmer指定的跳转结果)。TAGE预测器可以参考下我开头放的回答：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.zhihu.com/question/486239354/answer/2410692045"  rel="nofollow">https://www.zhihu.com/question/486239354/answer/2410692045</a></p> <p data-pid="lh7W5ouq"> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/3bd5ef629020e63fd77e216d7e45099f.jpg" alt="如何在代码层面提高CPU分支预测效率" width="2066" class="origin_image zh-lightbox-thumb lazy" data-caption="" data-size="normal" data-rawwidth="2066" data-rawheight="1008" data-default-watermark-src="https://pic2.zhimg.com/50/v2-618c0f9fbb0d6ad5d74635b99cd9fe01_720w.jpg?source=1940ef5c" data-original="https://pic2.zhimg.com/v2-7537152214f116d15b1930b5de8f452b_r.jpg?source=1940ef5c" data-actualsrc="https://pica.zhimg.com/50/v2-7537152214f116d15b1930b5de8f452b_720w.jpg?source=1940ef5c" data-lazy-status="ok"/></p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-8.htm">Nacos配置管理基础应用</a></p>
                                        <p>下一个：<a href="/html/category/article-10.htm">Spring Boot + Mybatis-Plus + jasypt 数据库连接加密</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-215.htm">uniapp中封装一个弹框组件</a></h4>
                <p>1，准备组件popup // components文件夹中popup组件&lt;template&gt;&lt;view&gt;&lt;viewclass="show-box-bg wx-login-</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-236.htm">「BUAA OO Unit 2 HW8」第二单元总结_在线工具</a></h4>
                <p>「BUAA OO Unit 2 HW8」第二单元总结   目录   「BUAA OO Unit 2 HW8」第二单元总结  Part 0 前言  Part 1 第五次作业  1.1 作业要求 1.2 </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-258.htm">vs code编写web项目</a></h4>
                <p>vs code编写web项目 0.小贴士 1.vs和vscode是不一样的是不一样的 2.在已经存在maven的时候，直接在maven的+创建项目，用ctrl+shoeft+p 搜索不到maven的创</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-234.htm">数据传输POST心法分享，做前端的你还解决不了这个bug？</a></h4>
                <p>背景 随时随地给大家提供技术支持的葡萄又来了。这次的事情是这样的，提供demo属于是常规操作，但是前两天客户突然反馈压缩传输模块抛出异常，具体情况是压缩内容传输到服务端后无法解压。 由于代码没有发生任</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-252.htm">Azure Virtual Desktop创建配置管理详解</a></h4>
                <p>一，引言 Azure 虚拟创面是一项 Azure 服务，可以让我们管理： 　　1）VDI（虚拟桌面基础架构） 　　2）云端的 RDSH：RDSH 是 RDS（远程桌面服务）中的一个角色。这些类型的服务</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-221.htm">线程安全问题的解决方案有哪些？</a></h4>
                <p>线程安全是指某个方法或某段代码，在多线程中能够正确的执行，不会出现数据不一致或数据污染的情况，我们把这样的程序称之为线程安全的，反之则为非线程安全的。在 Java 中，解决线程安全问题有以下 3 种手</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-227.htm">企业应用架构研究系列十九：Docker开发环境</a></h4>
                <p>　　软件行业流行这样一个说法，由于Docker 技术的成熟和该技术被广大厂商的普遍应用，成就了微服务领域的快速成长，衍生了云原生技术和公有云的进一步推广。我个人认为Dockers 技术、微服务技术、云</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-223.htm">C语言：关键字&#8212;union（声明共用体类型）</a></h4>
                <p>C语言32个关键字 有32个关键字详细说明，还有跳转链接！   一、union 简介 union 是C语言中一种声明共用体的数据类型。union(共用体)在某种程度上类似struct(结构体)的一种数</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-211.htm">MaxCompute SQL函数详解 ODPS SQL函数详解之日期相关函数</a></h4>
                <p>MaxCompute SQL函数详解 ODPS SQL函数详解 日期函数  to_date函数  返回类型：datetime   语法：to_date(类型 参数1,类型 参数2); 	 to_dat</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-231.htm">Java中时间类使用方法总结</a></h4>
                <p>//java.util.Date; Date类用法Date date = new Date();System.out.println(date);System.out.println("=======</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>