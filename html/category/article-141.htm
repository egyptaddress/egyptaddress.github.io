<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-141.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>SpringBoot + SpringSecurity + Mybatis-Plus + JWT实现分布式系统认证和授权 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">SpringBoot + SpringSecurity + Mybatis-Plus + JWT实现分布式系统认证和授权</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="htmledit_views"> <div id="cnblogs_post_body"> <p>1. 简介</p> <p>  Spring Security是一个功能强大且易于扩展的安全框架，主要用于为Java程序提供用户认证（Authentication）和用户授权（Authorization）功能。<br />   用户认证指的是验证某个用户是否合法，即验证用户名密码是否正确；用户授权指的是验证用户是否拥有访问资源的权限。在一个系统中，用户认证和授权是分不开的，既要保证用户能合法登录系统，也要保住用户再访问资源时具有足够的权限。<br />   JWT（Json Web Token）是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。一般用于在身份提供者和服务提供者之间传递被认证成功的用户身份信息，以便于从资源服务器获取资源。基于无状态、结构简单、传输快且不会在服务端保存会话信息等的特点，在分布式系统认证授权场景中发挥重要作用。<br />   本文使用SpringBoot整合SpringSecurity实现JWT Token认证授权。</p> <p>2. 数据库设计</p> <table> <thead> <tr> <th>表名称</th> <th>字段</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>sys_user</td> <td>id（ID，主键）<br /> username（用户名）<br /> password（密码）<br /> status（状态，0-正常，1-删除，2-禁用）</td> <td>系统用户表</td> </tr> <tr> <td>sys_role</td> <td>id（ID，主键）<br /> role_name（角色名称）</td> <td>系统角色表</td> </tr> <tr> <td>sys_auth</td> <td>id（ID，主键）<br /> name（权限名称）<br /> permission（权限标识）</td> <td>系统权限表</td> </tr> <tr> <td>sys_user_role</td> <td>id（ID，主键）<br /> user_id（用户ID）<br /> role_id（角色ID）</td> <td>系统用户角色中间表</td> </tr> <tr> <td>sys_role_auth</td> <td>id（ID，主键）<br /> role_id（角色ID）<br /> auth_id（角色权限ID）</td> <td>系统角色权限中间表</td> </tr> </tbody> </table> <p>3. 搭建环境</p> <ul> <li>创建项目<br /><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230112/d2a85425197f0039fbd6fdd0ed15436e.jpg"> </li> <li>修改pom.xml</li> </ul> <pre class="has"><code>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; 	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; 	&lt;groupId&gt;com.c3stones&lt;/groupId&gt; 	&lt;artifactId&gt;spring-security-jwt-demo&lt;/artifactId&gt; 	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; 	&lt;name&gt;spring-security-jwt-demo&lt;/name&gt; 	&lt;description&gt;Spring Boot + Srping Security + Mybatis-Plus + JWT Demo&lt;/description&gt;  	&lt;parent&gt; 		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; 		&lt;version&gt;2.1.6.RELEASE&lt;/version&gt; 	&lt;/parent&gt;  	&lt;properties&gt; 		&lt;java.version&gt;1.8&lt;/java.version&gt; 		&lt;jjwt.version&gt;0.9.0&lt;/jjwt.version&gt; 		&lt;druid.version&gt;1.1.6&lt;/druid.version&gt; 		&lt;jwt.version&gt;1.0.9.RELEASE&lt;/jwt.version&gt; 		&lt;fastjson.version&gt;1.2.45&lt;/fastjson.version&gt; 		&lt;mybatis-plus.version&gt;3.3.1&lt;/mybatis-plus.version&gt; 	&lt;/properties&gt;  	&lt;dependencies&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; 		&lt;/dependency&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;mysql&lt;/groupId&gt; 			&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; 			&lt;scope&gt;runtime&lt;/scope&gt; 		&lt;/dependency&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;org.projectlombok&lt;/groupId&gt; 			&lt;artifactId&gt;lombok&lt;/artifactId&gt; 			&lt;optional&gt;true&lt;/optional&gt; 		&lt;/dependency&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; 			&lt;scope&gt;test&lt;/scope&gt; 		&lt;/dependency&gt;  		&lt;!--Spring Security依赖 --&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 			&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt; 		&lt;/dependency&gt;  		&lt;!-- Mybatis-Plus 依赖 --&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;com.baomidou&lt;/groupId&gt; 			&lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; 			&lt;version&gt;${mybatis-plus.version}&lt;/version&gt; 		&lt;/dependency&gt;  		&lt;!-- Druid 连接池 --&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;com.alibaba&lt;/groupId&gt; 			&lt;artifactId&gt;druid&lt;/artifactId&gt; 			&lt;version&gt;${druid.version}&lt;/version&gt; 		&lt;/dependency&gt;  		&lt;!-- StringUtils 工具 --&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;org.apache.commons&lt;/groupId&gt; 			&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; 		&lt;/dependency&gt;  		&lt;!-- JSON工具 --&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;com.alibaba&lt;/groupId&gt; 			&lt;artifactId&gt;fastjson&lt;/artifactId&gt; 			&lt;version&gt;${fastjson.version}&lt;/version&gt; 		&lt;/dependency&gt;  		&lt;!-- JWT依赖 --&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.security&lt;/groupId&gt; 			&lt;artifactId&gt;spring-security-jwt&lt;/artifactId&gt; 			&lt;version&gt;${jwt.version}&lt;/version&gt; 		&lt;/dependency&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt; 			&lt;artifactId&gt;jjwt&lt;/artifactId&gt; 			&lt;version&gt;${jjwt.version}&lt;/version&gt; 		&lt;/dependency&gt; 	&lt;/dependencies&gt;  	&lt;build&gt; 		&lt;plugins&gt; 			&lt;plugin&gt; 				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; 			&lt;/plugin&gt; 		&lt;/plugins&gt; 	&lt;/build&gt;  &lt;/project&gt;</code></pre> <ul> <li>添加配置文件application.yml</li> </ul> <pre class="has"><code>server:    port: 8080     spring:    datasource:       type: com.alibaba.druid.pool.DruidDataSource       driver-class-name: com.mysql.cj.jdbc.Driver       url: jdbc:mysql://127.0.0.1:3306/security?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull       username: root       password: 123456        # JWT配置 jwt:    # 密匙Key    secret: JWTSecret,C3Stones    # HeaderKey    tokenHeader: Authorization    # Token前缀    tokenPrefix: Bearer    # 过期时间，单位秒    expiration: 86400    # 配置白名单（不需要认证）    antMatchers: /login/**,/register/**,/static/**     # Mybatis-plus配置 mybatis-plus:    mapper-locations: classpath:mapper/*.xml    global-config:       db-config:          id-type: AUTO    configuration:       # 打印sql       log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</code></pre> <ul> <li>添加Entity、Dao、Dao.xml、Serivce<br />   以系统用户SysUser为例，其余请自行添加。<br />   创建实体类：</li> </ul> <pre class="has"><code>import java.io.Serializable;  import com.baomidou.mybatisplus.annotation.TableId; import com.baomidou.mybatisplus.annotation.TableName;  import lombok.Data;  /**  * 系统用户  *   * @author CL  *  */ @Data @TableName("sys_user") public class SysUser implements Serializable { 	private static final long serialVersionUID = 1L;  	/** 	 * 用户ID 	 */ 	@TableId 	private Long id;  	/** 	 * 用户名 	 */ 	private String username;  	/** 	 * 密码 	 */ 	private String password; 	 	/** 	 * 状态（0-正常，1-删除，2-禁用） 	 */ 	private String status; }</code></pre> <p>  创建Dao类：</p> <pre class="has"><code>import com.baomidou.mybatisplus.core.mapper.BaseMapper; import com.c3stones.entity.SysUser;  /**  * 系统用户Dao  *   * @author CL  *  */ @Mapper public interface SysUserDao extends BaseMapper&lt;SysUser&gt; {  }</code></pre> <p>  在rsource目录下创建mapper文件夹，并在文件夹下创建SysUserDao.xml：</p> <pre class="has"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;  &lt;mapper namespace="com.c3stones.dao.SysUserDao"&gt;  &lt;/mapper&gt;</code></pre> <p>  创建Service：</p> <pre class="has"><code>import com.baomidou.mybatisplus.extension.service.IService; import com.c3stones.entity.SysUser;  /**  * 系统用户Service  *   * @author CL  *  */ public interface SysUserService extends IService&lt;SysUser&gt; {  }</code></pre> <p>  创建Service实现类：</p> <pre class="has"><code>import org.springframework.stereotype.Service;  import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl; import com.c3stones.dao.SysUserDao; import com.c3stones.entity.SysUser; import com.c3stones.service.SysUserService;  /**  * 系统用户Service实现  *   * @author CL  *  */ @Service public class SysUserSerivceImpl extends ServiceImpl&lt;SysUserDao, SysUser&gt; implements SysUserService {  }</code></pre> <ul> <li>创建系统用户详情类，必须实现org.springframework.security.core.userdetails.UserDetails：</li> </ul> <pre class="has"><code>import java.io.Serializable; import java.util.Collection;  import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.userdetails.UserDetails;  import com.c3stones.entity.SysUser;  import lombok.Data; import lombok.EqualsAndHashCode;  /**  * 系统用户详情  *   * @author CL  *  */ @Data @EqualsAndHashCode(callSuper = false) public class SysUserDetails extends SysUser implements UserDetails, Serializable { 	private static final long serialVersionUID = 1L;  	/** 	 * 用户角色 	 */ 	private Collection&lt;GrantedAuthority&gt; authorities;  	/** 	 * 账号是否过期 	 */ 	private boolean isAccountNonExpired = false;  	/** 	 * 账号是否锁定 	 */ 	private boolean isAccountNonLocked = false;  	/** 	 * 证书是否过期 	 */ 	private boolean isCredentialsNonExpired = false;  	/** 	 * 账号是否有效 	 */ 	private boolean isEnabled = true;  	/** 	 * 获得用户权限 	 */ 	@Override 	public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() { 		return authorities; 	}  	/** 	 * 判断账号是否过期 	 */ 	@Override 	public boolean isAccountNonExpired() { 		return isAccountNonExpired; 	}  	/** 	 * 判断账号是否锁定 	 */ 	@Override 	public boolean isAccountNonLocked() { 		return isAccountNonLocked; 	}  	/** 	 * 判断证书是否过期 	 */ 	@Override 	public boolean isCredentialsNonExpired() { 		return isCredentialsNonExpired; 	}  	/** 	 * 判断账号是否有效 	 */ 	@Override 	public boolean isEnabled() { 		return isEnabled; 	}  }</code></pre> <ul> <li>编写JWT配置信息类：</li> </ul> <pre class="has"><code>import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.stereotype.Component;  /**  * JWT配置基础类  *   * @author CL  *  */ @Component @ConfigurationProperties(prefix = "jwt") @SuppressWarnings("static-access") public class JWTConfig {  	/** 	 * 密匙Key 	 */ 	public static String secret;  	/** 	 * HeaderKey 	 */ 	public static String tokenHeader;  	/** 	 * Token前缀 	 */ 	public static String tokenPrefix;  	/** 	 * 过期时间 	 */ 	public static Integer expiration;  	/** 	 * 配置白名单 	 */ 	public static String antMatchers;  	/** 	 * 将过期时间单位换算成毫秒 	 *  	 * @param expiration 过期时间，单位秒 	 */ 	public void setExpiration(Integer expiration) { 		this.expiration = expiration * 1000; 	}  	public void setSecret(String secret) { 		this.secret = secret; 	}  	public void setTokenHeader(String tokenHeader) { 		this.tokenHeader = tokenHeader; 	}  	public void setTokenPrefix(String tokenPrefix) { 		this.tokenPrefix = tokenPrefix + " "; 	}  	public void setAntMatchers(String antMatchers) { 		this.antMatchers = antMatchers; 	}  }</code></pre> <p>4. 编写工具类</p> <ul> <li>创建响应工具类</li> </ul> <pre class="has"><code>import java.io.PrintWriter;  import javax.servlet.ServletResponse;  import com.alibaba.fastjson.JSON;  import lombok.AllArgsConstructor; import lombok.Data; import lombok.extern.slf4j.Slf4j;  /**  * 响应结果工具类  *   * @author CL  *  */ @Slf4j @Data @AllArgsConstructor public class ResponseUtils {  	/** 	 * 返回编码 	 */ 	private Integer code;  	/** 	 * 返回消息 	 */ 	private String msg;  	/** 	 * 返回数据 	 */ 	private Object data;  	/** 	 * Response输出Json格式 	 *  	 * @param response 	 * @param data     返回数据 	 */ 	public static void responseJson(ServletResponse response, Object data) { 		PrintWriter out = null; 		try { 			response.setCharacterEncoding("UTF-8"); 			response.setContentType("application/json"); 			out = response.getWriter(); 			out.println(JSON.toJSONString(data)); 			out.flush(); 		} catch (Exception e) { 			log.error("Response输出Json异常：" + e); 		} finally { 			if (out != null) { 				out.close(); 			} 		} 	}  	/** 	 * 返回信息 	 *  	 * @param code 返回编码 	 * @param msg  返回消息 	 * @param data 返回数据 	 * @return 	 */ 	public static ResponseUtils response(Integer code, String msg, Object data) { 		return new ResponseUtils(code, msg, data); 	}  	/** 	 * 返回成功 	 *  	 * @param data 返回数据 	 * @return 	 */ 	public static ResponseUtils success(Object data) { 		return ResponseUtils.response(200, "成功", data); 	}  	/** 	 * 返回失败 	 *  	 * @param data 返回数据 	 * @return 	 */ 	public static ResponseUtils fail(Object data) { 		return ResponseUtils.response(500, "失败", data); 	}  }</code></pre> <ul> <li>编写JWTToken工具类：</li> </ul> <pre class="has"><code>/**  * JWT生产Token工具类  *   * @author CL  *  */ @Slf4j public class JWTTokenUtil {  	/** 	 * 创建Token 	 *  	 * @param sysUserDetails 用户信息 	 * @return 	 */ 	public static String createAccessToken(SysUserDetails sysUserDetails) { 		String token = Jwts.builder().setId(// 设置JWT 				sysUserDetails.getId().toString()) // 用户Id 				.setSubject(sysUserDetails.getUsername()) // 主题 				.setIssuedAt(new Date()) // 签发时间 				.setIssuer("C3Stones") // 签发者 				.setExpiration(new Date(System.currentTimeMillis() + JWTConfig.expiration)) // 过期时间 				.signWith(SignatureAlgorithm.HS512, JWTConfig.secret) // 签名算法、密钥 				.claim("authorities", JSON.toJSONString(sysUserDetails.getAuthorities())).compact(); // 自定义其他属性，如用户组织机构ID，用户所拥有的角色，用户权限信息等 		return JWTConfig.tokenPrefix + token; 	}  	/** 	 * 解析Token 	 *  	 * @param token Token信息 	 * @return 	 */ 	public static SysUserDetails parseAccessToken(String token) { 		SysUserDetails sysUserDetails = null; 		if (StringUtils.isNotEmpty(token)) { 			try { 				// 去除JWT前缀 				token = token.substring(JWTConfig.tokenPrefix.length());  				// 解析Token 				Claims claims = Jwts.parser().setSigningKey(JWTConfig.secret).parseClaimsJws(token).getBody();  				// 获取用户信息 				sysUserDetails = new SysUserDetails(); 				sysUserDetails.setId(Long.parseLong(claims.getId())); 				sysUserDetails.setUsername(claims.getSubject()); 				// 获取角色 				Set&lt;GrantedAuthority&gt; authorities = new HashSet&lt;GrantedAuthority&gt;(); 				String authority = claims.get("authorities").toString(); 				if (StringUtils.isNotEmpty(authority)) { 					List&lt;Map&lt;String, String&gt;&gt; authorityList = JSON.parseObject(authority, 							new TypeReference&lt;List&lt;Map&lt;String, String&gt;&gt;&gt;() { 							}); 					for (Map&lt;String, String&gt; role : authorityList) { 						if (!role.isEmpty()) { 							authorities.add(new SimpleGrantedAuthority(role.get("authority"))); 						} 					} 				} 				sysUserDetails.setAuthorities(authorities); 			} catch (Exception e) { 				log.error("解析Token异常：" + e); 			} 		} 		return sysUserDetails; 	}  }</code></pre> <p>5. 编写Spring Security核心实现类</p> <ul> <li>编写无权限处理类</li> </ul> <pre class="has"><code>import java.io.IOException;  import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  import org.springframework.security.access.AccessDeniedException; import org.springframework.security.web.access.AccessDeniedHandler; import org.springframework.stereotype.Component;  import com.c3stones.utils.ResponseUtils;  /**  * 无权限处理类  *   * @author CL  *  */ @Component public class UserAccessDeniedHandler implements AccessDeniedHandler {  	@Override 	public void handle(HttpServletRequest request, HttpServletResponse response, 			AccessDeniedException accessDeniedException) throws IOException, ServletException { 		ResponseUtils.responseJson(response, ResponseUtils.response(403, "拒绝访问", accessDeniedException.getMessage())); 	}  }</code></pre> <ul> <li>编写未登录处理类</li> </ul> <pre class="has"><code>import java.io.IOException;  import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  import org.springframework.security.core.AuthenticationException; import org.springframework.security.web.AuthenticationEntryPoint; import org.springframework.stereotype.Component;  import com.c3stones.utils.ResponseUtils;  /**  * 未登录处理类  *   * @author CL  *  */ @Component public class UserNotLoginHandler implements AuthenticationEntryPoint {  	@Override 	public void commence(HttpServletRequest request, HttpServletResponse response, 			AuthenticationException authException) throws IOException, ServletException { 		ResponseUtils.responseJson(response, ResponseUtils.response(401, "未登录", authException.getMessage())); 	} }</code></pre> <ul> <li>编写登录成功处理类</li> </ul> <pre class="has"><code>import java.util.HashMap; import java.util.Map;  import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  import org.springframework.security.core.Authentication; import org.springframework.security.web.authentication.AuthenticationSuccessHandler; import org.springframework.stereotype.Component;  import com.c3stones.security.entity.SysUserDetails; import com.c3stones.security.utils.JWTTokenUtil; import com.c3stones.utils.ResponseUtils;  /**  * 登录成功处理类  *   * @author CL  *  */ @Component public class UserLoginSuccessHandler implements AuthenticationSuccessHandler {  	@Override 	public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, 			Authentication authentication) { 		SysUserDetails sysUserDetails = (SysUserDetails) authentication.getPrincipal(); 		String token = JWTTokenUtil.createAccessToken(sysUserDetails); 		Map&lt;String, String&gt; tokenMap = new HashMap&lt;&gt;(); 		tokenMap.put("token", token); 		ResponseUtils.responseJson(response, ResponseUtils.response(200, "登录成功", tokenMap)); 	} }</code></pre> <ul> <li>编写登录失败处理类</li> </ul> <pre class="has"><code>import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  import org.springframework.security.core.AuthenticationException; import org.springframework.security.web.authentication.AuthenticationFailureHandler; import org.springframework.stereotype.Component;  import com.c3stones.utils.ResponseUtils;  /**  * 登录失败处理类  *   * @author CL  *  */ @Component public class UserLoginFailureHandler implements AuthenticationFailureHandler {  	@Override 	public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, 			AuthenticationException exception) { 		ResponseUtils.responseJson(response, ResponseUtils.response(500, "登录失败", exception.getMessage())); 	} }</code></pre> <ul> <li>编写登出成功处理类</li> </ul> <pre class="has"><code>import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  import org.springframework.security.core.Authentication; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.security.web.authentication.logout.LogoutSuccessHandler; import org.springframework.stereotype.Component;  import com.c3stones.utils.ResponseUtils;  /**  * 登出成功处理类  *   * @author CL  *  */ @Component public class UserLogoutSuccessHandler implements LogoutSuccessHandler {  	@Override 	public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, 			Authentication authentication) { 		SecurityContextHolder.clearContext(); 		ResponseUtils.responseJson(response, ResponseUtils.response(200, "登出成功", null)); 	} }</code></pre> <ul> <li>用户Service、Dao中添加认证和授权时需要的方法</li> </ul> <pre class="has"><code>import java.util.List;  import com.baomidou.mybatisplus.extension.service.IService; import com.c3stones.entity.SysAuth; import com.c3stones.entity.SysRole; import com.c3stones.entity.SysUser;  /**  * 系统用户Service  *   * @author CL  *  */ public interface SysUserService extends IService&lt;SysUser&gt; {  	/** 	 * 根据用户名称查询用户信息 	 *  	 * @param username 用户名称 	 * @return 	 */ 	SysUser findUserByUserName(String username);  	/** 	 * 根据用户ID查询角色 	 *  	 * @param userId 用户ID 	 * @return 	 */ 	List&lt;SysRole&gt; findRoleByUserId(Long userId);  	/** 	 * 根据用户ID查询权限 	 *  	 * @param userId 用户ID 	 * @return 	 */ 	List&lt;SysAuth&gt; findAuthByUserId(Long userId);  }</code></pre> <pre class="has"><code>import java.util.List;  import org.springframework.stereotype.Service;  import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper; import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl; import com.c3stones.dao.SysUserDao; import com.c3stones.entity.SysAuth; import com.c3stones.entity.SysRole; import com.c3stones.entity.SysUser; import com.c3stones.service.SysUserService;  /**  * 系统用户Service实现  *   * @author CL  *  */ @Service public class SysUserSerivceImpl extends ServiceImpl&lt;SysUserDao, SysUser&gt; implements SysUserService {  	/** 	 * 根据用户名称查询用户信息 	 *  	 * @param username 用户名称 	 * @return 	 */ 	@Override 	public SysUser findUserByUserName(String username) { 		return this.baseMapper.selectOne( 				new QueryWrapper&lt;SysUser&gt;().lambda().eq(SysUser::getUsername, username).ne(SysUser::getStatus, "1")); 	}  	/** 	 * 根据用户ID查询角色 	 *  	 * @param userId 用户ID 	 * @return 	 */ 	@Override 	public List&lt;SysRole&gt; findRoleByUserId(Long userId) { 		return this.baseMapper.findRoleByUserId(userId); 	}  	/** 	 * 根据用户ID查询权限 	 *  	 * @param userId 用户ID 	 * @return 	 */ 	@Override 	public List&lt;SysAuth&gt; findAuthByUserId(Long userId) { 		return this.baseMapper.findAuthByUserId(userId); 	}  }</code></pre> <pre class="has"><code>import java.util.List;  import org.apache.ibatis.annotations.Mapper;  import com.baomidou.mybatisplus.core.mapper.BaseMapper; import com.c3stones.entity.SysAuth; import com.c3stones.entity.SysRole; import com.c3stones.entity.SysUser;  /**  * 系统用户Dao  *   * @author CL  *  */ @Mapper public interface SysUserDao extends BaseMapper&lt;SysUser&gt; {  	/** 	 * 根据用户ID查询角色 	 *  	 * @param userId 用户ID 	 * @return 	 */ 	List&lt;SysRole&gt; findRoleByUserId(Long userId);  	/** 	 * 根据用户ID查询权限 	 *  	 * @param userId 用户ID 	 * @return 	 */ 	List&lt;SysAuth&gt; findAuthByUserId(Long userId); }</code></pre> <pre class="has"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;  &lt;mapper namespace="com.c3stones.dao.SysUserDao"&gt;  	&lt;!-- 根据用户ID查询角色 --&gt; 	&lt;select id="findRoleByUserId" resultType="com.c3stones.entity.SysRole" parameterType="long"&gt; 		SELECT 			r.* 		FROM 			sys_role r 		LEFT JOIN sys_user_role ur ON ur.role_id = r.id 		WHERE 			ur.user_id = #{userId} 	&lt;/select&gt; 	 	&lt;!-- 根据用户ID查询权限 --&gt; 	&lt;select id="findAuthByUserId" resultType="com.c3stones.entity.SysAuth" parameterType="long"&gt; 		SELECT 			a.* 		FROM 			sys_auth a 		LEFT JOIN sys_role_auth ra ON ra.auth_id = a.id 		LEFT JOIN sys_user_role ur ON ur.role_id = ra.role_id 		WHERE 			ur.user_id = #{userId} 	&lt;/select&gt; 	 &lt;/mapper&gt;</code></pre> <ul> <li>编写用户认证Service，必须实现org.springframework.security.core.userdetails.UserDetailsService</li> </ul> <pre class="has"><code>import java.util.HashSet; import java.util.List; import java.util.Set;  import org.springframework.beans.BeanUtils; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.stereotype.Service;  import com.c3stones.entity.SysRole; import com.c3stones.entity.SysUser; import com.c3stones.security.entity.SysUserDetails; import com.c3stones.service.SysUserService;  /**  * 用户登录Service  *   * @author CL  *  */ @Service public class SysUserDetailsService implements UserDetailsService {  	@Autowired 	private SysUserService sysUserService;  	/** 	 * 根据用户名查用户信息 	 *  	 * @param username 用户名 	 * @return 用户详细信息 	 */ 	@Override 	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { 		SysUser sysUser = sysUserService.findUserByUserName(username); 		if (sysUser != null) { 			SysUserDetails sysUserDetails = new SysUserDetails(); 			BeanUtils.copyProperties(sysUser, sysUserDetails);  			Set&lt;GrantedAuthority&gt; authorities = new HashSet&lt;&gt;(); // 角色集合  			List&lt;SysRole&gt; roleList = sysUserService.findRoleByUserId(sysUserDetails.getId()); 			roleList.forEach(role -&gt; { 				authorities.add(new SimpleGrantedAuthority("ROLE_" + role.getRoleName())); 			});  			sysUserDetails.setAuthorities(authorities);  			return sysUserDetails; 		} 		return null; 	}  }</code></pre> <ul> <li>编写用户登录验证处理类</li> </ul> <pre class="has"><code>import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.authentication.AuthenticationProvider; import org.springframework.security.authentication.BadCredentialsException; import org.springframework.security.authentication.LockedException; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.AuthenticationException; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.stereotype.Component;  import com.c3stones.security.entity.SysUserDetails; import com.c3stones.security.service.SysUserDetailsService;  /**  * 用户登录验证处理类  *   * @author CL  *  */ @Component public class UserAuthenticationProvider implements AuthenticationProvider {  	@Autowired 	private SysUserDetailsService userDetailsService;  	/** 	 * 身份验证 	 */ 	@Override 	public Authentication authenticate(Authentication authentication) throws AuthenticationException { 		String username = (String) authentication.getPrincipal(); // 获取用户名 		String password = (String) authentication.getCredentials(); // 获取密码  		SysUserDetails sysUserDetails = (SysUserDetails) userDetailsService.loadUserByUsername(username); 		if (sysUserDetails == null) { 			throw new UsernameNotFoundException("用户名不存在"); 		}  		if (!new BCryptPasswordEncoder().matches(password, sysUserDetails.getPassword())) { 			throw new BadCredentialsException("用户名或密码错误"); 		}  		if (sysUserDetails.getStatus().equals("2")) { 			throw new LockedException("用户已禁用"); 		}  		return new UsernamePasswordAuthenticationToken(sysUserDetails, password, sysUserDetails.getAuthorities()); 	}  	/** 	 * 支持指定的身份验证 	 */ 	@Override 	public boolean supports(Class&lt;?&gt; authentication) { 		return true; 	}  }</code></pre> <ul> <li>编写用户权限注解处理类</li> </ul> <pre class="has"><code>import java.io.Serializable; import java.util.HashSet; import java.util.List; import java.util.Set;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.access.PermissionEvaluator; import org.springframework.security.core.Authentication; import org.springframework.stereotype.Component;  import com.c3stones.entity.SysAuth; import com.c3stones.security.entity.SysUserDetails; import com.c3stones.service.SysUserService;  /**  * 用户权限注解处理类  *   * @author CL  *  */ @Component public class UserPermissionEvaluator implements PermissionEvaluator {  	@Autowired 	private SysUserService sysUserService;  	/** 	 * 判断是否拥有权限 	 *  	 * @param authentication 用户身份 	 * @param targetUrl      目标路径 	 * @param permission     路径权限 	 *  	 * @return 是否拥有权限 	 */ 	@Override 	public boolean hasPermission(Authentication authentication, Object targetUrl, Object permission) { 		SysUserDetails sysUserDetails = (SysUserDetails) authentication.getPrincipal();  		Set&lt;String&gt; permissions = new HashSet&lt;String&gt;(); // 用户权限  		List&lt;SysAuth&gt; authList = sysUserService.findAuthByUserId(sysUserDetails.getId()); 		authList.forEach(auth -&gt; { 			permissions.add(auth.getPermission()); 		});  		// 判断是否拥有权限 		if (permissions.contains(permission.toString())) { 			return true; 		} 		return false; 	}  	@Override 	public boolean hasPermission(Authentication authentication, Serializable targetId, String targetType, 			Object permission) { 		return false; 	}  }</code></pre> <p>6. 编写JWT过滤器</p> <pre class="has"><code>import java.io.IOException;  import javax.servlet.FilterChain; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;  import com.c3stones.security.config.JWTConfig; import com.c3stones.security.entity.SysUserDetails; import com.c3stones.security.utils.JWTTokenUtil;  /**  * JWT权限过滤器，用于验证Token是否合法  *   * @author CL  *  */ public class JWTAuthenticationFilter extends BasicAuthenticationFilter {  	public JWTAuthenticationFilter(AuthenticationManager authenticationManager) { 		super(authenticationManager); 	}  	@Override 	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) 			throws IOException, ServletException { 		// 取出Token 		String token = request.getHeader(JWTConfig.tokenHeader);  		if (token != null &amp;&amp; token.startsWith(JWTConfig.tokenPrefix)) { 			SysUserDetails sysUserDetails = JWTTokenUtil.parseAccessToken(token);  			if (sysUserDetails != null) { 				UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken( 						sysUserDetails, sysUserDetails.getId(), sysUserDetails.getAuthorities()); 				SecurityContextHolder.getContext().setAuthentication(authentication); 			} 		} 		filterChain.doFilter(request, response); 	}  }</code></pre> <p>7. 编写Spring Security核心配置类</p> <pre class="has"><code>import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.config.http.SessionCreationPolicy; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler;  import com.c3stones.security.UserAuthenticationProvider; import com.c3stones.security.UserPermissionEvaluator; import com.c3stones.security.filter.JWTAuthenticationFilter; import com.c3stones.security.handler.UserAccessDeniedHandler; import com.c3stones.security.handler.UserLoginFailureHandler; import com.c3stones.security.handler.UserLoginSuccessHandler; import com.c3stones.security.handler.UserLogoutSuccessHandler; import com.c3stones.security.handler.UserNotLoginHandler;  /**  * 系统安全核心配置  *   * @author CL  *  */ @Configuration @EnableWebSecurity @EnableGlobalMethodSecurity(prePostEnabled = true) // 开启方法权限注解 public class SysSecurityConfig extends WebSecurityConfigurerAdapter {  	/** 	 * 无权限处理类 	 */ 	@Autowired 	private UserAccessDeniedHandler userAccessDeniedHandler;  	/** 	 * 用户未登录处理类 	 */ 	@Autowired 	private UserNotLoginHandler userNotLoginHandler;  	/** 	 * 用户登录成功处理类 	 */ 	@Autowired 	private UserLoginSuccessHandler userLoginSuccessHandler;  	/** 	 * 用户登录失败处理类 	 */ 	@Autowired 	private UserLoginFailureHandler userLoginFailureHandler;  	/** 	 * 用户登出成功处理类 	 */ 	@Autowired 	private UserLogoutSuccessHandler userLogoutSuccessHandler;  	/** 	 * 用户登录验证 	 */ 	@Autowired 	private UserAuthenticationProvider userAuthenticationProvider;  	/** 	 * 用户权限注解 	 */ 	@Autowired 	private UserPermissionEvaluator userPermissionEvaluator;  	/** 	 * 加密方式 	 *  	 * @return 	 */ 	@Bean 	public BCryptPasswordEncoder bCryptPasswordEncoder() { 		return new BCryptPasswordEncoder(); 	}  	/** 	 * 注入自定义PermissionEvaluator 	 *  	 * @return 	 */ 	@Bean 	public DefaultWebSecurityExpressionHandler userSecurityExpressionHandler() { 		DefaultWebSecurityExpressionHandler handler = new DefaultWebSecurityExpressionHandler(); 		handler.setPermissionEvaluator(userPermissionEvaluator); 		return handler; 	}  	/** 	 * 用户登录验证 	 */ 	@Override 	protected void configure(AuthenticationManagerBuilder auth) { 		auth.authenticationProvider(userAuthenticationProvider); 	}  	/** 	 * 安全权限配置 	 */ 	@Override 	protected void configure(HttpSecurity http) throws Exception { 		http.authorizeRequests() // 权限配置 				.antMatchers(JWTConfig.antMatchers.split(",")).permitAll()// 获取白名单（不进行权限验证） 				.anyRequest().authenticated() // 其他的需要登陆后才能访问 				.and().httpBasic().authenticationEntryPoint(userNotLoginHandler) // 配置未登录处理类 				.and().formLogin().loginProcessingUrl("/login/submit")// 配置登录URL 				.successHandler(userLoginSuccessHandler) // 配置登录成功处理类 				.failureHandler(userLoginFailureHandler) // 配置登录失败处理类 				.and().logout().logoutUrl("/logout/submit")// 配置登出地址 				.logoutSuccessHandler(userLogoutSuccessHandler) // 配置用户登出处理类 				.and().exceptionHandling().accessDeniedHandler(userAccessDeniedHandler)// 配置没有权限处理类 				.and().cors()// 开启跨域 				.and().csrf().disable(); // 禁用跨站请求伪造防护 		http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); // 禁用session（使用Token认证） 		http.headers().cacheControl(); // 禁用缓存 		http.addFilter(new JWTAuthenticationFilter(authenticationManager()));  添加JWT过滤器 	}  }</code></pre> <p>8. 编写测试Controller</p> <ul> <li>编写注册用户Controller</li> </ul> <pre class="has"><code>import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  import com.c3stones.entity.SysUser; import com.c3stones.entity.SysUserRole; import com.c3stones.service.SysUserRoleService; import com.c3stones.service.SysUserService; import com.c3stones.utils.ResponseUtils;  /**  * 注册用户实例Contrller  *   * @author CL  *  */ @RestController @RequestMapping(value = "/register") public class RegisterController {  	@Autowired 	private BCryptPasswordEncoder bCryptPasswordEncoder;  	@Autowired 	private SysUserService sysUserService;  	@Autowired 	private SysUserRoleService sysUserRoleService;  	/** 	 * 注册普通用户 	 *  	 * @param username 用户名 	 * @param password 密码 	 * @return 	 */ 	@RequestMapping(value = "/user") 	public ResponseUtils user(String username, String password) { 		SysUser sysUser = new SysUser(); 		sysUser.setUsername(username); 		sysUser.setPassword(bCryptPasswordEncoder.encode(password)); 		sysUser.setStatus("0"); 		sysUserService.save(sysUser);  		// 注册普通用户 		SysUserRole sysUserRole = new SysUserRole(); 		sysUserRole.setUserId(sysUser.getId()); 		sysUserRole.setRoleId(2L); 		sysUserRoleService.save(sysUserRole);  		return ResponseUtils.success(sysUser); 	} }</code></pre> <ul> <li>编写普通用户Controller</li> </ul> <pre><code class="language-java">import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.access.prepost.PreAuthorize; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  import com.c3stones.entity.SysUser; import com.c3stones.security.entity.SysUserDetails; import com.c3stones.service.SysUserService; import com.c3stones.utils.ResponseUtils;  /**  * 普通用户Contrller  *   * @author CL  *  */ @RestController @RequestMapping(value = "/user") public class UserController {  	@Autowired 	private SysUserService sysUserSerivce;  	/** 	 * 查询用户信息 	 *  	 * @return 	 */ 	@PreAuthorize(value = "hasPermission('/user/info', 'sys:user:info')") 	@RequestMapping(value = "/info") 	public ResponseUtils info() { 		SysUserDetails sysUserDetails = (SysUserDetails) SecurityContextHolder.getContext().getAuthentication() 				.getPrincipal(); 		SysUser sysUser = sysUserSerivce.getById(sysUserDetails.getId()); 		return ResponseUtils.success(sysUser); 	}  }</code></pre> <ul> <li>编写管理员Controller</li> </ul> <pre><code class="language-java">import java.util.List;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.access.prepost.PreAuthorize; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  import com.c3stones.entity.SysAuth; import com.c3stones.entity.SysRole; import com.c3stones.entity.SysUser; import com.c3stones.service.SysUserService; import com.c3stones.utils.ResponseUtils;  /**  * 管理员Contrller  *   * @author CL  *  */ @RestController @RequestMapping(value = "/admin") public class AdminController {  	@Autowired 	private SysUserService sysUserSerivce;  	/** 	 * 查询用户信息 	 *  	 * @return 	 */ 	@PreAuthorize(value = "hasRole('ADMIN')") 	@RequestMapping(value = "/list") 	public ResponseUtils list() { 		List&lt;SysUser&gt; userList = sysUserSerivce.list(); 		return ResponseUtils.success(userList); 	}  	/** 	 * 查询用户角色 	 *  	 * @return 	 */ 	@PreAuthorize(value = "hasRole('ADMIN') or hasPermission('/user/role', 'sys:role:info')") 	@RequestMapping(value = "/role") 	public ResponseUtils role(Long id) { 		List&lt;SysRole&gt; roleList = sysUserSerivce.findRoleByUserId(id); 		return ResponseUtils.success(roleList); 	}  	/** 	 * 查询用户权限 	 *  	 * @return 	 */ 	@PreAuthorize(value = "hasAnyRole('ADMIN', 'USER') and hasPermission('/user/auth', 'sys:auth:info')") 	@RequestMapping(value = "/auth") 	public ResponseUtils auth(Long id) { 		List&lt;SysAuth&gt; authList = sysUserSerivce.findAuthByUserId(id); 		return ResponseUtils.success(authList); 	}  }</code></pre> <p>9. 测试</p> <p>  使用curl插件进行测试，建议使用Postman测试。</p> <pre class="has"><code># 注册用户：  curl "http://127.0.0.1:8080/register/user?username=C3Stones&amp;password=123456"  # 结果： {"code":200,"msg":"成功","data":{"id":3,"username":"C3Stones","password":"$2a$10$Z6a7DSehk58ypqyWzfFAbOR0gaqpwVzY9aNXKqf4UhDCSJxsbDqDK","status":"0"}}  # 查询用户信息： curl "http://127.0.0.1:8080/user/info"  # 结果： {"code":401,"data":"Full authentication is required to access this resource","msg":"未登录"}  # 不存在用户登录： curl -X POST "http://127.0.0.1:8080/login/submit?username=guest&amp;password=123456"  # 结果： {"code":500,"data":"用户名不存在","msg":"登录失败"}  # 密码错误用户登录： curl -X POST "http://127.0.0.1:8080/login/submit?username=user&amp;password=123"  # 结果： {"code":500,"data":"用户名或密码错误","msg":"登录失败"}  # 将刚刚注册的人的状态在数据库中改成2（禁用状态），登录： curl -X POST "http://127.0.0.1:8080/login/submit?username=C3Stones&amp;password=123456"  # 结果： {"code":500,"data":"用户已禁用","msg":"登录失败"}  # 普通用户登录： curl -X POST "http://127.0.0.1:8080/login/submit?username=user&amp;password=123456"  # 结果： {"code":200,"data":{"token":"Bearer eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiIyIiwic3ViIjoidXNlciIsImlhdCI6MTU5NDcwNzA0OSwiaXNzIjoiQzNTdG9uZXMiLCJleHAiOjE1OTQ3OTM0NDksImF1dGhvcml0aWVzIjoiW3tcImF1dGhvcml0eVwiOlwiUk9MRV9VU0VSXCJ9XSJ9.PSwPsO-ECc6EHz84-nM881pMcMfbjOpzr5N2gpXj9ku-Z5YrjEP-_c08anrBalV2F4-MSA-oy8qQNM71b_QPSA"},"msg":"登录成功"}  # 查询用户信息：  curl -H "Authorization:Bearer eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiIyIiwic3ViIjoidXNlciIsImlhdCI6MTU5NDcwNzA0OSwiaXNzIjoiQzNTdG9uZXMiLCJleHAiOjE1OTQ3OTM0NDksImF1dGhvcml0aWVzIjoiW3tcImF1dGhvcml0eVwiOlwiUk9MRV9VU0VSXCJ9XSJ9.PSwPsO-ECc6EHz84-nM881pMcMfbjOpzr5N2gpXj9ku-Z5YrjEP-_c08anrBalV2F4-MSA-oy8qQNM71b_QPSA" "http://127.0.0.1:8080/user/info"  # 结果： {"code":200,"msg":"成功","data":{"id":2,"username":"user","password":"$2a$10$szHoqQ64g66PymVJkip98.Fap21Csy8w.RD8v5Dhq08BMEZ9KaSmS","status":"0"}}  # 查询用户列表： curl -H "Authorization:Bearer eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiIyIiwic3ViIjoidXNlciIsImlhdCI6MTU5NDcwNzA0OSwiaXNzIjoiQzNTdG9uZXMiLCJleHAiOjE1OTQ3OTM0NDksImF1dGhvcml0aWVzIjoiW3tcImF1dGhvcml0eVwiOlwiUk9MRV9VU0VSXCJ9XSJ9.PSwPsO-ECc6EHz84-nM881pMcMfbjOpzr5N2gpXj9ku-Z5YrjEP-_c08anrBalV2F4-MSA-oy8qQNM71b_QPSA" "http://127.0.0.1:8080/admin/list"  # 结果： {"code":403,"data":"不允许访问","msg":"拒绝访问"}  # 管理员登录： curl -X POST "http://127.0.0.1:8080/login/submit?username=admin&amp;password=123456"  # 结果： {"code":200,"data":{"token":"Bearer eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiIxIiwic3ViIjoiYWRtaW4iLCJpYXQiOjE1OTQ3MDc1MDAsImlzcyI6IkMzU3RvbmVzIiwiZXhwIjoxNTk0NzkzOTAwLCJhdXRob3JpdGllcyI6Ilt7XCJhdXRob3JpdHlcIjpcIlJPTEVfQURNSU5cIn1dIn0.3yL2Lpbmau5X6PA1OmnE4FFwOzrqwRaFcRa8OfRAgHY45VVJfGfm5kp8qfk96HvigaPQvzf8HmMC_Xx75Lwr8Q"},"msg":"登录成功"}  # 查询用户列表：  curl -H "Authorization:Bearer eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiIxIiwic3ViIjoiYWRtaW4iLCJpYXQiOjE1OTQ3MDc1MDAsImlzcyI6IkMzU3RvbmVzIiwiZXhwIjoxNTk0NzkzOTAwLCJhdXRob3JpdGllcyI6Ilt7XCJhdXRob3JpdHlcIjpcIlJPTEVfQURNSU5cIn1dIn0.3yL2Lpbmau5X6PA1OmnE4FFwOzrqwRaFcRa8OfRAgHY45VVJfGfm5kp8qfk96HvigaPQvzf8HmMC_Xx75Lwr8Q" "http://127.0.0.1:8080/admin/list"  # 结果： {"code":200,"msg":"成功","data":[{"id":1,"username":"admin","password":"$2a$10$5T851lZ7bc2U87zjt/9S6OkwmLW62tLeGLB2aCmq3XRZHA7OI7Dqa","status":"0"},{"id":2,"username":" user","password":"$2a$10$szHoqQ64g66PymVJkip98.Fap21Csy8w.RD8v5Dhq08BMEZ9KaSmS","status":"0"},{"id":3,"username":"C3Stones","password":"$2a$10$O.1ynDeJtlaG9roOJoUZzukc6aGfqFo/YW5ErRERQD2eC5r5cV9dC","status":"0"}]}</code></pre> <p>10. 权限注解示例</p> <table> <thead> <tr> <th>权限注解</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>hasRole('ADMIN')</td> <td>拥有ADMIN角色才可访问</td> </tr> <tr> <td>hasPermission('/user/list', 'sys:role:info')</td> <td>拥有sys:role:info权限才可访问/user/list接口</td> </tr> <tr> <td>hasAnyRole('ADMIN', 'USER')</td> <td>拥有ADMIN角色或者USER角色均可访问</td> </tr> <tr> <td>hasRole('ADMIN') and hasRole('USER')</td> <td>拥有ADMIN角色和USER角色才可访问</td> </tr> <tr> <td>hasRole('ADMIN') or hasPermission('/user/list', 'sys:role:info')</td> <td>拥有ADMIN角色或者拥有sys:role:info权限均可访问</td> </tr> </tbody> </table> <p>  其他权限注解请自行查找。</p> <p>11. 项目地址</p> <p>  <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/C3Stones/blog"  rel="nofollow">spring-security-jwt-demo</a></p> </div></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-140.htm">【Spring】——事务实现过程及原理</a></p>
                                        <p>下一个：<a href="/html/category/article-142.htm">Zookeeper的Watch机制实现配置中心</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-209.htm">Java基础知识 29（同步代码块，同步方法，静态同步方法，Lock锁，死锁问题）</a></h4>
                <p>Java基础知识 29  先回顾一下上节课讲的多个窗口共同卖票的问题，首先我们设置三个不同的线程来同步进行卖票，我们把所有的票数全部设置成静态变量，让这三个线程可以共享这些票。通过设置这个静态变量我们</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-205.htm">Ribbon（一）远程调用RestTemplate</a></h4>
                <p>目录 一、RestTemplate介绍 二、需求说明 1、业务结构及说明 三、模块搭建 1、新建一个maven项目 2、添加ribbon依赖 3、编辑yml 4、主程序 5、编辑RibbonContr</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-223.htm">Spring Security——【认证、授权、注销及权限控制】</a></h4>
                <p>目录 Spring Security简介： 实验环境搭建： 认证和授权 权限控制和注销  Spring Security简介： Spring Security 是针对Spring项目的安全框架，也是S</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-244.htm">Spring按业务模块输出日志到不同的文件_在线工具</a></h4>
                <p>一、背景 在我们开发的过程中，可能存在如下情况： 1、有些时候我们需要调用第三方的接口，一般情况下，调用接口，我们都会记录请求的入参和响应的。如果我们自己系统的日志和第三方的日志混合到一个日志文件中，</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-233.htm">使用Python实现KNN算法解决简单分类问题</a></h4>
                <p>使用Python实现KNN算法解决简单分类问题 KNN分类 KNN算法属于监督学习算法，它可以解决分类问题，也可以解决回归问题。对于一组带标签的数据，当我们使用KNN算法进行分类时，有两种分类方式。K</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-239.htm">vue中watch监听，ajax异步问题解决</a></h4>
                <p>1.组装参数调方法 getResult(){ 	//组装requestParam1和requestParam2参数  	let requestParam1 = {} 	let requestParam</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-251.htm">SpringMVC拦截器path路径的坑</a></h4>
                <p>SpringMVC提供了很方便的拦截器供我们开发使用。在配置文件中通过&lt;mvc:mapping path="" /&gt;进行配置拦截的路径，但是这个path在配置的时候有一个小坑 我们都知道在</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-234.htm">Pandas 如何处理超大规模数据</a></h4>
                <p>作者&nbsp;|&nbsp;Sara&nbsp;A.&nbsp;Metwalli 译者&nbsp;|&nbsp;盖磊 策划&nbsp;|&nbsp;陈思  处理大规模数据集时常是棘手的事情，尤其在内</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-229.htm">pandas高阶应用</a></h4>
                <p>1、时间序列相关操作 pd的date_range中的基本时间序列频率     Alias   Description（偏移量类型）   说明     B   business day frequenc</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-255.htm">解决antdv的table因数据量过大导致的卡顿问题</a></h4>
                <p>遇到的问题：antdv的table表格使用时因数据量过大，造成标签页切换卡顿的问题 解决办法：绑定滚动事件，页面只显示在可视区域内的数据，没在可视区域内的数据不予展示，dom元素的scrollHeig</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>