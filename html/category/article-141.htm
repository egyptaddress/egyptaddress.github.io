<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-141.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Citus 分布式 PostgreSQL 集群 &#8211; SQL Reference(查询处理) - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Citus 分布式 PostgreSQL 集群 &#8211; SQL Reference(查询处理)</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8edc4924ead4cec602cc8454eeeb1474.jpg" alt="Citus 分布式 PostgreSQL 集群 - SQL Reference(查询处理)"></p> <p>一个<code>Citus</code> 集群由一个<code>coordinator</code> 实例和多个<code>worker</code> 实例组成。 数据在<code>worker</code> 上进行分片和复制，而<code>coordinator</code> 存储有关这些分片的元数据。向集群发出的所有查询都通过<code>coordinator</code> 执行。<code>coordinator</code> 将查询划分为更小的查询片段，其中每个查询片段可以在分片上独立运行。然后协调器将查询片段分配给<code>worker</code>，监督他们的执行，合并他们的结果，并将最终结果返回给用户。 查询处理架构可以通过下图进行简要描述。</p> <p><code>Citus</code> 的查询处理管道涉及两个组件：</p> <ul> <li><strong>分布式查询计划器和执行器</strong></li> <li><strong>PostgreSQL 计划器和执行器</strong></li> </ul> <p>我们将在后续部分中更详细地讨论它们。</p> <h2 id="分布式查询计划器">分布式查询计划器</h2> <p><code>Citus</code> 的分布式查询计划器接收<code>SQL</code> 查询并规划它以进行分布式执行。</p> <p>对于<code>SELECT</code> 查询，计划器首先创建输入查询的计划树，并将其转换为可交换和关联形式，以便可以并行化。 它还应用了一些优化以确保以可扩展的方式执行查询，并最大限度地减少网络<code>I/O</code>。</p> <p>接下来，计划器将查询分为两部分 - 在<code>coordinator</code> 上运行的<code>coordinator</code> 查询和在<code>worker</code> 上的各个分片上运行的<code>worker</code> 查询片段。 然后，计划器将这些查询片段分配给<code>worker</code>，以便有效地使用他们的所有资源。 在这一步之后，分布式查询计划被传递给分布式执行器执行。</p> <p>分布列上的键值查找或修改查询的规划过程略有不同，因为它们恰好命中一个分片。一旦计划器收到传入的查询，它需要决定查询应该路由到的正确分片。 为此，它提取传入行中的分布列并查找元数据以确定查询的正确分片。 然后，计划器重写该命令的<code>SQL</code> 以引用分片表而不是原始表。 然后将该重写的计划传递给分布式执行器。</p> <h2 id="分布式查询执行器">分布式查询执行器</h2> <p><code>Citus</code> 的分布式执行器运行分布式查询计划并处理故障。 执行器非常适合快速响应涉及过滤器、聚合和共置连接的查询，以及运行具有完整<code>SQL</code> 覆盖的单租户查询。它根据需要为每个分片打开一个与<code>woker</code> 的连接，并将所有片段查询发送给他们。 然后它从每个片段查询中获取结果，合并它们，并将最终结果返回给用户。</p> <h3 id="子查询cte-push-pull-执行">子查询/CTE Push-Pull 执行</h3> <p>如有必要，<code>Citus</code> 可以将来自子查询和<code>CTE</code> 的结果收集到<code>coordinator</code> 节点中，然后将它们推送回<code>worker</code> 以供外部查询使用。这允许<code>Citus</code> 支持更多种类的<code>SQL</code> 构造。</p> <p>例如，在<code>WHERE</code> 子句中包含子查询有时不能与主查询同时执行内联，而必须单独执行。假设<code>Web</code> 分析应用程序维护一个按<code>page_id</code> 分区的<code>page_views</code> 表。要查询前<code>20</code> 个访问量最大的页面上的访问者主机数，我们可以使用子查询来查找页面列表，然后使用外部查询来计算主机数。</p> <pre><code class="language-sql">SELECT page_id, count(distinct host_ip) FROM page_views WHERE page_id IN (   SELECT page_id   FROM page_views   GROUP BY page_id   ORDER BY count(*) DESC   LIMIT 20 ) GROUP BY page_id;</code></pre> <p>执行器希望通过<code>page_id</code> 对每个分片运行此查询的片段，计算不同的<code>host_ips</code>，并在<code>coordinator</code> 上组合结果。但是，子查询中的<code>LIMIT</code> 意味着子查询不能作为片段的一部分执行。通过递归规划查询，<code>Citus</code> 可以单独运行子查询，将结果推送给所有<code>worker</code>，运行主片段查询，并将结果拉回<code>coordinator</code>。<code>push-pull(推拉)</code> 设计支持上述子查询。</p> <p>让我们通过查看此查询的<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.postgresql.org/docs/current/static/sql-explain.html"  target="_blank" rel="nofollow">EXPLAIN</a> 输出来了解这一点。它相当参与：</p> <pre><code class="language-sql">GroupAggregate  (cost=0.00..0.00 rows=0 width=0)   Group Key: remote_scan.page_id   -&gt;  Sort  (cost=0.00..0.00 rows=0 width=0)     Sort Key: remote_scan.page_id     -&gt;  Custom Scan (Citus Adaptive)  (cost=0.00..0.00 rows=0 width=0)       -&gt;  Distributed Subplan 6_1         -&gt;  Limit  (cost=0.00..0.00 rows=0 width=0)           -&gt;  Sort  (cost=0.00..0.00 rows=0 width=0)             Sort Key: COALESCE((pg_catalog.sum((COALESCE((pg_catalog.sum(remote_scan.worker_column_2))::bigint, '0'::bigint))))::bigint, '0'::bigint) DESC             -&gt;  HashAggregate  (cost=0.00..0.00 rows=0 width=0)               Group Key: remote_scan.page_id               -&gt;  Custom Scan (Citus Adaptive)  (cost=0.00..0.00 rows=0 width=0)                 Task Count: 32                 Tasks Shown: One of 32                 -&gt;  Task                   Node: host=localhost port=9701 dbname=postgres                   -&gt;  HashAggregate  (cost=54.70..56.70 rows=200 width=12)                     Group Key: page_id                     -&gt;  Seq Scan on page_views_102008 page_views  (cost=0.00..43.47 rows=2247 width=4)       Task Count: 32       Tasks Shown: One of 32       -&gt;  Task         Node: host=localhost port=9701 dbname=postgres         -&gt;  HashAggregate  (cost=84.50..86.75 rows=225 width=36)           Group Key: page_views.page_id, page_views.host_ip           -&gt;  Hash Join  (cost=17.00..78.88 rows=1124 width=36)             Hash Cond: (page_views.page_id = intermediate_result.page_id)             -&gt;  Seq Scan on page_views_102008 page_views  (cost=0.00..43.47 rows=2247 width=36)             -&gt;  Hash  (cost=14.50..14.50 rows=200 width=4)               -&gt;  HashAggregate  (cost=12.50..14.50 rows=200 width=4)                 Group Key: intermediate_result.page_id                 -&gt;  Function Scan on read_intermediate_result intermediate_result  (cost=0.00..10.00 rows=1000 width=4)</code></pre> <p>让我们把它拆开并检查每一块。</p> <pre><code class="language-sql">GroupAggregate  (cost=0.00..0.00 rows=0 width=0)   Group Key: remote_scan.page_id   -&gt;  Sort  (cost=0.00..0.00 rows=0 width=0)     Sort Key: remote_scan.page_id</code></pre> <p>树的<code>root</code> 是<code>coordinator</code> 节点对<code>worker</code> 的结果所做的事情。 在这种情况下，它正在对它们进行分组，并且<code>GroupAggregate</code> 要求首先对它们进行排序。</p> <pre><code class="language-sql">    -&gt;  Custom Scan (Citus Adaptive)  (cost=0.00..0.00 rows=0 width=0)       -&gt;  Distributed Subplan 6_1 .</code></pre> <p>自定义扫描有两个大子树，从“分布式子计划”开始。</p> <pre><code class="language-sql">        -&gt;  Limit  (cost=0.00..0.00 rows=0 width=0)           -&gt;  Sort  (cost=0.00..0.00 rows=0 width=0)             Sort Key: COALESCE((pg_catalog.sum((COALESCE((pg_catalog.sum(remote_scan.worker_column_2))::bigint, '0'::bigint))))::bigint, '0'::bigint) DESC             -&gt;  HashAggregate  (cost=0.00..0.00 rows=0 width=0)               Group Key: remote_scan.page_id               -&gt;  Custom Scan (Citus Adaptive)  (cost=0.00..0.00 rows=0 width=0)                 Task Count: 32                 Tasks Shown: One of 32                 -&gt;  Task                   Node: host=localhost port=9701 dbname=postgres                   -&gt;  HashAggregate  (cost=54.70..56.70 rows=200 width=12)                     Group Key: page_id                     -&gt;  Seq Scan on page_views_102008 page_views  (cost=0.00..43.47 rows=2247 width=4) .</code></pre> <p>工作节点为<code>32</code> 个分片中的每一个运行上述内容（<code>Citus</code> 正在选择一个代表进行显示）。 我们可以识别<code>IN (...)</code> 子查询的所有部分：排序、分组和限制。 当所有<code>worker</code> 完成此查询后，他们会将其输出发送回<code>coordinator</code>，<code>coordinator</code> 将其组合为“中间结果”。</p> <pre><code class="language-sql">      Task Count: 32       Tasks Shown: One of 32       -&gt;  Task         Node: host=localhost port=9701 dbname=postgres         -&gt;  HashAggregate  (cost=84.50..86.75 rows=225 width=36)           Group Key: page_views.page_id, page_views.host_ip           -&gt;  Hash Join  (cost=17.00..78.88 rows=1124 width=36)             Hash Cond: (page_views.page_id = intermediate_result.page_id) .</code></pre> <p><code>Citus</code> 在第二个子树中启动另一个执行器作业。它将在<code>page_views</code> 中计算不同的主机。 它使用<code>JOIN</code> 连接中间结果。中间结果将帮助它限制在前二十页。</p> <pre><code class="language-sql">            -&gt;  Seq Scan on page_views_102008 page_views  (cost=0.00..43.47 rows=2247 width=36)             -&gt;  Hash  (cost=14.50..14.50 rows=200 width=4)               -&gt;  HashAggregate  (cost=12.50..14.50 rows=200 width=4)                 Group Key: intermediate_result.page_id                 -&gt;  Function Scan on read_intermediate_result intermediate_result  (cost=0.00..10.00 rows=1000 width=4) .</code></pre> <p>工作人员使用<code>read_intermediate_result</code> 函数在内部检索中间结果，该函数从<code>coordinator</code> 节点复制的文件中加载数据。</p> <p>这个例子展示了<code>Citus</code> 如何使用分布式子计划在多个步骤中执行查询，以及如何使用<code>EXPLAIN</code> 来了解分布式查询执行。</p> <h2 id="postgresql-计划器和执行器">PostgreSQL 计划器和执行器</h2> <p>一旦分布式执行器将查询片段发送给<code>worker</code>，它们就会像常规<code>PostgreSQL</code> 查询一样被处理。 该<code>worker</code> 上的<code>PostgreSQL</code> 计划程序选择在相应分片表上本地执行该查询的最佳计划。<code>PostgreSQL</code> 执行器然后运行该查询并将查询结果返回给分布式执行器。您可以从<code>PostgreSQL</code> 手册中了解有关<code>PostgreSQL</code><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.postgresql.org/docs/current/static/planner-optimizer.html"  target="_blank" rel="nofollow">计划器</a>和<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.postgresql.org/docs/current/static/executor.html"  target="_blank" rel="nofollow">执行器</a>的更多信息。最后，分布式执行器将结果传递给<code>coordinator</code> 进行最终聚合。</p> <ul> <li><small>计划器</small> <ul> <li><small><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.postgresql.org/docs/current/static/planner-optimizer.html"  target="_blank" rel="nofollow">http://www.postgresql.org/docs/current/static/planner-optimizer.html</a></small></li> </ul> </li> <li><small>执行器</small> <ul> <li><small><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.postgresql.org/docs/current/static/executor.html"  target="_blank" rel="nofollow">http://www.postgresql.org/docs/current/static/executor.html</a></small></li> </ul> </li> </ul> <ol></ol> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-140.htm">Springboot过滤器和拦截器详解及使用场景</a></p>
                                        <p>下一个：<a href="/html/category/article-142.htm">那些年踩过的Java日期时间的坑</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1321.htm">Spring Boot的依赖配置文件的解析</a></h4>
                <p>SpringBoot笔记-day01 在pom.xml中 &lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&l</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2240.htm">webpack 执行npm run 时，因为版本依赖报的那些错</a></h4>
                <p>环境介绍 webpack 4.34.0 webpack-dev-server 3.7.0 报错 Error: invalid "instanceof" keyword value Promise   </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3122.htm">什么是https和http（https和http的区别）_在线工具</a></h4>
                <p>前言 因为工作需要，需要用到大量的关于 HTTP 协议的知识，目前掌握的关于 HTTP 请求以及协议的知识都是零散的，打算针对知识盲区系统的学习一些，理清概念。 为什么会出现 HTTPS 因为 HTT</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4369.htm">符合动物医院法定条件有哪些内容和要求呢（动物医院资质级别有哪些）</a></h4>
                <p>摘要：       今天给各位分享符合动物医院法定条件有哪些内容和要求呢的知识，其中也会对动物医院资质级别有哪些进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2530.htm">MySQL中的TEXT数据类型是什么？</a></h4>
                <p>TEXT数据对象对于在MySQL数据库中存储长格式文本字符串很有用。以下是关于TEXT数据类型的一些要点-   TEXT是列类型的族，旨在用作大容量字符存储。   实际的TEXT列类型为四种类型-TI</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3121.htm">windows 平台下编译openssl 最新版本-3.0.5</a></h4>
                <p>根据openssl 官方仓库的描述，他们不提供二进制版本的文件，需要我们自己针对不同的平台打包 环境配置 安装好以下软件，并配置好环境变量  Perl Nasm namke.exe cl.exe 最后</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-526.htm">SpringBoot生成docx文件并返回其Base64编码</a></h4>
                <p>直接上源码，      @ResponseBody     @RequestMapping(value = "/getDocx", method = RequestMethod.GET)     pu</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1630.htm">vue的路由组件的引入以及路由组件懒加载和router-link</a></h4>
                <p>App.vue &lt;template&gt;   &lt;div&gt;     &lt;router-link to="/"&gt;首页&lt;/router-link&gt;     &lt;</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-258.htm">你确定你会用Enum枚举了？</a></h4>
                <p>一般在我们开发时如果能使用枚举罗列的，一般都会定义一个枚举类型。将枚举类型作为方法的参数，可以方便的进行调用，给我们带来不少的遍历，当然有时候它还不如直接用一个int类型带来，带来一定灵活性。但只要能</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4068.htm">Typora + EasyBlogImageForTypora直接上传图片到博客园_在线工具</a></h4>
                <p>1.描述问题 Gitee外链访问失效后一直在寻找有效措施，因为本人使用惯了typora，故使用typora + EasyBlogImageForTypora+Snipaste进行博客编写以及图片上传 </p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">12</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>