<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-204.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>JavaWeb项目基于SpringBoot框架实现统一的数据返回格式 + 统一异常处理 + 统一日志处理 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">JavaWeb项目基于SpringBoot框架实现统一的数据返回格式 + 统一异常处理 + 统一日志处理</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="htmledit_views"> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220609/3526a3ffede50633c0b2883a85534ba3.jpg"></p> <p id="main-toc"><strong>目录</strong></p> <p id="%F0%9F%94%94%E5%89%8D%E8%A8%80-toc" style="margin-left:0px;"><a href="#%F0%9F%94%94%E5%89%8D%E8%A8%80" rel="nofollow">????前言</a></p> <p id="%F0%9F%94%94%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F-toc" style="margin-left:0px;"><a href="#%F0%9F%94%94%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F" rel="nofollow">????统一返回格式</a></p> <p id="%C2%A0%E6%B7%BB%E5%8A%A0%E6%9E%9A%E4%B8%BE%E7%B1%BB-toc" style="margin-left:40px;"><a href="#%C2%A0%E6%B7%BB%E5%8A%A0%E6%9E%9A%E4%B8%BE%E7%B1%BB" rel="nofollow">&nbsp;添加枚举类</a></p> <p id="%C2%A0%E6%B7%BB%E5%8A%A0%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F%E7%9A%84%E7%B1%BB-toc" style="margin-left:40px;"><a href="#%C2%A0%E6%B7%BB%E5%8A%A0%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F%E7%9A%84%E7%B1%BB" rel="nofollow">&nbsp;添加统一返回格式的类</a></p> <p id="%C2%A0%E6%B5%8B%E8%AF%95-toc" style="margin-left:0px;"><a href="#%C2%A0%E6%B5%8B%E8%AF%95" rel="nofollow">&nbsp;测试</a></p> <p id="%F0%9F%94%94%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-toc" style="margin-left:0px;"><a href="#%F0%9F%94%94%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86" rel="nofollow">????统一异常处理</a></p> <p id="%C2%A0%E6%B7%BB%E5%8A%A0%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%88%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAhandler%E5%8C%85%EF%BC%8C%E5%9C%A8%E8%AF%A5%E5%8C%85%E4%B8%8B%E9%9D%A2%E6%B7%BB%E5%8A%A0GlobalExceptionHandler%E7%B1%BB%EF%BC%89-toc" style="margin-left:40px;"><a href="#%C2%A0%E6%B7%BB%E5%8A%A0%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%88%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAhandler%E5%8C%85%EF%BC%8C%E5%9C%A8%E8%AF%A5%E5%8C%85%E4%B8%8B%E9%9D%A2%E6%B7%BB%E5%8A%A0GlobalExceptionHandler%E7%B1%BB%EF%BC%89" rel="nofollow">&nbsp;添加统一异常处理器（创建一个handler包，在该包下面添加GlobalExceptionHandler类）</a></p> <p id="%E6%B5%8B%E8%AF%95%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-toc" style="margin-left:40px;"><a href="#%E6%B5%8B%E8%AF%95%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86" rel="nofollow">测试统一异常处理</a></p> <p id="%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB%20%EF%BC%88%E6%96%B0%E5%BB%BAexception%E5%8C%85%EF%BC%8C%E5%9C%A8%E8%AF%A5%E5%8C%85%E4%B8%8B%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB%EF%BC%89-toc" style="margin-left:40px;"><a href="#%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB%20%EF%BC%88%E6%96%B0%E5%BB%BAexception%E5%8C%85%EF%BC%8C%E5%9C%A8%E8%AF%A5%E5%8C%85%E4%B8%8B%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB%EF%BC%89" rel="nofollow">添加自定义异常类 （新建exception包，在该包下添加自定义异常类）</a></p> <p id="%C2%A0%E5%9C%A8%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BBGlobalExceptionHandler%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86-toc" style="margin-left:40px;"><a href="#%C2%A0%E5%9C%A8%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BBGlobalExceptionHandler%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86" rel="nofollow">&nbsp;在统一异常处理类GlobalExceptionHandler中添加一个自定义异常的处理</a></p> <p id="%C2%A0%E6%B5%8B%E8%AF%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8-toc" style="margin-left:40px;"><a href="#%C2%A0%E6%B5%8B%E8%AF%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8" rel="nofollow">&nbsp;测试自定义异常</a></p> <p id="%F0%9F%94%94%E7%BB%9F%E4%B8%80%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86-toc" style="margin-left:0px;"><a href="#%F0%9F%94%94%E7%BB%9F%E4%B8%80%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86" rel="nofollow">????统一日志处理</a></p> <p id="%E6%B7%BB%E5%8A%A0%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-toc" style="margin-left:40px;"><a href="#%E6%B7%BB%E5%8A%A0%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" rel="nofollow">添加日志配置文件</a></p> <p id="%E6%B7%BB%E5%8A%A0application.properties%E9%85%8D%E7%BD%AE-toc" style="margin-left:40px;"><a href="#%E6%B7%BB%E5%8A%A0application.properties%E9%85%8D%E7%BD%AE" rel="nofollow">添加application.properties配置</a></p> <p id="%C2%A0%E4%BF%AE%E6%94%B9GlobalExceptionHandler%E7%B1%BB-toc" style="margin-left:40px;"><a href="#%C2%A0%E4%BF%AE%E6%94%B9GlobalExceptionHandler%E7%B1%BB" rel="nofollow">&nbsp;修改GlobalExceptionHandler类</a></p> <p id="%E6%B5%8B%E8%AF%95%E6%95%88%E6%9E%9C%C2%A0-toc" style="margin-left:40px;"><a href="#%E6%B5%8B%E8%AF%95%E6%95%88%E6%9E%9C%C2%A0" rel="nofollow">测试效果</a></p> <p id="%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%88%E6%96%B0%E5%BB%BAutils%E5%8C%85%EF%BC%8C%E5%9C%A8%E8%AF%A5%E5%8C%85%E4%B8%8B%E6%B7%BB%E5%8A%A0ExceptionUtils%E7%B1%BB%EF%BC%89%C2%A0-toc" style="margin-left:40px;"><a href="#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%88%E6%96%B0%E5%BB%BAutils%E5%8C%85%EF%BC%8C%E5%9C%A8%E8%AF%A5%E5%8C%85%E4%B8%8B%E6%B7%BB%E5%8A%A0ExceptionUtils%E7%B1%BB%EF%BC%89%C2%A0" rel="nofollow">定义工具类（新建utils包，在该包下添加ExceptionUtils类）</a></p> <p id="%E5%86%8D%E4%BF%AE%E6%94%B9GlobalExceptionHandler%E7%B1%BB-toc" style="margin-left:40px;"><a href="#%E5%86%8D%E4%BF%AE%E6%94%B9GlobalExceptionHandler%E7%B1%BB" rel="nofollow">再修改GlobalExceptionHandler类</a></p> <p id="%E6%B5%8B%E8%AF%95%E6%95%88%E6%9E%9C%C2%A0-toc" style="margin-left:40px;"><a href="#%E6%B5%8B%E8%AF%95%E6%95%88%E6%9E%9C%C2%A0" rel="nofollow">测试效果</a></p> <p id="%F0%9F%94%94%E6%80%BB%E7%BB%93%EF%BC%88%E6%BA%90%E4%BB%A3%E7%A0%81%EF%BC%89-toc" style="margin-left:0px;"><a href="#%F0%9F%94%94%E6%80%BB%E7%BB%93%EF%BC%88%E6%BA%90%E4%BB%A3%E7%A0%81%EF%BC%89" rel="nofollow">????总结（源代码）</a></p> <hr id="hr-toc"/> <h1>????前言</h1> <p>大家好啊，我是爷爷的茶七里香，在我们的项目开发中，我们都会对数据返回格式进行统一的处理，这样可以方便前端人员取数据，当然除了正常流程的数据返回格式需要统一以外，我们也需要对异常的情况进行统一的处理，以及项目必备的日志这些，以下都会说明如何添加，写该文的目的是为了让新人了解在项目开发中，这些是咋做的。</p> <h1 id="%F0%9F%94%94%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F">????统一返回格式</h1> <blockquote> <p>在项目开发中返回的是json格式的数据，也就是统一json数据返回格式，一般情况下返回数据的基本格式包含是否成功、响应状态码、返回的消息、以及返回的数据。格式如下：</p> </blockquote> <pre><code class="language-java">{   "success": 布尔, 	   // 是否成功   "code": 数字, 	   // 响应状态码   "message": 字符串,   // 返回的消息   "data": {}          //  放置响应的数据 }</code></pre> <p>下面开始实操：</p> <ul> <li> <h2 id="%C2%A0%E6%B7%BB%E5%8A%A0%E6%9E%9A%E4%B8%BE%E7%B1%BB">&nbsp;添加枚举类</h2> </li> </ul> <blockquote> <p>该类定义了以上统一格式的前三部分：是否成功、响应状态码、返回的消息；可自行根据项目需要进行后续的添加或者删改。</p> </blockquote> <p>创建一个result包，下面放置ResultCodeEnum枚举类</p> <pre><code class="language-java">/**  * 状态码  *  * @author 爷爷的茶七里香  * @date 2022/05/30  */ public enum ResultCodeEnum {      SUCCESS(true, 20000, "成功"),      UNKNOWN_REASON(false, 20001, "未知错误");      private final Boolean success;      private final Integer code;      private final String message;      ResultCodeEnum(Boolean success, Integer code, String message) {         this.success = success;         this.code = code;         this.message = message;     }      public Boolean getSuccess() {         return success;     }      public Integer getCode() {         return code;     }      public String getMessage() {         return message;     }      @Override     public String toString() {         return "ResultCodeEnum{" + "success=" + success + ", code=" + code + ", message='" + message + '\'' + '}';     } }</code></pre> <ul> <li> <h2 id="%C2%A0%E6%B7%BB%E5%8A%A0%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F%E7%9A%84%E7%B1%BB">&nbsp;添加统一返回格式的类</h2> </li> </ul> <blockquote> <p>该类是用来和前端交互的类，定义的就是本文开头所说的格式</p> </blockquote> <p>在result包下创建一个统一返回格式的类R</p> <pre><code class="language-java">/**  * 统一返回格式类  *  * @author 爷爷的茶七里香  * @date 2022/05/30  */ public class R {      /**      * 是否成功      */     private Boolean success;      /**      * 状态码      */     private Integer code;      /**      * 返回的消息      */     private String message;      /**      * 放置响应的数据      */     private Map&lt;String, Object&gt; data = new HashMap&lt;&gt;();      public R() {}      /** 以下是定义一些常用到的格式，可以看到调用了我们创建的枚举类 */          public static R ok() {         R r = new R();         r.setSuccess(ResultCodeEnum.SUCCESS.getSuccess());         r.setCode(ResultCodeEnum.SUCCESS.getCode());         r.setMessage(ResultCodeEnum.SUCCESS.getMessage());         return r;     }      public static R error() {         R r = new R();         r.setSuccess(ResultCodeEnum.UNKNOWN_REASON.getSuccess());         r.setCode(ResultCodeEnum.UNKNOWN_REASON.getCode());         r.setMessage(ResultCodeEnum.UNKNOWN_REASON.getMessage());         return r;     }      public static R setResult(ResultCodeEnum resultCodeEnum) {         R r = new R();         r.setSuccess(resultCodeEnum.getSuccess());         r.setCode(resultCodeEnum.getCode());         r.setMessage(resultCodeEnum.getMessage());         return r;     }      public R success(Boolean success) {         this.setSuccess(success);         return this;     }      public R message(String message) {         this.setMessage(message);         return this;     }      public R code(Integer code) {         this.setCode(code);         return this;     }      public R data(String key, Object value) {         this.data.put(key, value);         return this;     }      public R data(Map&lt;String, Object&gt; map) {         this.setData(map);         return this;     }      /** 以下是get/set方法，如果项目有集成lombok可以使用@Data注解代替 */      public Boolean getSuccess() {         return success;     }      public void setSuccess(Boolean success) {         this.success = success;     }      public Integer getCode() {         return code;     }      public void setCode(Integer code) {         this.code = code;     }      public String getMessage() {         return message;     }      public void setMessage(String message) {         this.message = message;     }      public Map&lt;String, Object&gt; getData() {         return data;     }      public void setData(Map&lt;String, Object&gt; data) {         this.data = data;     } }</code></pre> <ul> <li> <h1 id="%C2%A0%E6%B5%8B%E8%AF%95">&nbsp;测试</h1> </li> </ul> <p>下面我们提供一个controller来测试下</p> <pre><code class="language-java">/**  * 测试控制器  *  * @author 爷爷的茶七里香  * @date 2022/05/30  */ @RestController @RequestMapping("testR") public class TestController {      /**      * @return {@link R}      */     @GetMapping("ok")     public R testOk() {         Map&lt;String, Object&gt; data = new HashMap&lt;&gt;();         data.put("name", "李太白");         return R.ok().data(data);     } }</code></pre> <p>效果：</p> <p><img fetchpriority="high" decoding="async" alt="" height="548" src="http://img.555519.xyz/uploads3/20220609/dabc8da7b58f787d0e34bc1b5e57a87b.jpg"></p> <blockquote> <p>可以看到格式是正确的，只要我们返回数据的时候使用R这个类返回就行了，不过有一种情况，就是当我们代码中抛出异常之后返回的格式就不是这样子了，下面我演示一下在代码中添加int a = 1/0的语句，肯定导致抛异常的；</p> </blockquote> <p><img decoding="async" alt="" height="315" src="http://img.555519.xyz/uploads3/20220609/c9ee8e6fb24802faa769519468e19182.jpg"></p> <p>&nbsp;结果：</p> <p><img decoding="async" alt="" height="522" src="http://img.555519.xyz/uploads3/20220609/f0799e9177d8a657134c830d79a31454.jpg"></p> <blockquote> <p>&nbsp;可以发现返回的格式已经不是我们所需要的格式了，这种情况会给前端人员带来不必要的麻烦，所以我们也需要对异常情况进行统一的格式处理；</p> </blockquote> <h1 id="%F0%9F%94%94%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">????统一异常处理</h1> <blockquote> <p>&nbsp;经过上面的演示，相信你已经明白我们为什么需要进行统一的异常处理了，当然处理统一的异常处理以外我们在开发项目中也会主动的抛出异常，像这种情况我们需要配合自定义异常来完成；</p> </blockquote> <p>下面进行实操：</p> <ul> <li> <h2 id="%C2%A0%E6%B7%BB%E5%8A%A0%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%88%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAhandler%E5%8C%85%EF%BC%8C%E5%9C%A8%E8%AF%A5%E5%8C%85%E4%B8%8B%E9%9D%A2%E6%B7%BB%E5%8A%A0GlobalExceptionHandler%E7%B1%BB%EF%BC%89">&nbsp;添加统一异常处理器（创建一个handler包，在该包下面添加GlobalExceptionHandler类）</h2> </li> </ul> <pre><code class="language-java">/**  * 统一异常处理  *  * @author 爷爷的茶七里香  * @date 2022/05/30 ControllerAdvice注解的含义是当异常抛到controller层时会拦截下来  */ @ControllerAdvice public class GlobalExceptionHandler {      /**      * 使用ExceptionHandler注解声明处理Exception异常      *      * @param e e      * @return {@link R}      */     @ResponseBody     @ExceptionHandler(Exception.class)     public R exception(Exception e) {         // 控制台打印异常         e.printStackTrace();         // 返回错误格式信息         return R.error();     }  }</code></pre> <ul> <li> <h2 id="%E6%B5%8B%E8%AF%95%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">测试统一异常处理</h2> </li> </ul> <p><img loading="lazy" decoding="async" alt="" height="492" src="http://img.555519.xyz/uploads3/20220609/d6e8927ca0d29a9d16b2f225a2646554.jpg"></p> <blockquote> <p>可以看到现在出现异常之后返回的格式已经是我们所需要的格式了，如果我们想让这个错误信息更加明确，我们可以通过添加自定义异常来实现，下面开始实操：</p> </blockquote> <ul> <li> <h2 id="%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB%20%EF%BC%88%E6%96%B0%E5%BB%BAexception%E5%8C%85%EF%BC%8C%E5%9C%A8%E8%AF%A5%E5%8C%85%E4%B8%8B%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB%EF%BC%89">添加自定义异常类 （新建exception包，在该包下添加自定义异常类）</h2> </li> </ul> <pre><code class="language-java">/**  * 测试自定义异常类  *  * @author 爷爷的茶七里香  * @date 2022/05/30 需要继承运行时异常RuntimeException  */ public class TestException extends RuntimeException {     private Integer code;      public TestException(ResultCodeEnum resultCodeEnum) {         // 调用父类的方法添加信息         super(resultCodeEnum.getMessage());         this.code = resultCodeEnum.getCode();     }      public Integer getCode() {         return code;     } }</code></pre> <ul> <li> <h2 id="%C2%A0%E5%9C%A8%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BBGlobalExceptionHandler%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86">&nbsp;在统一异常处理类GlobalExceptionHandler中添加一个自定义异常的处理</h2> </li> </ul> <pre><code class="language-java">/**  * 统一异常处理  *  * @author 爷爷的茶七里香  * @date 2022/05/30 ControllerAdvice注解的含义是当异常抛到controller层时会拦截下来  */ @ControllerAdvice public class GlobalExceptionHandler {      /**      * 使用ExceptionHandler注解声明处理Exception异常      *      * @param e e      * @return {@link R}      */     @ResponseBody     @ExceptionHandler(Exception.class)     public R exception(Exception e) {         // 控制台打印异常         e.printStackTrace();         // 返回错误格式信息         return R.error();     }      /**      * 使用ExceptionHandler注解声明处理TestException异常      *      * @param e e      * @return {@link R}      */     @ResponseBody     @ExceptionHandler(TestException.class)     public R exception(TestException e) {         // 控制台打印异常         e.printStackTrace();         // 返回错误格式信息         return R.error().message(e.getMessage()).code(e.getCode());     }  }</code></pre> <ul> <li> <h2 id="%C2%A0%E6%B5%8B%E8%AF%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8">&nbsp;测试自定义异常</h2> </li> </ul> <p>在枚举类中添加一个状态信息</p> <pre><code class="language-java">TEST_NUMBER(false, 500, "计算错误");</code></pre> <p><img loading="lazy" decoding="async" alt="" height="449" src="http://img.555519.xyz/uploads3/20220609/bb53172c65f661505773fc5539ed727a.jpg"></p> <p>&nbsp;输出结果：</p> <p><img loading="lazy" decoding="async" alt="" height="499" src="http://img.555519.xyz/uploads3/20220609/5d048fdc513eb123b29f900cc1252075.jpg"></p> <blockquote> <p>现在自定义异常也能统一返回格式了</p> </blockquote> <h1 id="%F0%9F%94%94%E7%BB%9F%E4%B8%80%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86">????统一日志处理</h1> <blockquote> <p>为了更方便我们进行错误的调式，一般会在项目中集成日志，下面我们开始实操吧：</p> </blockquote> <ul> <li> <h2 id="%E6%B7%BB%E5%8A%A0%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">添加日志配置文件</h2> </li> </ul> <blockquote> <p>在resources下添加日志的配置，文件名必须是logback-spring.xml</p> <p>以下配置一般不需要修改，要改的话也只是修改日志的输出目录</p> <p>&lt;property name="log.path" value="D:/javaWeb/log" /&gt;</p> <p>value就是日志的输出位置</p> </blockquote> <pre><code class="language-XML">&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;configuration  scan="true" scanPeriod="10 seconds"&gt;     &lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;     &lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;     &lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;     &lt;!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;     &lt;contextName&gt;logback&lt;/contextName&gt;     &lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 --&gt;     &lt;property name="log.path" value="D:/javaWeb/log" /&gt;      &lt;!--控制台日志格式：彩色日志--&gt;     &lt;!-- magenta:洋红 --&gt;     &lt;!-- boldMagenta:粗红--&gt;     &lt;!-- cyan:青色 --&gt;     &lt;!-- white:白色 --&gt;     &lt;!-- magenta:洋红 --&gt;     &lt;property name="CONSOLE_LOG_PATTERN"               value="%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)"/&gt;      &lt;!--文件日志格式--&gt;     &lt;property name="FILE_LOG_PATTERN"               value="%date{yyyy-MM-dd HH:mm:ss} |%-5level |%thread |%file:%line |%logger |%msg%n" /&gt;      &lt;!--编码--&gt;     &lt;property name="ENCODING"               value="UTF-8" /&gt;      &lt;!--输出到控制台--&gt;     &lt;appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender"&gt;         &lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt;             &lt;!--日志级别--&gt;             &lt;level&gt;DEBUG&lt;/level&gt;         &lt;/filter&gt;         &lt;encoder&gt;             &lt;!--日志格式--&gt;             &lt;Pattern&gt;${CONSOLE_LOG_PATTERN}&lt;/Pattern&gt;             &lt;!--日志字符集--&gt;             &lt;charset&gt;${ENCODING}&lt;/charset&gt;         &lt;/encoder&gt;     &lt;/appender&gt;      &lt;!--输出到文件--&gt;     &lt;appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;         &lt;!--日志过滤器：此日志文件只记录INFO级别的--&gt;         &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;             &lt;level&gt;INFO&lt;/level&gt;             &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;             &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;         &lt;/filter&gt;         &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;         &lt;file&gt;${log.path}/log_info.log&lt;/file&gt;         &lt;encoder&gt;             &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;             &lt;charset&gt;${ENCODING}&lt;/charset&gt;         &lt;/encoder&gt;         &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;         &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;             &lt;!-- 每天日志归档路径以及格式 --&gt;             &lt;fileNamePattern&gt;${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log&lt;/fileNamePattern&gt;             &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"&gt;                 &lt;maxFileSize&gt;500MB&lt;/maxFileSize&gt;             &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;             &lt;!--日志文件保留天数--&gt;             &lt;maxHistory&gt;15&lt;/maxHistory&gt;         &lt;/rollingPolicy&gt;     &lt;/appender&gt;      &lt;appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;         &lt;!-- 日志过滤器：此日志文件只记录WARN级别的 --&gt;         &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;             &lt;level&gt;WARN&lt;/level&gt;             &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;             &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;         &lt;/filter&gt;         &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;         &lt;file&gt;${log.path}/log_warn.log&lt;/file&gt;         &lt;encoder&gt;             &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;             &lt;charset&gt;${ENCODING}&lt;/charset&gt; &lt;!-- 此处设置字符集 --&gt;         &lt;/encoder&gt;         &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;         &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;             &lt;fileNamePattern&gt;${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log&lt;/fileNamePattern&gt;             &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"&gt;                 &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt;             &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;             &lt;!--日志文件保留天数--&gt;             &lt;maxHistory&gt;15&lt;/maxHistory&gt;         &lt;/rollingPolicy&gt;     &lt;/appender&gt;      &lt;appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;         &lt;!-- 日志过滤器：此日志文件只记录ERROR级别的 --&gt;         &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;             &lt;level&gt;ERROR&lt;/level&gt;             &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;             &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;         &lt;/filter&gt;         &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;         &lt;file&gt;${log.path}/log_error.log&lt;/file&gt;         &lt;encoder&gt;             &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;             &lt;charset&gt;${ENCODING}&lt;/charset&gt; &lt;!-- 此处设置字符集 --&gt;         &lt;/encoder&gt;         &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;         &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;             &lt;fileNamePattern&gt;${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log&lt;/fileNamePattern&gt;             &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"&gt;                 &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt;             &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;             &lt;!--日志文件保留天数--&gt;             &lt;maxHistory&gt;15&lt;/maxHistory&gt;         &lt;/rollingPolicy&gt;     &lt;/appender&gt;      &lt;!--开发环境--&gt;     &lt;springProfile name="dev"&gt;         &lt;!--可以灵活设置此处，从而控制日志的输出--&gt;         &lt;root level="INFO"&gt;             &lt;appender-ref ref="CONSOLE" /&gt;             &lt;appender-ref ref="INFO_FILE" /&gt;             &lt;appender-ref ref="WARN_FILE" /&gt;             &lt;appender-ref ref="ERROR_FILE" /&gt;         &lt;/root&gt;     &lt;/springProfile&gt;      &lt;!--生产环境--&gt;     &lt;springProfile name="pro"&gt;         &lt;root level="ERROR"&gt;             &lt;appender-ref ref="ERROR_FILE" /&gt;         &lt;/root&gt;     &lt;/springProfile&gt;  &lt;/configuration&gt;</code></pre> <ul> <li> <h2 id="%E6%B7%BB%E5%8A%A0application.properties%E9%85%8D%E7%BD%AE">添加application.properties配置</h2> </li> </ul> <blockquote> <p>&nbsp;配置文件需要设置下环境，需要跟日志配置文件中的&lt;springProfile name="dev"&gt;对应上，不然不生效</p> </blockquote> <pre><code class="language-XML"># 设置环境 spring.profiles.active=dev</code></pre> <ul> <li> <h2 id="%C2%A0%E4%BF%AE%E6%94%B9GlobalExceptionHandler%E7%B1%BB">&nbsp;修改GlobalExceptionHandler类</h2> </li> </ul> <blockquote> <p>具体修改看下面的代码：</p> </blockquote> <pre><code class="language-java">/**  * 统一异常处理  *  * @author 爷爷的茶七里香  * @date 2022/05/30 ControllerAdvice注解的含义是当异常抛到controller层时会拦截下来  */ @ControllerAdvice public class GlobalExceptionHandler {      /**      * 打印日志       * 如果项目有集成lombok可使用@Slf4j注解代替      */     private static final Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class);      /**      * 使用ExceptionHandler注解声明处理Exception异常      *      * @param e e      * @return {@link R}      */     @ResponseBody     @ExceptionHandler(Exception.class)     public R exception(Exception e) {         // 控制台打印异常         log.error(e.getMessage());         // 返回错误格式信息         return R.error();     }      /**      * 使用ExceptionHandler注解声明处理TestException异常      *      * @param e e      * @return {@link R}      */     @ResponseBody     @ExceptionHandler(TestException.class)     public R exception(TestException e) {         // 控制台打印异常         log.error(e.getMessage());         // 返回错误格式信息         return R.error().message(e.getMessage()).code(e.getCode());     }  }</code></pre> <ul> <li> <h2 id="%E6%B5%8B%E8%AF%95%E6%95%88%E6%9E%9C%C2%A0">测试效果</h2> </li> </ul> <p><img loading="lazy" decoding="async" alt="" height="1042" src="http://img.555519.xyz/uploads3/20220609/fcc9567a21f8e3be31d975d1dfcf5667.jpg"></p> <blockquote> <p>&nbsp;日志生效了，而且在我们的D盘javaWeb目录下也有对应的日志文件了</p> </blockquote> <p><img loading="lazy" decoding="async" alt="" height="208" src="http://img.555519.xyz/uploads3/20220609/4007283f5cfe40493ba9916f1ebd5b88.jpg"></p> <blockquote> <p>&nbsp;我们可以进一步的完善下，将日志堆栈信息输出到文件</p> </blockquote> <ul> <li> <h2 id="%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%88%E6%96%B0%E5%BB%BAutils%E5%8C%85%EF%BC%8C%E5%9C%A8%E8%AF%A5%E5%8C%85%E4%B8%8B%E6%B7%BB%E5%8A%A0ExceptionUtils%E7%B1%BB%EF%BC%89%C2%A0">定义工具类（新建utils包，在该包下添加ExceptionUtils类）</h2> </li> </ul> <pre><code class="language-java">/**  * 日志堆栈信息输出到文件工具类  *  * @author 爷爷的茶七里香  * @date 2022/05/30  */ public class ExceptionUtils {     public static String getMessage(Exception e) {         StringWriter sw = null;         PrintWriter pw = null;         try {             sw = new StringWriter();             pw = new PrintWriter(sw);             // 将出错的栈信息输出到printWriter中             e.printStackTrace(pw);             pw.flush();             sw.flush();         } finally {             if (sw != null) {                 try {                     sw.close();                 } catch (IOException e1) {                     e1.printStackTrace();                 }             }             if (pw != null) {                 pw.close();             }         }         return sw.toString();     } }</code></pre> <ul> <li> <h2 id="%E5%86%8D%E4%BF%AE%E6%94%B9GlobalExceptionHandler%E7%B1%BB">再修改GlobalExceptionHandler类</h2> </li> </ul> <pre><code class="language-java">/**  * 统一异常处理  *  * @author 爷爷的茶七里香  * @date 2022/05/30 ControllerAdvice注解的含义是当异常抛到controller层时会拦截下来  */ @ControllerAdvice public class GlobalExceptionHandler {      /**      * 打印日志 如果项目有集成lombok可使用@Slf4j注解代替      */     private static final Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class);      /**      * 使用ExceptionHandler注解声明处理Exception异常      *      * @param e e      * @return {@link R}      */     @ResponseBody     @ExceptionHandler(Exception.class)     public R exception(Exception e) {         // 控制台打印异常  借助工具类将错误堆栈输出到文件         log.error(ExceptionUtils.getMessage(e));         // 返回错误格式信息         return R.error();     }      /**      * 使用ExceptionHandler注解声明处理TestException异常      *      * @param e e      * @return {@link R}      */     @ResponseBody     @ExceptionHandler(TestException.class)     public R exception(TestException e) {         // 控制台打印异常   借助工具类将错误堆栈输出到文件         log.error(ExceptionUtils.getMessage(e));         // 返回错误格式信息         return R.error().message(e.getMessage()).code(e.getCode());     }  }</code></pre> <ul> <li> <h2>测试效果</h2> </li> </ul> <p><img loading="lazy" decoding="async" alt="" height="1042" src="http://img.555519.xyz/uploads3/20220609/7b983d4a880e1a23e13ab44ca9cdff25.jpg"></p> <h1 id="%F0%9F%94%94%E6%80%BB%E7%BB%93%EF%BC%88%E6%BA%90%E4%BB%A3%E7%A0%81%EF%BC%89">????总结（源代码）</h1> <blockquote> <p>&nbsp;到这就已经完成了统一返回格式、统一异常处理、已经统一的日志处理，通过文章不一定能看明白，所以我在此提供源代码，配合文章食用;</p> </blockquote> <p><a class="link-info has-card" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://gitee.com/sgdygb/demo20220530"  title="gitee仓库（本文章源代码）" rel="nofollow"><span class="link-card-box"><span class="link-title">gitee仓库（本文章源代码）</span><span class="link-link"><img decoding="async" alt="" class="link-link-icon" src="http://img.555519.xyz/uploads3/20220609/bf924185496dfe1f525d6fb6826d92ff.jpg">https://gitee.com/sgdygb/demo20220530</span></span></a></p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-203.htm">OAuth 2.1 框架_在线工具</a></p>
                                        <p>下一个：<a href="/html/category/article-205.htm">001、利用pyttsx3、SAPI、SpeechLib 实现文本转语音</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1332.htm">Centos7离线安装Nginx亲测版</a></h4>
                <p>Centos7 Nginx编译包制作 找一台可连接互联网的虚拟机来制作编译好的Nginx包，具体操作如下 1、准备一台虚拟机（可访问互联网） 2、安装所需插件 $ yum -y install gcc</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4123.htm">Vue +Vant 实现顶部搜索栏</a></h4>
                <p>搜索栏组件源码(SearchBar.vue) &lt;template&gt;   &lt;section class="city-search"&gt;     &lt;van-icon class</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4442.htm">动物疫苗价格表图片高清大全集（动物疫苗价格查询）</a></h4>
                <p>摘要：       今天给各位分享动物疫苗价格表图片高清大全集的知识，其中也会对动物疫苗价格查询进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、狗狗打疫苗一般.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4323.htm">四川红烧鱼的做法 最正宗的做法(四川红烧鱼怎么做好吃又简单视频教程)</a></h4>
                <p>各位同学好，相信还有很多人对于正宗四川怎么做的相关问题不太了解，今天给各位分享一下关于正宗四川红烧鱼怎么做的解答，希望可以帮助到大家，下面一起来看看吧！！本文目录导读：正宗四川红烧鱼怎么做正宗四川红烧</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1953.htm">springboot2+spring-retry配置及使用</a></h4>
                <p>springboot2+spring-retry配置及使用  参考 1 配置依赖 2 启动类开启retry 3 使用   @Retryable和@Backoff @Recover 使用样例     参</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3730.htm">vue-v-model 常用修饰符</a></h4>
                <p>&lt;div id="app"&gt;     &lt;h1&gt;懒加载lazy&lt;/h1&gt;     &lt;h3&gt;不让输入框实时同步&lt;/h3&gt;     &lt;inp</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1054.htm">mysql 中插入百万条数据</a></h4>
                <p>文章目录  mysql 中插入百万条数据     1. 创建测试表 2. 开启二进制日志 3. 创建一个生成随机字符串的函数: 4. 调用上边的两个插入函数        mysql 中插入百万条数据</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-262.htm">Python 认识列表和元组</a></h4>
                <p>列表和元组，都是一个可以放置任何数据类型的有序集合。   列表的特性 动态的（mutable）：长度大小不固定，可以随意地增加、删减或者改变元素。 会修改原来列表中的元素，而不会创建新的列表。 # 新</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4124.htm">谈谈高并发系统的一些解决方案</a></h4>
                <p>本文结合项目经验，整理一份大纲，供参考。 常用指标   RT（Response Time）：响应时间。可能会衍生出 TP999、TP99、TP95、TP90等指标。一般在几毫秒到几百毫秒之间。   Q</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-526.htm">SpringBoot生成docx文件并返回其Base64编码</a></h4>
                <p>直接上源码，      @ResponseBody     @RequestMapping(value = "/getDocx", method = RequestMethod.GET)     pu</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">18</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>