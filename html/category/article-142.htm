<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-142.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>那些年踩过的Java日期时间的坑 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">那些年踩过的Java日期时间的坑</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h1><a id="Java_2" rel="nofollow"></a>那些年踩过的Java日期时间的坑</h1> <p>在 Java 8 之前，我们处理日期时间需求时，使用 Date、Calender 和 SimpleDateFormat，来声明时间戳、使用日历处理日期和格式化解析日期时间。这 些类的 API 的缺点比较明显，比如可读性差、易用性差、使用起来冗余繁琐，还有线程安全问题。</p> <p>下面来看看常见的java8之前日期时间的常见的问题：</p> <h2><a id="Calendar_8" rel="nofollow"></a>Calendar设置问题</h2> <h4><a id="Calendar1224_10" rel="nofollow"></a>Calendar设置时间12小时和24小时问题</h4> <p><strong>例如：</strong></p> <pre><code class="prism language-text">Calendar c = Calendar.getInstance(); c.set(Calendar.HOUR, 10); System.out.println(c.getTime());</code></pre> <pre><code class="prism language-text">Wed Feb 24 22:09:17 CST 2021</code></pre> <p><strong>原因解析：</strong></p> <p>我们设置了10小时，但运行结果是22点，而不是10点。因为Calendar.HOUR默认是按12小时制处理的，需要使用Calendar.HOUR_OF_DAY，因为它才是按24小时处理的。</p> <pre><code class="prism language-text">Calendar c = Calendar.getInstance(); c.set(Calendar.HOUR_OF_DAY, 10); Wed Feb 24 10:09:17 CST 2021</code></pre> <h4><a id="Calendar1_36" rel="nofollow"></a>Calendar获取的月份比实际数字少1</h4> <p>例如：</p> <pre><code>Calendar calendar = Calendar.getInstance(); System.out.println("获取当前月:"+calendar.get(Calendar.MONTH)+" month ");  获取当前月:1 month</code></pre> <p>原因：Calendar中的月份从0开始 到11所以要计算正确的月份结果要加1</p> <pre><code class="prism language-text">Calendar calendar = Calendar.getInstance(); System.out.println("当前"+(calendar.get(Calendar.MONTH)+1)+"月份");</code></pre> <h3><a id="JavaYYYY_DD_hh_54" rel="nofollow"></a>Java日期格式化YYYY 、DD 和hh的坑</h3> <p>例如</p> <pre><code>Calendar calendar = Calendar.getInstance(); calendar.set(2020, Calendar.DECEMBER, 31,15,35); Date testDate = calendar.getTime();  SimpleDateFormat dtf = new SimpleDateFormat("YYYY-MM-dd"); System.out.println("2020-12-31 转 YYYY-MM-dd 格式后 " + dtf.format(testDate));  SimpleDateFormat dtf1 = new SimpleDateFormat("yyyy-MM-DD"); System.out.println("2020-12-31 转 yyyy-MM-DD 格式后 " + dtf1.format(testDate));  SimpleDateFormat dtf2 = new SimpleDateFormat("yyyy-MM-dd hh:mm"); System.out.println("2020-12-31 转 yyyy-MM-dd hh:mm 格式后 " + dtf2.format(testDate));</code></pre> <pre><code>2020-12-31 转 YYYY-MM-dd 格式后 2021-12-31 2020-12-31 转 yyyy-MM-DD 格式后 2020-12-366 2020-12-31 转 yyyy-MM-dd hh:mm 格式后 2020-12-31 03:35</code></pre> <p><strong>解析</strong></p> <p>YYYY问题：2020年12月31号变成了2021年12月31号，是因为YYYY是基于周来计算年的，它指向当天所在周属于的年份，一周从周日开始算起，周六结束，这里2020年12月31号跨年了，那么这一周就算成下一周了，所以<strong>正确使用方式是用yyyy</strong></p> <p>DD问题：DD和dd表示的不一样，DD表示的是一年中的第几天，而dd表示的是一年中的第几天，所以<strong>正确的使用方式是用dd</strong></p> <p>hh问题：设置时间是15点，运行的结果是3点，因为hh是12小时制的日期格式，当时间为15点，会处理为3点，所以正确的使用方式是用<strong>HH</strong> 它才是12小时制。</p> <pre><code>Calendar calendar = Calendar.getInstance(); calendar.set(2020, Calendar.DECEMBER, 31,15,35); Date testDate = calendar.getTime(); SimpleDateFormat dtf3 = new SimpleDateFormat("yyyy-MM-dd HH:mm"); System.out.println("2020-12-31 转 yyyy-MM-dd HH:mm 格式后 " + dtf3.format(testDate));</code></pre> <p><code>2020-12-31 转 yyyy-MM-dd HH:mm 格式后 2020-12-31 15:35</code></p> <h3><a id="SimpleDateFormat__103" rel="nofollow"></a>SimpleDateFormat 解析时间问题</h3> <h4><a id="_static__SimpleDateFormat__107" rel="nofollow"></a>定义的 static 的 SimpleDateFormat 可能会出现线程安全问题。</h4> <p>例如</p> <pre><code>public class SimpleDateFormatTest {      private static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");      public static void main(String[] args) {         ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(10, 100, 1, TimeUnit.MINUTES, new LinkedBlockingQueue&lt;&gt;(1000));          while (true) {             threadPoolExecutor.execute(() -&gt; {                 try {                     Date parseDate = sdf.parse("2021-01-01 11:12:13");                     System.out.println(parseDate);                 } catch (Exception e) {                     e.printStackTrace();                 }             });         }     }  }</code></pre> <p>运行程序后大量报错:</p> <pre><code>Fri Jan 25 13:07:00 CST 6104 Fri Jan 01 11:12:13 CST 2021 Fri Jan 01 11:12:13 CST 2021 Fri Jan 01 11:12:13 CST 2021 	at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110) 	at java.lang.Double.parseDouble(Double.java:538) 	at java.text.DigitList.getDouble(DigitList.java:169) 	at java.text.DecimalFormat.parse(DecimalFormat.java:2089) 	at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:2162) 	at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1514) 	at java.text.DateFormat.parse(DateFormat.java:364) 	at org.geekbang.time.commonmistakes.datetime.newdate.SimpleDateFormatTest.lambda$main$0(SimpleDateFormatTest.java:20) 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) 	at java.lang.Thread.run(Thread.java:748) java.lang.NumberFormatException: multiple points 	at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1890) 	at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110) 	at java.lang.Double.parseDouble(Double.java:538) 	at java.text.DigitList.getDouble(DigitList.java:169) 	at java.text.DecimalFormat.parse(DecimalFormat.java:2089) 	at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:2162) 	at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1514) 	at java.text.DateFormat.parse(DateFormat.java:364)</code></pre> <p>没有报错的输出结果也不正常.</p> <p><strong>解析：</strong></p> <p>全局变量的SimpleDateFormat，在并发情况下，存在安全性问题。</p> <ul> <li>SimpleDateFormat继承了 DateFormat,DateFormat 维护一个全局的 Calendar变量;</li> <li>sdf.parse(dateStr)和sdf.format(date)，都是由Calendar引用来储存的。SimpleDateFormat 的 parse 方法调用 CalendarBuilder 的 establish 方法，来构建 Calendar; establish 方法内部先清空 Calendar 再构建 Calendar，整个操作没有加锁。</li> <li>如果SimpleDateFormat是static全局共享的，Calendar引用也会被共享。</li> <li>因为Calendar内部并没有线程安全机制，所以全局共享的SimpleDateFormat不是线性安全的。</li> </ul> <p><strong>解决SimpleDateFormat线性不安全问题，有三种方式：</strong></p> <ul> <li>将SimpleDateFormat定义为局部变量</li> <li>在同一个线程复用 SimpleDateFormat， 通过 ThreadLocal 来存放 SimpleDateFormat:</li> <li>方法加同步锁synchronized。</li> </ul> <p>正确方式：</p> <pre><code> private static ThreadLocal&lt;SimpleDateFormat&gt; threadSafeSimpleDateFormat = ThreadLocal.withInitial(() -&gt; new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"));  private static void wrongfix() throws InterruptedException {     ExecutorService threadPool = Executors.newFixedThreadPool(100);      for (int i = 0; i &lt; 20; i++) {         threadPool.execute(() -&gt; {             for (int j = 0; j &lt; 10; j++) {                 try {                     System.out.println(threadSafeSimpleDateFormat.get().parse("2020-01-01 11:12:13"));                 } catch (ParseException e) {                     e.printStackTrace();                 }             }         });     }     threadPool.shutdown();     threadPool.awaitTermination(1, TimeUnit.HOURS); }</code></pre> <h4><a id="SimpleDateFormat__208" rel="nofollow"></a>SimpleDateFormat 解析的时间问题</h4> <pre><code class="prism language-text">SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); String time = "2021-01"; System.out.println(sdf.parse(time));</code></pre> <pre><code>java.text.ParseException: Unparseable date: "2021-01" 	at java.text.DateFormat.parse(DateFormat.java:366) 	at org.geekbang.time.commonmistakes.datetime.newdate.SimpleDateFormatTest.formatUnMatch(SimpleDateFormatTest.java:23) 	at org.geekbang.time.commonmistakes.datetime.newdate.SimpleDateFormatTest.main(SimpleDateFormatTest.java:16)</code></pre> <p>**解析：**SimpleDateFormat 可以解析长于/等于它定义的时间精度，但是不能解析小于它定义的时间精度。</p> <h4><a id="SimpleDateFormat__227" rel="nofollow"></a>当需要解析的字符串和格式不匹配的时候，SimpleDateFormat 表现得很宽容</h4> <p>例如：</p> <pre><code>String dateString = "20210201"; SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMM"); System.out.println("result:" + dateFormat.parse(dateString));  result:Tue Sep 01 00:00:00 CST 2037</code></pre> <p>居然输出了 2037 年原因是把 0201 当成了月份进行运算了。</p> <p>解决方法需要匹配时间格式进行解析。</p> <h3><a id="_245" rel="nofollow"></a>日期计算</h3> <p>例如：直接使用时间戳进行时间计算：如：Date().getTime 方法得到的时间戳加 30 天对应的毫秒数</p> <pre><code>Date today = new Date(); Date nextMonth = new Date(today.getTime() + 30 * 1000 * 60 * 60 * 24); System.out.println(nextMonth);</code></pre> <pre><code>结果输出Fri Feb 05 00:27:10 CST 2021</code></pre> <p>分析：这里得到的日期比当前日期还要早，并不是1个月以后的日期。出现这个原因是<strong>因为 int 发生了溢出</strong> ,修改方式需要在乘法运算时候加个L使得运算结果成为Long就避免整数溢出了。</p> <p>更加推荐的使用方式是使用 Calendar方法进行操作，如下</p> <pre><code>Calendar c = Calendar.getInstance(); c.setTime(new Date()); c.add(Calendar.DAY_OF_MONTH, 30); System.out.println(c.getTime());</code></pre> <p>使用 Java 8 的日期时间类型更加简洁方便：</p> <pre><code>LocalDateTime localDateTime = LocalDateTime.now(); System.out.println(localDateTime.plusDays(30));</code></pre> <h3><a id="_279" rel="nofollow"></a>总结：</h3> <ul> <li> <p>Java的<code>java.util.Date</code>和<code>java.util.Calendar</code>类易用性差，不支持时区，而且不是线程安全的；</p> </li> <li> <p>用于格式化日期的类<code>SimpleDateFormat</code>对象来处理日期格式化，是非线程安全，在多线程程序中调用复用同一个<code>DateFormat</code>对象，会有线程安全问题。</p> </li> <li> <p>SimpleDateFormat 很容易因为yyyy dd hh 大小写问题出错。</p> </li> <li> <p>Calendar`中获取的月份需要加一才能表示当前月份，还有就是12小时制和24小时制的转换容易出错。</p> </li> </ul> <p>Java 8 推出了新的日期时间类。 ZoneId、ZoneOffset、LocalDateTime、ZonedDateTime 和 DateTimeFormatter 每一个类功能明确清晰、类之间协作简单、 义清晰不踩坑，API 功能强大无需借助外部工具类即可完成操作，并且线程安全下一遍来看看java8 新的日期类。</p> <h3><a id="_292" rel="nofollow"></a></h3> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-141.htm">Citus 分布式 PostgreSQL 集群 &#8211; SQL Reference(查询处理)</a></p>
                                        <p>下一个：<a href="/html/category/article-143.htm">docker-compose ports 与 expose 的区别</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-216.htm">Citus 分布式 PostgreSQL 集群 &#8211; SQL Reference(SQL支持和变通方案)</a></h4>
                <p>由于Citus 通过扩展PostgreSQL 提供分布式功能，因此它与PostgreSQL 结构兼容。这意味着用户可以使用丰富且可扩展的PostgreSQL 生态系统附带的工具和功能来处理使用Citu</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-789.htm">vue 实现简单表格分页功能</a></h4>
                <p>使用框架实现表格展示和跳转功能，一直不懂原理。所以自己写一个简单的，加深理解。  布局分为2块，上面是表格展示数据，下面是点击按钮跳转。效果图：代码： &lt;!DOCTYPE html&gt; &l</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-790.htm">详细分析虚拟DOM与diff算法</a></h4>
                <p>????虚拟DOM与diff算法 在vue、react等技术出现之前，每次修改DOM都需要通过遍历查询DOM树的方式，找到需要更新的DOM，然后修改样式或结构，资源损耗十分严重。而对于虚拟DOM来说，</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-253.htm">win11系统怎么设置软件安装来源</a></h4>
                <p>&nbsp; &nbsp;我们为了保证电脑安装软件的安全性，以及不会下载到一些有流氓软件之类的问题出现，可以在电脑中设置应用下载来源，那么win11系统怎么设置软件安装来源呢?今天为大家分享win11</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-215.htm">C# 正则表达式判断是否是有效的文件、文件夹路径</a></h4>
                <p>C# 正则表达式判断是否是有效的文件、文件夹路径 省流 /// &lt;summary&gt; /// 是否有效的文件，文件夹路径 /// &lt;/summary&gt; /// &lt;param</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-229.htm">Docker提交镜像-数据卷-可视化</a></h4>
                <p>在熟悉完Docker的安装及基本命令使用之后，我们开始学习下Docker的进阶操作：包括但不限于新建Docker镜像，数据卷的挂载，以及Docker的可视化等。 Docker提交镜像 启动镜像 我们先</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-258.htm">你确定你会用Enum枚举了？</a></h4>
                <p>一般在我们开发时如果能使用枚举罗列的，一般都会定义一个枚举类型。将枚举类型作为方法的参数，可以方便的进行调用，给我们带来不少的遍历，当然有时候它还不如直接用一个int类型带来，带来一定灵活性。但只要能</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-209.htm">pandas高阶应用</a></h4>
                <p>1、时间序列相关操作 pd的date_range中的基本时间序列频率     Alias   Description（偏移量类型）   说明     B   business day frequenc</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-219.htm">Golang学习之网络参数请求-Query Params及Path Variables的区别及底层实现</a></h4>
                <p>Golang学习之网络参数请求-Query Params及Path Variables的区别及底层实现  目录  Golang学习之网络参数请求-Query Params及Path Variables</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-213.htm">C/C++内存申请函数总结</a></h4>
                <p>#include &lt;stdlib.h&gt; new char[size] void* malloc(unsigned size); void* realloc(void* ptr, unsig</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">24</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>