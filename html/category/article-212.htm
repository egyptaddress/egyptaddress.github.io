<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-212.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>从查询重写角度理解elasticsearch的高亮原理 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">从查询重写角度理解elasticsearch的高亮原理</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<p>一、高亮的一些问题</p> <p>elasticsearch提供了三种高亮方式，前面我们已经简单的了解了elasticsearch的高亮原理; 高亮处理跟实际使用查询类型有十分紧密的关系，其中主要的一点就是muti term 查询的重写，例如wildcard、prefix等，由于查询本身和高亮都涉及到查询语句的重写，如果两者之间的重写机制不同，那么就可能会碰到以下情况</p> <p>相同的查询语句， 使用unified和fvh得到的高亮结果是不同的，甚至fvh Highlighter无任何高亮信息返回；</p> <p>二、数据环境</p> <p>elasticsearch 8.0</p> <pre><code>PUT highlight_test {   "mappings": {     "properties": {       "text":{         "type": "text",         "term_vector": "with_positions_offsets"       }     }   },   "settings": {     "number_of_replicas":0,     "number_of_shards": 1   } }  PUT highlight_test/_doc/1 {   "name":"mango",   "text":"my name is mongo, i am test hightlight in elastic search" }</code></pre> <p>三、muti term查询重写简介</p> <p>所谓muti term查询就是查询中并不是明确的关键字，而是需要elasticsearch重写查询语句，进一步明确关键字；以下查询会涉及到muti term查询重写；</p> <pre><code>fuzzy prefix query_string regexp wildcard</code></pre> <p>以上查询都支持rewrite参数，最终将查询重写为bool查询或者bitset；</p> <p>查询重写主要影响以下几方面</p> <p>重写需要抓取哪些关键字以及抓取的数量；</p> <p>抓取关键字的相关性计算方式；</p> <p>查询重写支持以下参数选项</p> <p>constant_score，默认值，如果需要抓取的关键字比较少，则重写为bool查询，否则抓取所有的关键字并重写为bitset；直接使用boost参数作为文档score，一般term level的查询的boost默认值为1；</p> <p>constant_score_boolean，将查询重写为bool查询，并使用boost参数作为文档的score，受到indices.query.bool.max_clause_count 限制，所以默认最多抓取1024个关键字；</p> <p>scoring_boolean，将查询重写为bool查询，并计算文档的相对权重，受到indices.query.bool.max_clause_count 限制，所以默认最多抓取1024个关键字；</p> <p>top_terms_blended_freqs_N，抓取得分最高的前N个关键字，并将查询重写为bool查询；此选项不受indices.query.bool.max_clause_count 限制；选择命中文档的所有关键字中权重最大的作为文档的score；</p> <p>top_terms_boost_N，抓取得分最高的前N个关键字，并将查询重写为bool查询；此选项不受indices.query.bool.max_clause_count 限制；直接使用boost作为文档的score；</p> <p>top_terms_N，抓取得分最高的前N个关键字，并将查询重写为bool查询；此选项不受indices.query.bool.max_clause_count 限制；计算命中文档的相对权重作为评分；</p> <p>三、wildcard查询重写分析</p> <p>我们通过elasticsearch来查看一下以下查询语句的重写逻辑；</p> <pre><code>{     "query":{         "wildcard":{             "text":{                 "value":"m*"             }         }     } }</code></pre> <p>通过查询使用的字段映射类型构建WildCardQuery，并使用查询语句中配置的rewrite对应的MultiTermQuery.RewriteMethod；</p> <pre><code>//WildcardQueryBuilder.java @Override protected Query doToQuery(SearchExecutionContext context) throws IOException {     MappedFieldType fieldType = context.getFieldType(fieldName);      if (fieldType == null) {         throw new IllegalStateException("Rewrite first");     }      MultiTermQuery.RewriteMethod method = QueryParsers.parseRewriteMethod(rewrite, null, LoggingDeprecationHandler.INSTANCE);     return fieldType.wildcardQuery(value, method, caseInsensitive, context); }</code></pre> <p>根据查询语句中配置的rewrite，查找对应的MultiTermQuery.RewriteMethod，由于我们没有在wildcard查询语句中设置rewrite参数，这里直接返回null；</p> <pre><code>//QueryParsers.java public static MultiTermQuery.RewriteMethod parseRewriteMethod(     @Nullable String rewriteMethod,     @Nullable MultiTermQuery.RewriteMethod defaultRewriteMethod,     DeprecationHandler deprecationHandler ) {     if (rewriteMethod == null) {         return defaultRewriteMethod;     }     if (CONSTANT_SCORE.match(rewriteMethod, deprecationHandler)) {         return MultiTermQuery.CONSTANT_SCORE_REWRITE;     }     if (SCORING_BOOLEAN.match(rewriteMethod, deprecationHandler)) {         return MultiTermQuery.SCORING_BOOLEAN_REWRITE;     }     if (CONSTANT_SCORE_BOOLEAN.match(rewriteMethod, deprecationHandler)) {         return MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE;     }      int firstDigit = -1;     for (int i = 0; i &lt; rewriteMethod.length(); ++i) {         if (Character.isDigit(rewriteMethod.charAt(i))) {             firstDigit = i;             break;         }     }      if (firstDigit &gt;= 0) {         final int size = Integer.parseInt(rewriteMethod.substring(firstDigit));         String rewriteMethodName = rewriteMethod.substring(0, firstDigit);          if (TOP_TERMS.match(rewriteMethodName, deprecationHandler)) {             return new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(size);         }         if (TOP_TERMS_BOOST.match(rewriteMethodName, deprecationHandler)) {             return new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(size);         }         if (TOP_TERMS_BLENDED_FREQS.match(rewriteMethodName, deprecationHandler)) {             return new MultiTermQuery.TopTermsBlendedFreqScoringRewrite(size);         }     }      throw new IllegalArgumentException("Failed to parse rewrite_method [" + rewriteMethod + "]"); } }</code></pre> <p>WildCardQuery继承MultiTermQuery，直接调用rewrite方法进行重写，由于我们没有在wildcard查询语句中设置rewrite参数，这里直接使用默认的CONSTANT_SCORE_REWRITE；</p> <pre><code>  //MultiTermQuery.java   protected RewriteMethod rewriteMethod = CONSTANT_SCORE_REWRITE;         @Override   public final Query rewrite(IndexReader reader) throws IOException {     return rewriteMethod.rewrite(reader, this);   }</code></pre> <p>可以看到CONSTANT_SCORE_REWRITE是直接使用的匿名类，rewrite方法返回的是MultiTermQueryConstantScoreWrapper的实例；</p> <pre><code>  //MultiTermQuery.java   public static final RewriteMethod CONSTANT_SCORE_REWRITE =       new RewriteMethod() {         @Override         public Query rewrite(IndexReader reader, MultiTermQuery query) {           return new MultiTermQueryConstantScoreWrapper&lt;&gt;(query);         }       };</code></pre> <p>在以下方法中，首先会得到查询字段对应的所有term集合；<br /> 然后通过 query.getTermsEnum获取跟查询匹配的所有term集合；<br /> 最后根据collectTerms调用的返回值决定是否构建bool查询还是bit set；</p> <pre><code>      //MultiTermQueryConstantScoreWrapper.java       private WeightOrDocIdSet rewrite(LeafReaderContext context) throws IOException {         final Terms terms = context.reader().terms(query.field);         if (terms == null) {           // field does not exist           return new WeightOrDocIdSet((DocIdSet) null);         }          final TermsEnum termsEnum = query.getTermsEnum(terms);         assert termsEnum != null;          PostingsEnum docs = null;          final List&lt;TermAndState&gt; collectedTerms = new ArrayList&lt;&gt;();         if (collectTerms(context, termsEnum, collectedTerms)) {           // build a boolean query           BooleanQuery.Builder bq = new BooleanQuery.Builder();           for (TermAndState t : collectedTerms) {             final TermStates termStates = new TermStates(searcher.getTopReaderContext());             termStates.register(t.state, context.ord, t.docFreq, t.totalTermFreq);             bq.add(new TermQuery(new Term(query.field, t.term), termStates), Occur.SHOULD);           }           Query q = new ConstantScoreQuery(bq.build());           final Weight weight = searcher.rewrite(q).createWeight(searcher, scoreMode, score());           return new WeightOrDocIdSet(weight);         }          // Too many terms: go back to the terms we already collected and start building the bit set         DocIdSetBuilder builder = new DocIdSetBuilder(context.reader().maxDoc(), terms);         if (collectedTerms.isEmpty() == false) {           TermsEnum termsEnum2 = terms.iterator();           for (TermAndState t : collectedTerms) {             termsEnum2.seekExact(t.term, t.state);             docs = termsEnum2.postings(docs, PostingsEnum.NONE);             builder.add(docs);           }         }          // Then keep filling the bit set with remaining terms         do {           docs = termsEnum.postings(docs, PostingsEnum.NONE);           builder.add(docs);         } while (termsEnum.next() != null);          return new WeightOrDocIdSet(builder.build());       }</code></pre> <p>调用collectTerms默认只会提取查询命中的16个关键字；</p> <pre><code>      //MultiTermQueryConstantScoreWrapper.java       private static final int BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD = 16;       private boolean collectTerms(           LeafReaderContext context, TermsEnum termsEnum, List&lt;TermAndState&gt; terms)           throws IOException {         final int threshold =             Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, IndexSearcher.getMaxClauseCount());         for (int i = 0; i &lt; threshold; ++i) {           final BytesRef term = termsEnum.next();           if (term == null) {             return true;           }           TermState state = termsEnum.termState();           terms.add(               new TermAndState(                   BytesRef.deepCopyOf(term),                   state,                   termsEnum.docFreq(),                   termsEnum.totalTermFreq()));         }         return termsEnum.next() == null;       }</code></pre> <p>通过以上分析wildcard查询默认情况下，会提取字段中所有命中查询的关键字；</p> <p>四、fvh Highlighter中wildcard的查询重写</p> <p>在muti term query中，提取查询关键字是高亮逻辑一个很重要的步骤；</p> <p>我们使用以下高亮语句，分析以下高亮中提取查询关键字过程中的查询重写；</p> <pre><code>{     "query":{         "wildcard":{             "text":{                 "value":"m*"             }         }     },     "highlight":{         "fields":{             "text":{                 "type":"fvh"             }         }     } }</code></pre> <p>默认情况下只有匹配的字段才会进行高亮，这里构建CustomFieldQuery；</p> <pre><code>//FastVectorHighlighter.java if (field.fieldOptions().requireFieldMatch()) {     /*      * we use top level reader to rewrite the query against all readers,      * with use caching it across hits (and across readers...)      */     entry.fieldMatchFieldQuery = new CustomFieldQuery(         fieldContext.query,         hitContext.topLevelReader(),         true,         field.fieldOptions().requireFieldMatch()     ); }</code></pre> <p>通过调用flatten方法得到重写之后的flatQueries，然后将每个提取的关键字重写为BoostQuery；</p> <pre><code>  //FieldQuery.java   public FieldQuery(Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch)       throws IOException {     this.fieldMatch = fieldMatch;     Set&lt;Query&gt; flatQueries = new LinkedHashSet&lt;&gt;();     flatten(query, reader, flatQueries, 1f);     saveTerms(flatQueries, reader);     Collection&lt;Query&gt; expandQueries = expand(flatQueries);      for (Query flatQuery : expandQueries) {       QueryPhraseMap rootMap = getRootMap(flatQuery);       rootMap.add(flatQuery, reader);       float boost = 1f;       while (flatQuery instanceof BoostQuery) {         BoostQuery bq = (BoostQuery) flatQuery;         flatQuery = bq.getQuery();         boost *= bq.getBoost();       }       if (!phraseHighlight &amp;&amp; flatQuery instanceof PhraseQuery) {         PhraseQuery pq = (PhraseQuery) flatQuery;         if (pq.getTerms().length &gt; 1) {           for (Term term : pq.getTerms()) rootMap.addTerm(term, boost);         }       }     }   }</code></pre> <p>由于WildCardQuery是MultiTermQuery的子类，所以在flatten方法中最终直接使用MultiTermQuery.TopTermsScoringBooleanQueryRewrite进行查询重写，这里的top N是MAX_MTQ_TERMS = 1024；</p> <pre><code>  //FieldQuery.java      private static final int MAX_MTQ_TERMS = 1024;      protected void flatten(       Query sourceQuery, IndexReader reader, Collection&lt;Query&gt; flatQueries, float boost)       throws IOException {             ..................................      ..................................             else if (reader != null) {       Query query = sourceQuery;       Query rewritten;       if (sourceQuery instanceof MultiTermQuery) {         rewritten =             new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS)                 .rewrite(reader, (MultiTermQuery) query);       } else {         rewritten = query.rewrite(reader);       }       if (rewritten != query) {         // only rewrite once and then flatten again - the rewritten query could have a speacial         // treatment         // if this method is overwritten in a subclass.         flatten(rewritten, reader, flatQueries, boost);       }       // if the query is already rewritten we discard it     }     // else discard queries   }</code></pre> <p>这里首先计算设置的size和getMaxSize(默认值1024， IndexSearcher.getMaxClauseCount())计算最终提取的命中关键字数量，这里最终是1024个；</p> <p>这里省略了传入collectTerms的TermCollector匿名子类的实现，其余最终提取关键字数量有关；</p> <pre><code>  //FieldQuery.java    @Override   public final Query rewrite(final IndexReader reader, final MultiTermQuery query)       throws IOException {     final int maxSize = Math.min(size, getMaxSize());     final PriorityQueue&lt;ScoreTerm&gt; stQueue = new PriorityQueue&lt;&gt;();     collectTerms(         reader,         query,         new TermCollector() {                   ................          });      .............     return build(b);   }</code></pre> <p>这里首先获取查询字段对应的所有term集合，然后获取所有的与查询匹配的term集合，最终通过传入的collector提取关键字；</p> <pre><code>  //TermCollectingRewrite.java   final void collectTerms(IndexReader reader, MultiTermQuery query, TermCollector collector)       throws IOException {     IndexReaderContext topReaderContext = reader.getContext();     for (LeafReaderContext context : topReaderContext.leaves()) {       final Terms terms = context.reader().terms(query.field);       if (terms == null) {         // field does not exist         continue;       }        final TermsEnum termsEnum = getTermsEnum(query, terms, collector.attributes);       assert termsEnum != null;        if (termsEnum == TermsEnum.EMPTY) continue;        collector.setReaderContext(topReaderContext, context);       collector.setNextEnum(termsEnum);       BytesRef bytes;       while ((bytes = termsEnum.next()) != null) {         if (!collector.collect(bytes))           return; // interrupt whole term collection, so also don't iterate other subReaders       }     }   }</code></pre> <p>这里通过控制最终提取匹配查询的关键字的数量不超过maxSize；</p> <pre><code>          //TopTermsRewrite.java           @Override           public boolean collect(BytesRef bytes) throws IOException {             final float boost = boostAtt.getBoost();              // make sure within a single seg we always collect             // terms in order             assert compareToLastTerm(bytes);              // System.out.println("TTR.collect term=" + bytes.utf8ToString() + " boost=" + boost + "             // ord=" + readerContext.ord);             // ignore uncompetitive hits             if (stQueue.size() == maxSize) {               final ScoreTerm t = stQueue.peek();               if (boost &lt; t.boost) return true;               if (boost == t.boost &amp;&amp; bytes.compareTo(t.bytes.get()) &gt; 0) return true;             }             ScoreTerm t = visitedTerms.get(bytes);             final TermState state = termsEnum.termState();             assert state != null;             if (t != null) {               // if the term is already in the PQ, only update docFreq of term in PQ               assert t.boost == boost : "boost should be equal in all segment TermsEnums";               t.termState.register(                   state, readerContext.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());             } else {               // add new entry in PQ, we must clone the term, else it may get overwritten!               st.bytes.copyBytes(bytes);               st.boost = boost;               visitedTerms.put(st.bytes.get(), st);               assert st.termState.docFreq() == 0;               st.termState.register(                   state, readerContext.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());               stQueue.offer(st);               // possibly drop entries from queue               if (stQueue.size() &gt; maxSize) {                 st = stQueue.poll();                 visitedTerms.remove(st.bytes.get());                 st.termState.clear(); // reset the termstate!               } else {                 st = new ScoreTerm(new TermStates(topReaderContext));               }               assert stQueue.size() &lt;= maxSize : "the PQ size must be limited to maxSize";               // set maxBoostAtt with values to help FuzzyTermsEnum to optimize               if (stQueue.size() == maxSize) {                 t = stQueue.peek();                 maxBoostAtt.setMaxNonCompetitiveBoost(t.boost);                 maxBoostAtt.setCompetitiveTerm(t.bytes.get());               }             }              return true;           }</code></pre> <p>通过以上分析可以看到，fvh Highlighter对multi term query的重写，直接使用MultiTermQuery.TopTermsScoringBooleanQueryRewrite，并限制只能最多提取查询关键字1024个；</p> <p>五、重写可能导致的高亮问题原因分析</p> <p>经过以上对查询和高亮的重写过程分析可以知道，默认情况下</p> <p>query阶段提取的是命中查询的所有的关键字，具体行为可以通过rewrite参数进行定制；</p> <p>Highlight阶段提取的是命中查询的关键字中的前1024个，具体行为不受rewrite参数的控制；</p> <p>如果查询的字段是大文本字段，导致字段的关键字很多，就可能会出现查询命中的文档的关键字不在前1024个里边，从而导致明明匹配了文档，但是却没有返回高亮信息；</p> <p>六、解决方案</p> <ol> <li>进一步明确查询关键字，减少查询命中的关键字的数量，例如输入更多的字符，；</li> <li>使用其他类型的查询替换multi term query；</li> </ol> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-211.htm">谨慎使用Arrays.asList()</a></p>
                                        <p>下一个：<a href="/html/category/article-213.htm">Redis 如何保证数据库和缓存双写一致性？</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-204.htm">Kafka启动报错处理：/opt/module/kafka/bin/kafka-run-class.sh: 第 258 行:exec: java: 未找到</a></h4>
                <p>今天在学习Kafka的时候，写了个脚本，用于集群中kafka的群起。发现启动不了。???? 去掉-daemon参数后，继续启动，看到了它报的错误(日志中也有显示)。找不到java？？？ 看了相关资料后</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-261.htm">Centos7服务器上RabbitMQ单机安装_在线工具</a></h4>
                <p>一、背景 最近项目中用到了RabbitMQ，但是发现自己本地没有安装，此文记录一下本地RabbitMQ的安装过程。注意不同的系统安装方式略有不同，此处我们记录的是Centos7的安装方式。 二、安装方</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-253.htm">Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required List parame</a></h4>
                <p>问题：Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required List par</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-213.htm">Redis 如何保证数据库和缓存双写一致性？</a></h4>
                <p>前言  数据库和缓存（比如：redis）双写数据一致性问题，是一个跟开发语言无关的公共问题。尤其在高并发的场景下，这个问题变得更加严重。 我很负责的告诉大家，该问题无论在面试，还是工作中遇到的概率非常</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-231.htm">通俗易懂：窗口函数案例详解</a></h4>
                <p>什么是窗口函数 相信很多人都比较熟悉 SQL 聚合函数的语法，比如 count(), sum(), max()等， 窗口函数类似聚合函数，不同的是窗口函数不改变原有的行。 窗口函数是数据分析和数据开发</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-238.htm">js数组删除的方法</a></h4>
                <p>js的数组删除，我建议大家使用splice函数，不要使用slice函数，因为slice是返回一个新数组，并不是从原来的数组中删除。 比如： let a=[111,222,333,444]; a.spl</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-225.htm">坑——java里List的remove方法</a></h4>
                <p>写过的类似代码： /**  * 2018年5月20日上午9:54:02  */ package com.test;  import java.util.ArrayList; import java.u</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-223.htm">Spring Security——【认证、授权、注销及权限控制】</a></h4>
                <p>目录 Spring Security简介： 实验环境搭建： 认证和授权 权限控制和注销  Spring Security简介： Spring Security 是针对Spring项目的安全框架，也是S</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-251.htm">SpringMVC拦截器path路径的坑</a></h4>
                <p>SpringMVC提供了很方便的拦截器供我们开发使用。在配置文件中通过&lt;mvc:mapping path="" /&gt;进行配置拦截的路径，但是这个path在配置的时候有一个小坑 我们都知道在</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-211.htm">谨慎使用Arrays.asList()</a></h4>
                <p>经过了两个月的【深入学习Java编程方法】课程学习，对Java的一些新特性有了更多的了解。依旧，坑洼遍地。 Java中的Collection类是一个很好用、很常用的类，省去了当年C语言手动链表的麻烦之</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>