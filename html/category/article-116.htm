<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-116.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>java 拦截器响应中取所有参数,SpringBoot拦截器怎么获取http请求参数 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">java 拦截器响应中取所有参数,SpringBoot拦截器怎么获取http请求参数</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="htmledit_views"> <div style="font-size:16px;"> <p>1.1、获取http请求参数是一种刚需</p> <p>我想有的小伙伴肯定有过获取http请求的需要，比如想</p> <p>前置获取参数，统计请求数据</p> <p>做服务的接口签名校验</p> <p>敏感接口监控日志</p> <p>敏感接口防重复提交</p> <p>等等各式各样的场景，这时你就需要获取 HTTP 请求的参数或者请求body，一般思路有两种，一种就是自定义个AOP去拦截目标方法，第二种就是使用拦截器。整体比较来说，使用拦截器更灵活些，因为每个接口的请求参数定义不同，使用AOP很难细粒度的获取到变量参数，本文主线是使用拦截器来获取HTTP请求。</p> <p>1.2、定义拦截器获取请求</p> <p>使用 spring-boot-starter-parent 2.1.9.RELEASE</p> <p>看起来这个很简单，这里就直接上code，定义个拦截器</p> <p>/**</p> <p>* @author axin</p> <p>* @summary HTTP请求拦截器</p> <p>*/</p> <p>@Slf4j</p> <p>public class RequestInterceptor implements HandlerInterceptor {<!-- --></p> <p>@Override</p> <p>public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {<!-- --></p> <p>//获取请求参数</p> <p>String queryString = request.getQueryString();</p> <p>log.info("请求参数:{}", queryString);</p> <p>//获取请求body</p> <p>byte[] bodyBytes = StreamUtils.copyToByteArray(request.getInputStream());</p> <p>String body = new String(bodyBytes, request.getCharacterEncoding());</p> <p>log.info("请求体：{}", body);</p> <p>return true;</p> <p>}</p> <p>}</p> <p>然后把这个拦截器配置一下中：</p> <p>/**</p> <p>* WebMVC配置，你可以集中在这里配置拦截器、过滤器、静态资源缓存等</p> <p>*/</p> <p>@Configuration</p> <p>public class WebMvcConfig implements WebMvcConfigurer {<!-- --></p> <p>@Override</p> <p>public void addInterceptors(InterceptorRegistry registry) {<!-- --></p> <p>registry.addInterceptor(new RequestInterceptor()).addPathPatterns("/**");</p> <p>}</p> <p>}</p> <p>定义个接口测试一下</p> <p>/**</p> <p>* @author axin</p> <p>* @summary 提交测试接口</p> <p>*/</p> <p>@Slf4j</p> <p>@RestController</p> <p>public class MyHTTPController {<!-- --></p> <p>@GetMapping("/v1/get")</p> <p>public void get(@RequestParam("one") String one,</p> <p>@RequestParam("two") BigDecimal number) {<!-- --></p> <p>log.info("参数:{},{}", one, number);</p> <p>}</p> <p>@PostMapping("/v1/post")</p> <p>public void check(@RequestBody User user) {<!-- --></p> <p>log.info("{}", JSON.toJSONString(user));</p> <p>}</p> <p>}</p> <p>GET请求获取请求参数示例：</p> <p align="center"><img decoding="async" src="0" alt="2020110711562040937.png"></p> <p>POST请求获取请求Body示例：</p> <p align="center"><img decoding="async" src="0" alt="2020110711562040938.jpg"></p> <p>我们发现拦截器在获取HTTP请求的body时出现了 400 (Required request body is missing: public void com.axin.world.controller.MyHTTPController.check(com.axin.world.domain.User))；同时也发现拦截器竟然走了两遍，这又是咋回事呢？</p> <p align="center"><img decoding="async" src="0" alt="2020110711562040939.jpg"></p> <p>1.3、为什么拦截器会重复调两遍呢？</p> <p>其实是因为 tomcat截取到异常后就转发到/error网页，就在这个转发的过程中导致了springmvc重新版开始DispatcherServlet的整个流程，所以拦截器执行了两次，我们可以看下第二次调用时的url路径：</p> <p align="center"><img decoding="async" src="0" alt="2020110711562140940.jpg"></p> <p>1.4、ServletInputStream(CoyoteInputStream) 输入流无法重复调用</p> <p>而之前出现的 Required request body is missing 错误 其实是ServletInputStream被读取后无法第二次再读取了，所以我们要把读取过的内容存下来，然后需要的时候对外提供可被重复读取的ByteArrayInputStream。</p> <p>对于MVC的过滤器来说，我们就需要重写 ServletInputStream 的 getInputStream()方法。</p> <p>1.5、自定义 HttpServletRequestWrapper</p> <p>为了 重写 ServletInputStream 的 getInputStream()方法，我们需要自定义一个 HttpServletRequestWrapper ：</p> <p>/**</p> <p>* @author Axin</p> <p>* @summary 自定义 HttpServletRequestWrapper 来包装输入流</p> <p>*/</p> <p>public class AxinHttpServletRequestWrapper extends HttpServletRequestWrapper {<!-- --></p> <p>/**</p> <p>* 缓存下来的HTTP body</p> <p>*/</p> <p>private byte[] body;</p> <p>public AxinHttpServletRequestWrapper(HttpServletRequest request) throws IOException {<!-- --></p> <p>super(request);</p> <p>body = StreamUtils.copyToByteArray(request.getInputStream());</p> <p>}</p> <p>/**</p> <p>* 重新版包装输入流</p> <p>* @return</p> <p>* @throws IOException</p> <p>*/</p> <p>@Override</p> <p>public ServletInputStream getInputStream() throws IOException {<!-- --></p> <p>InputStream bodyStream = new ByteArrayInputStream(body);</p> <p>return new ServletInputStream() {<!-- --></p> <p>@Override</p> <p>public int read() throws IOException {<!-- --></p> <p>return bodyStream.read();</p> <p>}</p> <p>/**</p> <p>* 下面的方法一般情况下不会被使用，如果你引入了一些需要使用ServletInputStream的外部组件，可以重要关注一下。</p> <p>* @return</p> <p>*/</p> <p>@Override</p> <p>public boolean isFinished() {<!-- --></p> <p>return false;</p> <p>}</p> <p>@Override</p> <p>public boolean isReady() {<!-- --></p> <p>return true;</p> <p>}</p> <p>@Override</p> <p>public void setReadListener(ReadListener readListener) {<!-- --></p> <p>}</p> <p>};</p> <p>}</p> <p>@Override</p> <p>public BufferedReader getReader() throws IOException {<!-- --></p> <p>InputStream bodyStream = new ByteArrayInputStream(body);</p> <p>return new BufferedReader(new InputStreamReader(getInputStream()));</p> <p>}</p> <p>}</p> <p>然后定义一个 DispatcherServlet子类来分派 上面自定义的 AxinHttpServletRequestWrapper ：</p> <p>/**</p> <p>* @author Axin</p> <p>* @summary 自定义 DispatcherServlet 来分派 AxinHttpServletRequestWrapper</p> <p>*/</p> <p>public class AxinDispatcherServlet extends DispatcherServlet {<!-- --></p> <p>/**</p> <p>* 包装成我们自定义的request</p> <p>* @param request</p> <p>* @param response</p> <p>* @throws Exception</p> <p>*/</p> <p>@Override</p> <p>protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {<!-- --></p> <p>super.doDispatch(new AxinHttpServletRequestWrapper(request), response);</p> <p>}</p> <p>}</p> <p>然后配置一下：</p> <p>/**</p> <p>* WebMVC配置，你可以集中在这里配置拦截器、过滤器、静态资源缓存等</p> <p>*/</p> <p>@Configuration</p> <p>public class WebMvcConfig implements WebMvcConfigurer {<!-- --></p> <p>@Override</p> <p>public void addInterceptors(InterceptorRegistry registry) {<!-- --></p> <p>registry.addInterceptor(new RequestInterceptor()).addPathPatterns("/**");</p> <p>}</p> <p>@Bean</p> <p>@Qualifier(DispatcherServletAutoConfiguration.DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</p> <p>public DispatcherServlet dispatcherServlet() {<!-- --></p> <p>return new AxinDispatcherServlet();</p> <p>}</p> <p>}</p> <p>再调用一下 POST请求：</p> <p align="center"><img decoding="async" src="0" alt="2020110711562140941.png"></p> <p>请求成功！</p> <p>1.5、总结一下 展望一下</p> <p>如果你想对HTTP请求做些骚操作，那么前置获取HTTP请求参数是前提，为此文本给出了使用MVC拦截器获取参数的样例。</p> <p>在获取HTTP Body 的时候，出现了 Required request body is missing 的错误，同时拦截器还出现执行了两遍的问题，这是因为 ServletInputStream被读取了两遍导致的，tomcat截取到异常后就转发到 /error 网页 被拦截器拦截到了，拦截器也就执行了两遍。</p> <p>为此我们通过自定义 HttpServletRequestWrapper 来包装一个可被重读读取的输入流，来达到期望的拦截效果。</p> <p>在获取到HTTP的请求参数后，我们可以前置做很多操作，比如常用的版本接口签名验证，敏感接口防重复请求等等。</p> <p>个人水平有限，如果文章有逻辑错误或表述问题还请指出，欢迎一起交流。</p> <p>到此这篇关于SpringBoot拦截器怎么获取http请求参数的文章就简介到这了,更多相关SpringBoot拦截器获取http请求参数内容请搜索乐购源码以前的文章或继续浏览下面的相关文章希望大家以后多多支持乐购源码！</p> </div></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-115.htm">分布式缓存&#8211;缓存与数据库一致性方案</a></p>
                                        <p>下一个：<a href="/html/category/article-117.htm">Mysql执行流程详解</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-255.htm">vue动态获取ref方式</a></h4>
                <p>&lt;div v-for="(item,index) in list" :key="index"              :class=" circleAnimation === 1 ? 'bal</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-240.htm">python神经网络使用Keras构建RNN训练_python</a></h4>
                <p>目录  Keras中构建RNN的重要函数  1、SimpleRNN 2、model.train_on_batch  全部代码     Keras中构建RNN的重要函数  1、SimpleRNN Sim</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-218.htm">利用Python实现RSA加密解密方法实例_python</a></h4>
                <p>目录  前言 一、安装模块 二、生成密钥对 三、加密 四、解密 五、完整代码 总结    前言  加密技术在数据安全存储，数据传输中发挥着重要作用，能够保护用户隐私数据安全，防止信息窃取。RSA是一种</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-217.htm">Java 集合框架ArrayList 储存自定义数组</a></h4>
                <p>package LinkedList;  import java.util.ArrayList; import java.util.Iterator;  import p.bean.Person;  </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-209.htm">C#中检查null的语法糖_在线工具</a></h4>
                <p>今天看到已经更新了devblogs，新增的C# 11的!!（用于检查null的语法）经过非常长的讨论，最后取消了。然后我又想起来null检查，这个可以说一说。 函数参数null检查 传统写法 写一个函</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-244.htm">vue实现页面刷新动画_vue.js_</a></h4>
                <p>本文实例为大家分享了vue实现页面刷新动画的具体代码，供大家参考，具体内容如下 做一个vue的页面刷新动画，找了好多动画样式，感谢大佬们造的轮子。 主要就是在index.html文件里面写一个动画样式</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-234.htm">数据传输POST心法分享，做前端的你还解决不了这个bug？</a></h4>
                <p>背景 随时随地给大家提供技术支持的葡萄又来了。这次的事情是这样的，提供demo属于是常规操作，但是前两天客户突然反馈压缩传输模块抛出异常，具体情况是压缩内容传输到服务端后无法解压。 由于代码没有发生任</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-227.htm">企业应用架构研究系列十九：Docker开发环境</a></h4>
                <p>　　软件行业流行这样一个说法，由于Docker 技术的成熟和该技术被广大厂商的普遍应用，成就了微服务领域的快速成长，衍生了云原生技术和公有云的进一步推广。我个人认为Dockers 技术、微服务技术、云</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-207.htm">MySQL——union(合并结果集)、limit(获取部分数据)、关于MySQL中常用数据类型</a></h4>
                <p>博客目录 1、union(合并结果集) 2、limit(获取一张表中某部分数据) 3、表——创建表、删除表 4、关于MySQL中的数据类型  一、union(合并结果集)  将两个查询结果合并(可以是</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-219.htm">正则表达式-匹配ip及rtsp</a></h4>
                <p>IP地址是指互联网协议地址（英语：Internet Protocol Address，又译为网际协议地址），是IP Address的缩写。IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>