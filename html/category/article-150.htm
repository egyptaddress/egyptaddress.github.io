<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-150.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Spring Boot拦截器示例及源码原理分析 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Spring Boot拦截器示例及源码原理分析</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://blog.csdn.net/icarusliu/article/details/78809790"  rel="nofollow">SpringMVC源码分析</a>一文中，已经对SpringMVC的初始化及请求响应过程进行了分析，但未对拦截器进行深入研究。<br /> 本文将首先通过示例的方式了解拦截器的工作原理，然后再深入分析其源码来了解其内部原理。<br /> 本文代码基于Spring Boot+Kotlin。</p> <h1 id="1-自定义拦截器">1 自定义拦截器</h1> <p>GITHUB地址：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/icarusliu/learn"  target="_blank" rel="nofollow">https://github.com/icarusliu/learn</a></p> <h2 id="11-interceptor定义">1.1 Interceptor定义</h2> <p>第一步我们先来定义一个Interceptor；<br /> 拦截器一般需要继承自HandlerInterceptor，并需要实现以下三个接口：</p> <table> <thead> <tr> <th>接口</th> <th>接口名称</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>preHandle</td> <td>前置处理</td> <td>在实际的Handle执行前执行；有Boolean类型的返回值，如果返回为False，则Handle本身及postHandle/afterCompletion以及后续的拦截器全部都不会再继续执行；为True则反之。</td> </tr> <tr> <td>postHandle</td> <td>后置处理</td> <td>Handle执行后视图渲染前执行</td> </tr> <tr> <td>afterCompletion</td> <td>完成后处理</td> <td>Handle执行且视图渲染完成后执行</td> </tr> </tbody> </table> <p>Spring为方便使用实现了HandlerInterceptorAdapter的抽象类；需要实现的方法都实现为空的方法，在使用时只需实现必要的方法即可。</p> <p>定义的测试拦截器见以下代码：</p> <pre class="prettyprint"><code class="language-java hljs">class TestInterceptor: HandlerInterceptorAdapter() {<span class="hljs-keyword">private</span> val logger = LoggerFactory.getLogger(HandlerInterceptorAdapter::class.java)<span class="hljs-javadoc">/**      * This implementation always returns `true`.      */</span><span class="hljs-annotation">@Throws</span>(Exception::class)     override fun preHandle(request: HttpServletRequest, response: HttpServletResponse, handler: Any): Boolean {<span class="hljs-keyword">if</span> (logger.isDebugEnabled) {             logger.debug(<span class="hljs-string">"TestInterceptor preHandle begin to execute!"</span>)         }<span class="hljs-keyword">return</span><span class="hljs-keyword">true</span>     }<span class="hljs-javadoc">/**      * This implementation is empty.      */</span><span class="hljs-annotation">@Throws</span>(Exception::class)     override fun postHandle(request: HttpServletRequest, response: HttpServletResponse, handler: Any,<span class="hljs-annotation">@Nullable</span> modelAndView: ModelAndView?) {<span class="hljs-keyword">if</span> (logger.isDebugEnabled) {             logger.debug(<span class="hljs-string">"TestInterceptor postHandle begin to execute!"</span>)         }     }<span class="hljs-javadoc">/**      * This implementation is empty.      */</span><span class="hljs-annotation">@Throws</span>(Exception::class)     override fun afterCompletion(request: HttpServletRequest, response: HttpServletResponse, handler: Any,<span class="hljs-annotation">@Nullable</span> ex: Exception?) {<span class="hljs-keyword">if</span> (logger.isDebugEnabled) {             logger.debug(<span class="hljs-string">"TestInterceptor afterCompletion begin to execute!"</span>)         }     }<span class="hljs-javadoc">/**      * This implementation is empty.      */</span><span class="hljs-annotation">@Throws</span>(Exception::class)     override fun afterConcurrentHandlingStarted(request: HttpServletRequest, response: HttpServletResponse,                                                 handler: Any) {<span class="hljs-keyword">if</span> (logger.isDebugEnabled) {             logger.debug(<span class="hljs-string">"TestInterceptor afterConcurrentHandlingStarted begin to execute!"</span>)         }     } }</code></pre> <h2 id="12-拦截器配置">1.2 拦截器配置</h2> <p>拦截器定义完成后，还需要将拦截器引入，并指定该拦截器所拦截的场景。<br /> 在SpringBoot中，一般通过使用EnableWebMvc及Configuration两个注解，并实现WebMvcConfigurer接口来添加拦截器，实现代码如下：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@EnableWebMvc</span><span class="hljs-annotation">@Configuration</span> class WebConfig: WebMvcConfigurer {     override fun addInterceptors(registry: InterceptorRegistry) {         registry.addInterceptor(TestInterceptor()).addPathPatterns(<span class="hljs-string">"/**"</span>)     } }</code></pre> <p>注解一定要通过addPathPatterns来指定该拦截器所拦截的URL，如果不指定将不会拦截任何请求。.</p> <h2 id="13-定义controller">1.3 定义Controller</h2> <p>Controller的定义比较简单，在此不细说，代码如下：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@RestController</span><span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/test"</span>) class TestController {<span class="hljs-keyword">private</span> val logger = LoggerFactory.getLogger(TestController::class.java)<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/test"</span>)     fun test(): String {<span class="hljs-keyword">if</span> (logger.isDebugEnabled) {             logger.debug(<span class="hljs-string">"Test controller begin to execute!"</span>)         }          logger.info(<span class="hljs-string">"Test!"</span>)<span class="hljs-keyword">if</span> (logger.isDebugEnabled) {             logger.debug(<span class="hljs-string">"Test controller execution has been completed!"</span>)         }<span class="hljs-keyword">return</span><span class="hljs-string">"test"</span>;     } }</code></pre> <h2 id="14-测试类定义">1.4 测试类定义</h2> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@RunWith</span>(SpringRunner::class)<span class="hljs-annotation">@WebMvcTest</span>(TestController::class) class LearninterceptorApplicationTests {<span class="hljs-keyword">private</span> val logger = LoggerFactory.getLogger(LearninterceptorApplicationTests::class.java)<span class="hljs-annotation">@Autowired</span><span class="hljs-keyword">private</span> lateinit var mvc: MockMvc      @Test     fun<span class="hljs-title">testTestController</span>() {         mvc.perform(get(<span class="hljs-string">"/test/test"</span>)).andExpect(status().isOk)                 .andExpect(content().string(<span class="hljs-string">"test"</span>));     }  }</code></pre> <p>在此，一个测试的Interceptor及其测试的Controller及单元测试类即定义完成。<br /> 可以通过执行测试类看到测试结果，在此不细述。</p> <h1 id="15-配置分析">1.5 配置分析</h1> <p>在1.2章节中我们通过@EnableWebMvc注解来进行拦截器的自定义配置，通过分析该类及相关类，各个类的作用如下</p> <h1 id="151-enablewebmvc">1.5.1 EnableWebMvc</h1> <p>与Configuration注解结合，可从WebMvcConfigurationSupport中引入SpringMVC的相关配置；如果需要修改引入的配置，需要通过实现WebMvcConfigurer接口提供的方法来进行。<br /> 注解EnableWebMvc在一个工程中只能注解在一个类上； 但实现WebMvcConfigurer的类可以有多个。<br /> EnableWebMvc是如何引入WebMvcConfigurationSupport中的相关配置的呢？<br /> 我们来看下其本身实现：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@Retention</span>(RetentionPolicy.RUNTIME)<span class="hljs-annotation">@Target</span>(ElementType.TYPE)<span class="hljs-annotation">@Documented</span><span class="hljs-annotation">@Import</span>(DelegatingWebMvcConfiguration.class)<span class="hljs-keyword">public</span> @<span class="hljs-class"><span class="hljs-keyword">interface</span><span class="hljs-title">EnableWebMvc</span> {<!-- --></span> }</code></pre> <p>可以看到其通过Import引入了DelegatingWebMvcConfiguration配置类， 而这个类又继承了WebMvcConfigurationSupport类。<br /> 关于这部分如何生效的后文将会进行详解。</p> <h1 id="152-webmvcconfigurer">1.5.2 WebMvcConfigurer</h1> <p>WebMvcConfigurer主要是提供接口来实现SpringMVC的自定义配置，其中它与Interceptor相关的就是addInterceptors方法，通过覆盖该方法，可以添加自定义Interceptor。</p> <p>addInterceptors返回类型为InterceptorRegistration对象，通过查看该类实现，看到其提供的主要方法是： addPathPatterns/excludePathPatterns/pathMatcher/order，主要完成两个功能：一是提供配置所添加的Interceptor的映射路径的方法；二是提供配置所添加的Interceptor的Order的方法，通过Order可控制所添加的Interceptor在所有Interceptors中的执行顺序。<br /> 其使用代码如下：</p> <pre class="prettyprint"><code class="language-java hljs">override fun addInterceptors(registry: InterceptorRegistry) {     registry.addInterceptor(TestInterceptor())             .addPathPatterns(<span class="hljs-string">"/**"</span>)             .order(<span class="hljs-number">1000</span>) }</code></pre> <h1 id="2-拦截器生效过程源码分析">2 拦截器生效过程源码分析</h1> <p>在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://blog.csdn.net/icarusliu/article/details/78809790"  target="_blank" rel="nofollow">SpringMVC源码分析</a>一文的2.2.2.1章节中，已经分析过DiapatcherServlet中的Service方法的执行过程；跟拦截器相关的执行流程如下：</p> <div class="flow-chart"></div> <p>其关键就在Handle及拦截器的查找中；至于执行过程较为简单不再详细说明。</p> <p>接下来我们分析拦截器的查找过程。<br /> 在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://blog.csdn.net/icarusliu/article/details/78809790"  target="_blank" rel="nofollow">SpringMVC源码分析</a>一文中，已经分析过查找过程在AbstractHandlerMapping中实现，实际查找拦截器在方法getHandlerExecutionChain中：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-keyword">protected</span> HandlerExecutionChain<span class="hljs-title">getHandlerExecutionChain</span>(Object handler, HttpServletRequest request) {     HandlerExecutionChain chain = (handler<span class="hljs-keyword">instanceof</span> HandlerExecutionChain ?             (HandlerExecutionChain) handler :<span class="hljs-keyword">new</span> HandlerExecutionChain(handler));      String lookupPath =<span class="hljs-keyword">this</span>.urlPathHelper.getLookupPathForRequest(request);<span class="hljs-keyword">for</span> (HandlerInterceptor interceptor :<span class="hljs-keyword">this</span>.adaptedInterceptors) {<span class="hljs-keyword">if</span> (interceptor<span class="hljs-keyword">instanceof</span> MappedInterceptor) {             MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;<span class="hljs-keyword">if</span> (mappedInterceptor.matches(lookupPath,<span class="hljs-keyword">this</span>.pathMatcher)) {                 chain.addInterceptor(mappedInterceptor.getInterceptor());             }         }<span class="hljs-keyword">else</span> {             chain.addInterceptor(interceptor);         }     }<span class="hljs-keyword">return</span> chain; }</code></pre> <p>该方法就是从adaptedInterceptors属性中，根据URL查找添加条件的Interceptor并组装成HandlerExecutionChain并返回。<br /> 结合1.5.2中的分析，可以知道此处是否满足条件的判断是根据添加拦截器配置时调用的addPathPatterns方法决定的。具体判定过程不再赘述。</p> <p>那么，现在的问题就是adaptedInterceptors属性是如何初始化的。<br /> 通过分析AbstractHandlerMapping类，其adaptedInterceptors属性实际是在initInterceptors方法中根据interceptors来进行初始化的。现在的问题转变成interceptors这个属性是如何初始化的了。 实际上这个属性是通过setInterceptors方法来设置的，但通过Alt+F7的搜索并未搜索到该方法是在哪个地方调用的。</p> <p>我们换个思路，通过@EnableWebMvc来分析看通过addInterceptors方法配置的Interceptor在到底添加到哪去了。<br /> 前言已经分析，通过@EnableWebMvc注解实际上引入了DelegatingWebMvcConfiguration这个类；查看这个类，在其中有一方法被Autowired注解：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@Autowired</span>(required =<span class="hljs-keyword">false</span>)<span class="hljs-keyword">public</span><span class="hljs-keyword">void</span><span class="hljs-title">setConfigurers</span>(List&lt;WebMvcConfigurer&gt; configurers) {<span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(configurers)) {<span class="hljs-keyword">this</span>.configurers.addWebMvcConfigurers(configurers);     } }</code></pre> <p>通过查看Autowired注解定义，了解到当它使用在List参数的方法上时，会查找List所包含的对象类型的所有Bean然后进行注入。这也意味着，此处会将所有实现WebMvcConfigurer接口的类进行注入，然后添加到configurers属性中去；在此处，我们自定义的继承自WebMvcConfigurer的类会被注入。<br /> 再查看 DelegatingWebMvcConfiguration 这个类，它继承了 WebMvcConfigurationSupport 类。分析WebMvcConfigurationSupport，可以看到以下方法：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@Bean</span><span class="hljs-keyword">public</span> RequestMappingHandlerMapping<span class="hljs-title">requestMappingHandlerMapping</span>() {     RequestMappingHandlerMapping mapping = createRequestMappingHandlerMapping();     mapping.setOrder(<span class="hljs-number">0</span>);     mapping.setInterceptors(getInterceptors());     mapping.setContentNegotiationManager(mvcContentNegotiationManager());     mapping.setCorsConfigurations(getCorsConfigurations());      PathMatchConfigurer configurer = getPathMatchConfigurer();     Boolean useSuffixPatternMatch = configurer.isUseSuffixPatternMatch();     Boolean useRegisteredSuffixPatternMatch = configurer.isUseRegisteredSuffixPatternMatch();     Boolean useTrailingSlashMatch = configurer.isUseTrailingSlashMatch();<span class="hljs-keyword">if</span> (useSuffixPatternMatch !=<span class="hljs-keyword">null</span>) {         mapping.setUseSuffixPatternMatch(useSuffixPatternMatch);     }<span class="hljs-keyword">if</span> (useRegisteredSuffixPatternMatch !=<span class="hljs-keyword">null</span>) {         mapping.setUseRegisteredSuffixPatternMatch(useRegisteredSuffixPatternMatch);     }<span class="hljs-keyword">if</span> (useTrailingSlashMatch !=<span class="hljs-keyword">null</span>) {         mapping.setUseTrailingSlashMatch(useTrailingSlashMatch);     }      UrlPathHelper pathHelper = configurer.getUrlPathHelper();<span class="hljs-keyword">if</span> (pathHelper !=<span class="hljs-keyword">null</span>) {         mapping.setUrlPathHelper(pathHelper);     }      PathMatcher pathMatcher = configurer.getPathMatcher();<span class="hljs-keyword">if</span> (pathMatcher !=<span class="hljs-keyword">null</span>) {         mapping.setPathMatcher(pathMatcher);     }<span class="hljs-keyword">return</span> mapping; }</code></pre> <p>可以看到RequestMappingHandlerMapping类被注入Spring容器。<br /> 同时通过mapping.setInterceptors(getInterceptors())将所有的Interceptors设置到HandperMapping对象中 。<br /> 这样就找到了ReuqestMappingHandlerMapping的setInterceptors方法调用处了。<br /> 接下来的问题就是此处调用的getInterceptors方法的实现：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-keyword">protected</span><span class="hljs-keyword">final</span> Object[]<span class="hljs-title">getInterceptors</span>() {<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.interceptors ==<span class="hljs-keyword">null</span>) {         InterceptorRegistry registry =<span class="hljs-keyword">new</span> InterceptorRegistry();         addInterceptors(registry);         registry.addInterceptor(<span class="hljs-keyword">new</span> ConversionServiceExposingInterceptor(mvcConversionService()));         registry.addInterceptor(<span class="hljs-keyword">new</span> ResourceUrlProviderExposingInterceptor(mvcResourceUrlProvider()));<span class="hljs-keyword">this</span>.interceptors = registry.getInterceptors();     }<span class="hljs-keyword">return</span><span class="hljs-keyword">this</span>.interceptors.toArray(); }</code></pre> <p>此处如果interceptors对象为空时，会调用addInterceptors方法；其实现在DelegatingWebMvcConfiguration类中：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@Override</span><span class="hljs-keyword">protected</span><span class="hljs-keyword">void</span><span class="hljs-title">addInterceptors</span>(InterceptorRegistry registry) {<span class="hljs-keyword">this</span>.configurers.addInterceptors(registry); }</code></pre> <p>在前文已经描述到，DelegatingWebMvcConfiguration类中的configurers属性会将所有继承了WebMvcConfigurer的配置类全部添加进去。如我们自定义的配置类；在此处调用DelegatingWebMvcConfiguration的addInterceptors方法时，实际就是调用各个WebMvcConfigurer对象的addInterceptors方法来完成自定义的Interceptor注册过程。<br /> 通过这一系列过程，RequestMappingHandlerMapping的getInterceptors方法就可以获取到所有自定义的Interceptor了。</p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-149.htm">02-SpringMVC @RequestMapping注解</a></p>
                                        <p>下一个：<a href="/html/category/article-151.htm">springboot系类代码：spring-boot-starter-data-mongodb-reactive</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-218.htm">利用Python实现RSA加密解密方法实例_python</a></h4>
                <p>目录  前言 一、安装模块 二、生成密钥对 三、加密 四、解密 五、完整代码 总结    前言  加密技术在数据安全存储，数据传输中发挥着重要作用，能够保护用户隐私数据安全，防止信息窃取。RSA是一种</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-242.htm">SpringSecurity核心服务详解</a></h4>
                <p>现在我们对 Spring Security 体系结构及其核心类有了一个高层次的概述，让我们更仔细地看一两个核心接口及其实现，特别是AuthenticationManager&nbsp;、UserDet</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-255.htm">vue动态获取ref方式</a></h4>
                <p>&lt;div v-for="(item,index) in list" :key="index"              :class=" circleAnimation === 1 ? 'bal</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-210.htm">Code For Better 谷歌开发者之声—— 在 Windows 10 上对 Google Chrome 进行故障排除</a></h4>
                <p>???? 个人网站:【 海拥】【小霸王游戏机】 ???? 风趣幽默的前端学习课程：????28个案例趣学前端 ???? 想寻找共同学习交流、摸鱼划水的小伙伴，请点击【摸鱼学习交流群】 ???? 免费且</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-203.htm">C++逆向 可变参数Hook</a></h4>
                <p>目录  C++逆向 可变参数Hook  0x00 前言： 0x01 C++可变参数：  可变参数简介 可变参数代码实战   0x02 逆向分析C++可变参数原理 0x03 printf Hook实战 </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-256.htm">Vue3项目中的骨架屏</a></h4>
                <p>实现场景:刚进入页面的时候,需要后端接口回传的数据,还没有回来,为了客户有更好的体验,需要设置骨架屏,效果图如下:  &nbsp;实现步骤: 1.设置通用组件骨架屏(可以设置的属性:高，宽，背景颜色，</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-229.htm">基于docker部署Oracle 19c的详细记录_docker</a></h4>
                <p>目录  一. 拉取Oracle 19c镜像 二. 查看镜像 三. 创建Oracle 19c镜像的容器  3.1创建目录 3.2 创建实例 3.3 查看日志  四、 修改密码  五、连接数据库  5.1</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-246.htm">request和response——请求响应对象</a></h4>
                <p>请求对象——request 获取get请求的值  一次请求，返回一个响应。 地址栏：http://127.0.0.1:8000/day3/get_request?lan=python 问号：代表请求参</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-257.htm">springboot+layui有关分页问题</a></h4>
                <p>问题描述 分页不生效明明可以分页 但是后端接收到的pagenum始终是1  &nbsp;   &nbsp;  &nbsp; 提示：这里描述项目中遇到的问题： 例如：分页出问题 @Override pu</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-217.htm">Java 集合框架ArrayList 储存自定义数组</a></h4>
                <p>package LinkedList;  import java.util.ArrayList; import java.util.Iterator;  import p.bean.Person;  </p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>