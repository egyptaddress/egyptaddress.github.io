<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-104.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Java数据结构-栈的实现 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Java数据结构-栈的实现</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="htmledit_views"> <h1>前言:</h1> <blockquote> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;嘻嘻,今天博主终于要更新栈的知识了,上次结束说要更新要是上一次,所以这次咱就把栈的实现的更新带来了,嗯~ o(*￣▽￣*)o小伙伴可能会问,栈能干什么啊,在Java中栈不是有对应的类吗....</p> <p class="img-center"> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<strong>栈能够实现逆波兰计算机,中缀表达式转后缀表达式,还有普通中缀计算机等.....</strong></p> <p class="img-center"> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;话不多说,我们就从一下几个方面开始吧</p> <p>&nbsp; &nbsp; &nbsp; &nbsp;<span style="color:#511b78;"><em><strong> 栈的概念 ???? 栈的实现思路&nbsp;???? 栈的代码实现与分析&nbsp;???? 结论&nbsp;</strong></em></span></p> <p><span style="color:#511b78;"><em><strong>&nbsp; &nbsp; &nbsp; &nbsp; </strong></em></span><span style="color:#38d8f0;"><em><strong>如果喜欢作者的话</strong></em></span><span style="color:#511b78;"><em><strong>,<a class="link-info" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/JOElib?spm=1000.2115.3001.5343"  title="戳这" rel="nofollow">戳这</a></strong></em></span></p> <p><span style="color:#511b78;"><em><strong>&nbsp; &nbsp; &nbsp; &nbsp; </strong></em></span><span style="color:#fe2c24;"><em><strong>往期精彩:</strong></em></span><br /> &nbsp; &nbsp; &nbsp; &nbsp; <a class="link-info" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/JOElib/article/details/123560844?spm=1001.2014.3001.5501"  title="普通队列与环形队列" rel="nofollow">普通队列与环形队列</a></p> </blockquote> <hr/> <h1>栈的概念:&nbsp;</h1> <ol> <li>&nbsp;栈是一个<span style="color:#fe2c24;"><strong>先进后出,后进先出</strong></span>的有序列表</li> <li>&nbsp;在栈中添加元素和删除元素都在一端执行,是一个特殊的线性表</li> <li>&nbsp;插入元素或删除元素的一端是活跃的一端,被称为栈顶</li> <li>&nbsp;另一端不活跃,被称为栈底</li> <li>&nbsp;常用术语:压栈=入栈=push 出栈=弹栈=pop</li> </ol> <hr/> <h1>&nbsp;栈的实现思路:</h1> <ul> <li>&nbsp;我们需要创建一个数组去模拟栈</li> <li>&nbsp;定义一个栈顶变量top,用于指向栈顶</li> <li>&nbsp;定义压栈弹栈等方法</li> </ul> <hr/> <h1>&nbsp;栈的代码实现与分析:</h1> <ul> <li> <h3>创建一个数组及其变量模拟栈&nbsp;</h3> </li> </ul> <pre><code class="language-java">    private int maxSize;     private int top;     private Object[] stack;      public ArraysStack(int maxSize) {         this.maxSize = maxSize;         this.top = -1;         stack = new Object[maxSize];     }</code></pre> <p>&nbsp;<strong>代码分析:</strong></p> <ul> <li>&nbsp;<strong>maxSize是栈的最大容量,</strong>在调用构造方法的时候可以自行指定</li> <li> <strong>&nbsp;top用于指向栈顶的变量</strong>,应该被初始化为-1</li> <li>&nbsp;这里选用了Object[]数组,<strong>目的是什么都可以放进去</strong> </li> </ul> <p><strong>图解:&nbsp;</strong></p> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230205/ca990a8cc8cca5987562c26b941319e9.jpg">&nbsp;</p> <ul> <li> <h3>&nbsp;<strong>创造两个方法,分别判断是否已满或已空</strong><br /> </h3> </li> </ul> <pre><code class="language-java">public boolean isFull() {         return top == maxSize - 1;     } public boolean isEmpty() {         return top == -1;     }</code></pre> <p>&nbsp;<strong>代码分析:</strong>&nbsp;</p> <p><strong>图解:&nbsp;</strong></p> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230205/b59718de67d20e8c50bd6dcab556a304.jpg"></p> <ul> <li> <h3>&nbsp;创建一个压栈和弹栈的方法</h3> </li> </ul> <pre><code class="language-java">public void push(E element) {         if(isFull()) {             System.out.println("栈已满,无法压栈");             return;         }         stack[++top] = element;     } public E pop() throws Exception{         if(isEmpty()) {             throw new Exception("栈已空,无法弹栈");         }         return (E)stack[top--];     }</code></pre> <p>&nbsp;&nbsp;<strong>代码分析:</strong>&nbsp;</p> <ul> <li>加入元素和取出元素之前,要分别分析一下栈是否为空,或是否为满,要有<strong>校验意识</strong> </li> <li>因为<strong>top初始化为-1</strong>,所以添加元素的时候应该<strong>先要自增,再添加</strong> </li> <li>因为<strong>top指向栈顶元素</strong>,所以取出元素时,<strong>先取出,栈顶top变量再自减&nbsp;</strong> </li> </ul> <p>&nbsp;<strong>图解:&nbsp;</strong></p> <p style="text-align:center;">&nbsp;<img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230205/bc64675d8ea29760b5c73a50126e22b9.jpg"></p> <ul> <li> <h3>&nbsp;创建一个遍历的方法</h3> </li> </ul> <pre><code class="language-java">public void print() {         if(isEmpty()){             System.out.println("栈已空,无法输出");             return;         }         for (int i = top; i &gt;= 0; i--) {             System.out.println("stack[" + i + "] = " + stack[i]);         }     }</code></pre> <p>&nbsp;&nbsp;&nbsp;<strong>代码分析:</strong>&nbsp;</p> <ol> <li>从栈的定义得知,先<strong>拿出来的是栈顶元素</strong>,所以应该从top开始,到0结束&nbsp;&nbsp;</li> </ol> <h3>&nbsp;完整代码:</h3> <pre><code class="language-java">package datastructure.chapter02.stack.instance;  /**  *  * @param &lt;E&gt; 指定栈存储的元素  */ public class ArraysStack&lt;E&gt; {     private int maxSize;     private int top;     private Object[] stack;      /**      * 栈(数组实现)的构造方法      * @param maxSize 栈空间的最大值      */     public ArraysStack(int maxSize) {         this.maxSize = maxSize;         this.top = -1;         stack = new Object[maxSize];     }      /**      *  判断栈是否为满      * @return 若返回值为true,则栈已满,否则为false      */     public boolean isFull() {         return top == maxSize - 1;     }      /**      *  判断栈是否为空      * @return 若返回值为true,则栈已空,否则为false      */     public boolean isEmpty() {         return top == -1;     }      /**      * @param element 压入栈的数据      */     public void push(E element) {         if(isFull()) {             System.out.println("栈已满,无法压栈");             return;         }         stack[++top] = element;     }      /**      *      * @return 返回栈顶数据      * @throws Exception 空栈异常      */     public E pop() throws Exception{         if(isEmpty()) {             throw new Exception("栈已空,无法弹栈");         }         return (E)stack[top--];     }      /**      * 输出栈      */     public void print() {         if(isEmpty()){             System.out.println("栈已空,无法输出");             return;         }         for (int i = top; i &gt;= 0; i--) {             System.out.println("stack[" + i + "] = " + stack[i]);         }     } } </code></pre> <h1>&nbsp;结论:</h1> <blockquote> <p>&nbsp; &nbsp; &nbsp; &nbsp; 栈的知识点简单又重要,代码不多,理解起来也不难,我来总结一下重要的几点:</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>栈顶top的初始化赋值</strong></p> <p><strong>&nbsp; &nbsp; &nbsp; &nbsp; 栈的压栈和弹栈的方法</strong></p> <p>&nbsp; &nbsp; &nbsp; &nbsp; ????下一站:双向链表!!!</p> </blockquote></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-103.htm">Feign调用传输文件异常</a></p>
                                        <p>下一个：<a href="/html/category/article-105.htm">Spring 源码（2）Spring IOC 容器 前戏准备工作</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-254.htm">聊聊系统看门狗WDOG1在i.MXRT1xxx系统启动中的应用及影响</a></h4>
                <p>　　大家好，我是痞子衡，是正经搞技术的痞子。今天痞子衡给大家介绍的是系统看门狗WDOG1在i.MXRT1xxx系统启动中的应用及影响。 　　软件看门狗模块（WDOG）在 MCU 应用里可以说是非常基础</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-220.htm">C/C++编程：异常处理(exception handling)的原理</a></h4>
                <p>引入原因  问题：很久之前，C程序是使用错误码来处理错误的，那为什么C++还要引入异常呢？  回答：异常不能被忽略。  如果一个函数通过设置一个状态变量来返回错误码来表示一个异常状态，没有办法保证函数</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-258.htm">vs code编写web项目</a></h4>
                <p>vs code编写web项目 0.小贴士 1.vs和vscode是不一样的是不一样的 2.在已经存在maven的时候，直接在maven的+创建项目，用ctrl+shoeft+p 搜索不到maven的创</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-239.htm">ubuntu 18及以上版本配置IP的方法，你get了吗_在线工具</a></h4>
                <p>本文讲讲 Ubuntu 18 及以上版本配置 IP 的方法，为什么它值得一讲，因为以 Ubuntu 16 为首的版本的配置方法已经不适用了，如果你还不知道，那本文正好 get 一个新技能。 Ubunt</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-213.htm">springboot读取resources下文件方式</a></h4>
                <p>项目中很多时候需要读取自定义配置文件，本地开发工具怎么写都成功但是部署到服务其上就出现问题， 异常BOOT-INF/classes!/config.xml (文件名、目录名或卷标语法不正确.)路径中带</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-206.htm">redis专题：redis键值设计、性能优化以及redis连接池配置</a></h4>
                <p>文章目录  1.redis键值设计   ①：key设计规范 ②：value设计规范   2. 命令使用优化 3. redis连接池配置参数设计 4. redis连接池预热 5. redis的key过期</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-208.htm">vue3.0下如何使用mapState，mapGetters和mapActions</a></h4>
                <p>vue3.0下如何使用mapState，mapGetters和mapActions      1、新建useMapper.js 2、新建useState.js 3、新建useGetters.js 4、</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-262.htm">Kerberos (五) &#8212;&#8212;&#8212; Hive 用户认证配置</a></h4>
                <p>目录  一、前置要求 二、配置认证 三、启动hiveserver2     一、前置要求 A、Hadoop 集群启动 Kerberos 认证 按照上述步骤为Hadoop集群开启Kerberos安全认证</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-249.htm">Unity 内置渲染管线转URP</a></h4>
                <p>一、CG 替换 HLSL   未使用光照计算的shader升级后不做修改仍然可以使用，但是可能会不兼容SRP Batcher，所以仍然需要修改，使用了光照计算的shader必须要修改。   SubSh</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-216.htm">Spark连接Hive，进行Hive数据表的读写操作</a></h4>
                <p>基础环境   Hadoop安装-1，hadoop安装-2  spark安装 Hive安装   配置  将Hive的conf目录下的hive-site-xml文件拷贝到spark的conf目录下； 将H</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>