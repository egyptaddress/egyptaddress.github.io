<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-205.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Ribbon（一）远程调用RestTemplate - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Ribbon（一）远程调用RestTemplate</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="htmledit_views"> <p id="main-toc"><strong>目录</strong></p> <p id="%E4%B8%80%E3%80%81RestTemplate%E4%BB%8B%E7%BB%8D-toc" style="margin-left:0px;"><a href="#%E4%B8%80%E3%80%81RestTemplate%E4%BB%8B%E7%BB%8D" rel="nofollow">一、RestTemplate介绍</a></p> <p id="%E4%BA%8C%E3%80%81%E9%9C%80%E6%B1%82%E8%AF%B4%E6%98%8E-toc" style="margin-left:0px;"><a href="#%E4%BA%8C%E3%80%81%E9%9C%80%E6%B1%82%E8%AF%B4%E6%98%8E" rel="nofollow">二、需求说明</a></p> <p id="1%E3%80%81%E4%B8%9A%E5%8A%A1%E7%BB%93%E6%9E%84%E5%8F%8A%E8%AF%B4%E6%98%8E-toc" style="margin-left:40px;"><a href="#1%E3%80%81%E4%B8%9A%E5%8A%A1%E7%BB%93%E6%9E%84%E5%8F%8A%E8%AF%B4%E6%98%8E" rel="nofollow">1、业务结构及说明</a></p> <p id="%E4%B8%89%E3%80%81%E6%A8%A1%E5%9D%97%E6%90%AD%E5%BB%BA-toc" style="margin-left:0px;"><a href="#%E4%B8%89%E3%80%81%E6%A8%A1%E5%9D%97%E6%90%AD%E5%BB%BA" rel="nofollow">三、模块搭建</a></p> <p id="1%E3%80%81%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAmaven%E9%A1%B9%E7%9B%AE-toc" style="margin-left:40px;"><a href="#1%E3%80%81%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAmaven%E9%A1%B9%E7%9B%AE" rel="nofollow">1、新建一个maven项目</a></p> <p id="2%E3%80%81%E6%B7%BB%E5%8A%A0ribbon%E4%BE%9D%E8%B5%96-toc" style="margin-left:40px;"><a href="#2%E3%80%81%E6%B7%BB%E5%8A%A0ribbon%E4%BE%9D%E8%B5%96" rel="nofollow">2、添加ribbon依赖</a></p> <p id="3%E3%80%81%E7%BC%96%E8%BE%91yml-toc" style="margin-left:40px;"><a href="#3%E3%80%81%E7%BC%96%E8%BE%91yml" rel="nofollow">3、编辑yml</a></p> <p id="4%E3%80%81%E4%B8%BB%E7%A8%8B%E5%BA%8F-toc" style="margin-left:40px;"><a href="#4%E3%80%81%E4%B8%BB%E7%A8%8B%E5%BA%8F" rel="nofollow">4、主程序</a></p> <p id="5%E3%80%81%E7%BC%96%E8%BE%91RibbonController-toc" style="margin-left:40px;"><a href="#5%E3%80%81%E7%BC%96%E8%BE%91RibbonController" rel="nofollow">5、编辑RibbonController</a></p> <p id="6%E3%80%81%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E6%B5%8B%E8%AF%95-toc" style="margin-left:40px;"><a href="#6%E3%80%81%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E6%B5%8B%E8%AF%95" rel="nofollow">6、发送请求测试</a></p> <hr id="hr-toc"/> <p>ribbon底层封装了RestTemplate进行Rest api远程调用</p> <h1 id="%E4%B8%80%E3%80%81RestTemplate%E4%BB%8B%E7%BB%8D">一、RestTemplate介绍</h1> <p>RestTemplate是springboot提供的远程调用工具</p> <p>常用的方法：</p> <ul> <li> <span style="color:#ed7976;"><span style="background-color:#fef2f0;">getForObject()</span></span>：</li> </ul> <p>该方法是getForEntity方法的进一步封装，通过HttpMessageConverterExtractor对HTTP的请求响应体body内容进行对象转换，实现请求直接返回包装好的对象内容。有三个重载。</p> <p>getForObject(String url,Class responseType,Object ...urlVariables);</p> <p>url参数为指定访问的地址如果其中有传递的参数，使用{1}，{2}这种类型的占位符表示，responseType是参数返回结果的类型，urlVariables是前面url占位符对应的参数。</p> <p>getForObject(String url,Class responseType,Map urlVariables);</p> <p>前两个参数与前一致，最后一个参数使用Map封装替换url中出现的占位符。</p> <p>getForObject(String url,Class responseType);</p> <p>没有需要传递的参数。</p> <ul> <li><span style="color:#ed7976;"><span style="background-color:#fef2f0;">postForObject()</span></span></li> </ul> <p>用于发送post请求，与get类似</p> <p>也提供了三种重载：</p> <p>postForObject(String url,Class responseType,Object ...urlVariables);</p> <p>postForObject(String url,Class responseType,Map urlVariables);</p> <p>postForObject(String url,Class responseType);</p> <h1 id="%E4%BA%8C%E3%80%81%E9%9C%80%E6%B1%82%E8%AF%B4%E6%98%8E">二、需求说明</h1> <p>这里先不使用Ribbon，先单独使用RestTemplate进行远程调用</p> <h2 id="1%E3%80%81%E4%B8%9A%E5%8A%A1%E7%BB%93%E6%9E%84%E5%8F%8A%E8%AF%B4%E6%98%8E">1、业务结构及说明</h2> <p>当前是一个商品信息，用户和订单三者之间的服务，并且使用Eureka集群提供服务发现与注册</p> <p>结构及功能为：</p> <p><img fetchpriority="high" decoding="async" alt="" height="1200" src="http://img.555519.xyz/uploads/20230205/b6ab68088720eff85551991d951a730c.jpg"></p> <p>其中</p> <p>item-service 用于商品服务，其中有获取商品信息和减少库存的方法</p> <p>user-service 用于用户服务，其中有获取用户信息和增加用户积分的功能</p> <p>order-service 用于订单服务，其中有获取订单和添加订单的功能</p> <p>现在需要使用RestTemplate进行远程调用这三个服务</p> <h1 id="%E4%B8%89%E3%80%81%E6%A8%A1%E5%9D%97%E6%90%AD%E5%BB%BA">三、模块搭建</h1> <h2 id="1%E3%80%81%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAmaven%E9%A1%B9%E7%9B%AE">1、新建一个maven项目</h2> <h2 id="2%E3%80%81%E6%B7%BB%E5%8A%A0ribbon%E4%BE%9D%E8%B5%96">2、添加ribbon依赖</h2> <p>由于Eureka-client中包含ribbon依赖，所以只需添加eureka-client依赖即可</p> <p><img decoding="async" alt="" height="317" src="http://img.555519.xyz/uploads/20230205/e90e107ff74cf4e334092716d99f4828.jpg"></p> <pre><code class="language-XML">&lt;dependency&gt; 	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; 	&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; </code></pre> <h2 id="3%E3%80%81%E7%BC%96%E8%BE%91yml">3、编辑yml</h2> <p>服务名称为ribbon，使用3001端口，并且注册到两台eureka服务器中</p> <pre><code>spring:   application:     name: ribbon      server:   port: 3001    eureka:   client:     service-url:       defaultZone: http://eureka1:2001/eureka, http://eureka2:2002/eureka </code></pre> <h2 id="4%E3%80%81%E4%B8%BB%E7%A8%8B%E5%BA%8F">4、主程序</h2> <p>添加RestTemplate实例</p> <pre><code class="language-java">package cn.tedu.sp06;  ....  @EnableDiscoveryClient @SpringBootApplication public class Sp06RibbonApplication { 	 	//创建 RestTemplate 实例，并存入 spring 容器 	@Bean 	public RestTemplate getRestTemplate() { 		return new RestTemplate(); 	}  	public static void main(String[] args) { 		SpringApplication.run(Sp06RibbonApplication.class, args); 	}  } </code></pre> <h2 id="5%E3%80%81%E7%BC%96%E8%BE%91RibbonController">5、编辑RibbonController</h2> <pre><code class="language-java">package cn.tedu.sp06.controller;  ...  @RestController public class RibbonController {  	@Autowired 	private RestTemplate rt; 	 	@GetMapping("/item-service/{orderId}") 	public JsonResult&lt;List&lt;Item&gt;&gt; getItems(@PathVariable String orderId) { 	    //向指定微服务地址发送 get 请求，并获得该服务的返回结果  	    //{1} 占位符，用 orderId 填充 		return rt.getForObject("http://localhost:8001/{1}", JsonResult.class, orderId); 	}  	@PostMapping("/item-service/decreaseNumber") 	public JsonResult decreaseNumber(@RequestBody List&lt;Item&gt; items) { 	    //发送 post 请求 		return rt.postForObject("http://localhost:8001/decreaseNumber", items, JsonResult.class); 	}  	// 	 	@GetMapping("/user-service/{userId}") 	public JsonResult&lt;User&gt; getUser(@PathVariable Integer userId) { 		return rt.getForObject("http://localhost:8101/{1}", JsonResult.class, userId); 	}  	@GetMapping("/user-service/{userId}/score")  	public JsonResult addScore( 			@PathVariable Integer userId, Integer score) { 		return rt.getForObject("http://localhost:8101/{1}/score?score={2}", JsonResult.class, userId, score); 	} 	 	// 	 	@GetMapping("/order-service/{orderId}") 	public JsonResult&lt;Order&gt; getOrder(@PathVariable String orderId) { 		return rt.getForObject("http://localhost:8201/{1}", JsonResult.class, orderId); 	}  	@GetMapping("/order-service") 	public JsonResult addOrder() { 		return rt.getForObject("http://localhost:8201/", JsonResult.class); 	} } </code></pre> <p><strong>注意：</strong></p> <p><strong>1、可以看出，用户发送请求首先到RibbonController然后通过这里转发到对应的服务路径，实现远程调用。</strong></p> <p><strong>2、携带参数的GET请求，会使用{1}表示占位符进行转发。</strong></p> <h2 id="6%E3%80%81%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E6%B5%8B%E8%AF%95">6、发送请求测试</h2> <p>根据RibbonController的路径发送请求</p> <p><span style="color:#ed7976;"><span style="background-color:#fef2f0;">http://localhost:3001/item-service/35</span></span></p> <p>使用postman发送</p> <p><span style="color:#ed7976;"><span style="background-color:#fef2f0;">http://localhost:3001/item-service/decreaseNumber</span></span></p> <p><span style="color:#ed7976;"><span style="background-color:#fef2f0;">[{"id":1,"name":"abc","number":100},{"id":2,"name":"def","number":200}]</span></span></p> <p><span style="color:#ed7976;"><span style="background-color:#fef2f0;">http://localhost:3001/user-service/10</span></span></p> <p><span style="color:#ed7976;"><span style="background-color:#fef2f0;">http://localhost:3001/user-service/10/score?score=100</span></span></p> <p><span style="color:#ed7976;"><span style="background-color:#fef2f0;">http://localhost:3001/order-service/20</span></span></p> <p><span style="color:#ed7976;"><span style="background-color:#fef2f0;">http://localhost:3001/order-service</span></span></p> <p>浏览器发送请求先到ribbon服务器的RibbonController，之后通过RestTemplate的getForObject或postForObject方法分别远程调用到item-service、user-service、ordder-service。</p> <p><img decoding="async" alt="" height="1153" src="http://img.555519.xyz/uploads/20230205/94f1d00cbaeb44dc9b98041c9167c903.jpg"></p> </p></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-204.htm">Kafka启动报错处理：/opt/module/kafka/bin/kafka-run-class.sh: 第 258 行:exec: java: 未找到</a></p>
                                        <p>下一个：<a href="/html/category/article-206.htm">眼见不一定为实：调用链HBase倾斜修复</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-227.htm">vue更新数据后重新请求数据并刷新页面</a></h4>
                <p>首先要配置好路由 在app.vue添加下面代码 export default {   provide() {     return {       reload: this.reload,     }</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-228.htm">Android jetpack room+ViewModel+liveData 数据自动更新</a></h4>
                <p>Android jetpack room的使用_安果移不动的博客-CSDN博客 接上篇博客 我们用google推荐的这种方式  &nbsp; 修改： StudentDao package com.an</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-221.htm">关于encodeURI和encodeURIComponent的使用场景</a></h4>
                <p>encodeURI：适用于url跳转时。 encodeURIComponent：适用于url作为参数传递时。 tips：当url作为参数传递时如果没有用encodeURIComponent进行编码，会</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-237.htm">Vue3实现跑马灯效果_vue.js</a></h4>
                <p>本文实例为大家分享了Vue3实现跑马灯效果的具体代码，供大家参考，具体内容如下 先看效果：  html部分代码  &lt;div class="app"&gt;              &lt;p </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-255.htm">解决antdv的table因数据量过大导致的卡顿问题</a></h4>
                <p>遇到的问题：antdv的table表格使用时因数据量过大，造成标签页切换卡顿的问题 解决办法：绑定滚动事件，页面只显示在可视区域内的数据，没在可视区域内的数据不予展示，dom元素的scrollHeig</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-248.htm">vue父组件向子组件传值与传递方法</a></h4>
                <p>vue父组件向子组件传值与传递方法 学习笔记 1、父组件向子组件传值（props）  在子组件中，默认是无法访问到父组件中的data上的数据和methods中的方法 父组件可以在引用子组件的时候，通过</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-243.htm">tomcat服务器项目迁移到另外一台tomcat服务器</a></h4>
                <p>流程  打开虚拟机, 访问需要迁移的服务器(账号密码请向领导或运维索要) 找到需要迁移的项目, 一般在所在tomcat盘符/公司名/项目名, 例如我所在的公司服务放置在 D:\tomcat\tomca</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-212.htm">从查询重写角度理解elasticsearch的高亮原理</a></h4>
                <p>一、高亮的一些问题 elasticsearch提供了三种高亮方式，前面我们已经简单的了解了elasticsearch的高亮原理; 高亮处理跟实际使用查询类型有十分紧密的关系，其中主要的一点就是muti</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-220.htm">kafka踩坑java找不到kafka-run-class.sh: line 309: exec: java: not found</a></h4>
                <p>今天执行 user_1@test_1:/opt/kafka$ sudo bin/zookeeper-server-start.sh config/zookeeper.properties/opt/ka</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-229.htm">pandas高阶应用</a></h4>
                <p>1、时间序列相关操作 pd的date_range中的基本时间序列频率     Alias   Description（偏移量类型）   说明     B   business day frequenc</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>