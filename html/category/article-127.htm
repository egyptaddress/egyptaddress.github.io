<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-127.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Spring的注解是如何解析的 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Spring的注解是如何解析的</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<p>上一篇<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/redwinter/p/16196359.html"  target="_blank" rel="nofollow">https://www.cnblogs.com/redwinter/p/16196359.html</a> 介绍了<code>BeanFactoryPostProcessor</code>的执行过程，这篇文章介绍<code>Spring</code>中配置的注解是如何通过<code>ConfigurationClassPostProcessor</code>解析的，另外分析下<code>Spring Boot</code>自动装配是如何处理的。</p> <h3 id="configurationclasspostprocessor-解析了哪些注解">ConfigurationClassPostProcessor 解析了哪些注解？</h3> <p>在上一篇文章<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/redwinter/p/16196359.html"  target="_blank" rel="nofollow">https://www.cnblogs.com/redwinter/p/16196359.html</a>  我们知道<code>ConfigurationClassPostProcessor</code>实际上是<code>BeanFactoryPostProcessor</code>的一个实现类，他特殊的地方是他还实现了<code>BeanDefinitionRegisterPostProcessor</code>接口，所以<code>ConfigurationClassPostProcessor</code> 既要实现<code>BeanFactoryPostProcessor</code>的接口方法<code>postProcessBeanFactory</code>也要实现<code>BeanDefinitionRegisterPostProcessor</code>的接口方法<code>postProcessBeanDefinitionRegistry</code>，并且在解析的时候先执行了<code>postProcessBeanDefinitionRegistry</code>方法，再执行了<code>postProcessBeanDefinitionRegistry</code>方法。</p> <p>接下来我们看看<code>postProcessBeanDefinitionRegistry</code>做了什么？</p> <p>上源码：</p> <pre><code class="language-java">@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {   int registryId = System.identityHashCode(registry);   if (this.registriesPostProcessed.contains(registryId)) {     throw new IllegalStateException(       "postProcessBeanDefinitionRegistry already called on this post-processor against " + registry);   }   if (this.factoriesPostProcessed.contains(registryId)) {     throw new IllegalStateException(       "postProcessBeanFactory already called on this post-processor against " + registry);   }   this.registriesPostProcessed.add(registryId);   // 处理配置的BeanDefinition   processConfigBeanDefinitions(registry); }</code></pre> <p>整个方法核心是执行了<code>processConfigBeanDefinitions</code>方法，这个方法非常的长并且逻辑也复杂，代码我就不贴了，说一下大概的流程（较详细）：</p> <ul> <li>先进行合格的<code>beanDefinition</code>的检查 <ul> <li>获取到注解的元数据信息</li> <li>判断是包含<code>@Configuration</code>注解，包含则合格，否则判断是否包含了<code>@Component</code>、<code>@ComponentScan</code>、<code>@Import</code>、<code>@ImportResource</code>注解，包含则合格，如果都不包含则不合格</li> </ul> </li> <li>对合格的<code>BeanDefinition</code>排序</li> <li>创建一个解析<code>@Configuration</code>注解的解析器</li> <li>对合格的<code>BeanDefinition</code>集合进行解析 <ul> <li>循环解析，最终调用<code>processConfigurationClass</code>方法</li> <li>判断是否跳过解析，比如配置了<code>@Conditional</code>注解的</li> <li>调用<code>doProcessConfigurationClass</code>方法开始解析（下面的解析中可能会存在递归调用） <ul> <li>解析<code>@Component</code>注解 <ul> <li>判断是否包含内部类标记了<code>@Component</code>，比如在标有<code>@Component</code>注解的类里面创建一个内部类也标记了<code>@Component</code>注解，如果有就会进行递归调用<code>processConfigurationClass</code>方法</li> </ul> </li> <li>解析<code>@PropertySources</code>和<code>@PropertySource</code>注解 <ul> <li>比如标记<code>@PropertySource("classpath:jdbc.properties")</code>，这样就会把这个属性的值全部解析到环境信息的<code>propertySources</code>属性中</li> </ul> </li> <li>解析<code>@ComponetScans</code>和<code>@ComponentScan</code>注解 <ul> <li>比如配置了扫描的包，那么就会扫描出合格的<code>BeanDefinition</code>，然后递归解析</li> </ul> </li> <li>解析<code>@Import</code>注解（<code>Spring Boot</code>自动装配的实现） <ul> <li>递归解析出标记了<code>@Import</code>注解的类放在<code>imports</code>属性中</li> <li>解析<code>ImportSelector</code>接口的实现类</li> <li>调用<code>ImportSelector#selectImports</code>方法解析需要注册的类</li> <li>递归调用<code>processImports</code>方法，然后将需要注册的类注册到<code>importBeanDefinitionRegistrars</code>（这里会在后面进行<code>loadBeanDefinition</code>）</li> </ul> </li> <li>解析<code>@ImportResource</code>注解 <ul> <li>比如解析配置的<code>Spring</code>的<code>xml</code>配置文件，最终放到<code>importedResources</code>属性中（后面会进行<code>loadBeanDefinition</code>）</li> </ul> </li> <li>解析<code>@Bean</code>注解 <ul> <li>比如解析当前类标记了<code>@Bean</code>的方法</li> <li>然后放在<code>beanMethods</code>属性中（后面会进行<code>loadBeanDefinition</code>）</li> </ul> </li> </ul> </li> <li>加载<code>BeanDefinition</code>从上面解析出来的类中 <ul> <li>循环遍历加载<code>BeanDefinition</code></li> <li>判断是否跳过，比如实现了<code>Condition</code>接口的类</li> <li>加载标有<code>@Bean</code>的<code>BeanDefinition</code></li> <li>加载从<code>ImportResource</code>中解析的<code>BeanDefinition</code></li> <li>加载从<code>ImportSelector</code>中配置的解析的<code>BeanDefinition</code></li> </ul> </li> </ul> </li> </ul> <p>整个过程非常复杂，而且存在递归操作，读者可以按照我写的步骤进行<code>debug</code>调试，当然可能会出现到处跳转不知所措的情况，多调几遍就好了，只要知道大致的流程，应该还是不难的。</p> <p>总的来说就是解析了这些注解：<code>@Component</code>、<code>@PropertySource</code>、<code>@PropertySources</code>、<code>@ComponentScan</code>、<code>@ComponentScans</code>、<code>@Import</code>、<code>@ImportResource</code>、<code>@Bean</code>，然后将标有这些注解的解析成<code>BeanDefinition</code>，如果加上了<code>@Conditionnal</code>注解，那么按照条件进行解析。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6b603a946de94ea3d2b7c30fad2c3c19.jpg" alt="Spring的注解是如何解析的"></p> <h3 id="自定义自动装配">自定义自动装配</h3> <p>现在开发都是用<code>SpringBoot</code>，原因在于他非常的方便，引入即可使用，那么他是做到的呢？众所周知<code>Spring Boot</code>有几个注解非常重要，比如：<code>@SpringBootApplication</code>、<code>@EnableAutoConfiguration</code>、<code>@SpringBootConfiguration</code>，其中最重要的是<code>@EnableAutoConfiguration</code>，这个注解里面标记了<code>@Import(AutoConfigurationImportSelector.class)</code>，当然还标记了其他的，我们现在只关心这个<code>@Import</code>，里面放入了一个<code>AutoConfigurationImportSelector</code>类。</p> <p><code>AutoConfigurationImportSelector</code>类实现了<code>DeferredImportSelector</code>接口，这个<code>DeferredImportSelector</code>接口是<code>ImportSelector</code>的子接口，表示延迟导入的意思。在上面的分析中，其实最主要的是实现他的接口<code>selectImports</code>，直接源码：</p> <pre><code class="language-java">@Override public String[] selectImports(AnnotationMetadata annotationMetadata) {   if (!isEnabled(annotationMetadata)) {     return NO_IMPORTS;   }   // 获取自动装配的实体   AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);   return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations()); }  protected AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) {   if (!isEnabled(annotationMetadata)) {     return EMPTY_ENTRY;   }   AnnotationAttributes attributes = getAttributes(annotationMetadata);   // 获取合格（候选）的配置   List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);   configurations = removeDuplicates(configurations);   Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);   checkExcludedClasses(configurations, exclusions);   configurations.removeAll(exclusions);   configurations = getConfigurationClassFilter().filter(configurations);   fireAutoConfigurationImportEvents(configurations, exclusions);   return new AutoConfigurationEntry(configurations, exclusions); }  protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {   // 加载配置，根据factoryType，这里的FactoryType就是@EnableAutoConfiguration注解   List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),                                                                        getBeanClassLoader());   Assert.notEmpty(configurations, "No auto configuration classes found in META-INF/spring.factories. If you "                   + "are using a custom packaging, make sure that file is correct.");   return configurations; }  protected Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() {   // 直接返回@EnableAutoConfiguration 注解   return EnableAutoConfiguration.class; }   public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader) {   String factoryTypeName = factoryType.getName();   // 加载spring.factories文件并解析   return loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList()); }  private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) {   MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);   if (result != null) {     return result;   }    try      // 这里获取的url就是：     // public static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories";     Enumeration&lt;URL&gt; urls = (classLoader != null ?                              classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :                              ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));     result = new LinkedMultiValueMap&lt;&gt;();     while (urls.hasMoreElements()) {       URL url = urls.nextElement();       UrlResource resource = new UrlResource(url);       // 读取属性文件，获取到key为EnableAutoConfiguration，value为需要加载的类       Properties properties = PropertiesLoaderUtils.loadProperties(resource);       for (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) {         String factoryTypeName = ((String) entry.getKey()).trim();         for (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) {           result.add(factoryTypeName, factoryImplementationName.trim());         }       }     }     cache.put(classLoader, result);     return result;   }   catch (IOException ex) {     throw new IllegalArgumentException("Unable to load factories from location [" +                                        FACTORIES_RESOURCE_LOCATION + "]", ex);   } }</code></pre> <p>所以我们也可以自己写一个进行自动装配，接下来实现一个简单的自动装配。</p> <h4 id="定义自动装配注解">定义自动装配注解</h4> <pre><code class="language-java">/**  * @author &lt;a href="https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Import(MyImportSelector.class) public @interface EnableRedwinterAutoConfiguration { }</code></pre> <h4 id="创建myinportselector类">创建MyInportSelector类</h4> <pre><code class="language-java">/**  * @author &lt;a href="https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ public class MyImportSelector implements DeferredImportSelector {   @Override   public String[] selectImports(AnnotationMetadata importingClassMetadata) {     ClassLoader classLoader = this.getClass().getClassLoader();     // 加载需要装配的类     List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getFactoryTypeClass(), classLoader);     return configurations.toArray(new String[configurations.size()]);   }    private Class&lt;?&gt; getFactoryTypeClass() {     return EnableRedwinterAutoConfiguration.class;   }   }</code></pre> <h4 id="创建启动类">创建启动类</h4> <pre><code class="language-java">/**  * @author &lt;a href="https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ @Configuration @EnableRedwinterAutoConfiguration public class RedwinterApplication {   	public static void main(String[] args) { 		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(); 		context.scan("com.redwinter.test.config"); 		context.refresh(); 	} }</code></pre> <h4 id="创建需要装配的类">创建需要装配的类</h4> <pre><code class="language-java">/**  * @author &lt;a href=""https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ @Configuration public class MyConfiguration {  	@Bean 	@Conditional(RedwinterStrCondition.class) 	public String myStr() { 		return "redwinter"; 	}  	public static class RedwinterStrCondition implements ConfigurationCondition {  		@Override 		public ConfigurationPhase getConfigurationPhase() { 			return ConfigurationPhase.REGISTER_BEAN; 		}  		@Override 		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) { 			System.out.println("开始匹配。。。"); 			return true; 		} 	}  }</code></pre> <h4 id="创建springfactories文件">创建spring.factories文件</h4> <pre><code class="language-properties">com.redwinter.test.config.EnableRedwinterAutoConfiguration=\   com.redwinter.test.config.MyConfiguration</code></pre> <h4 id="启动验证">启动验证</h4> <p>debug断点：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/35beb98bc4efe5fc0f40e3ecc0e07b06.jpg" alt="Spring的注解是如何解析的"></p> <p>这就是<code>Spring Boot</code>自动装配的简化版，总得来说我们完成了<code>Spring</code> 对<code>BeanFactoryPostProcessor</code>的执行过程的解析，包括<code>Spring</code>是如何进行注解解析的，其实就是<code>Spring</code>在对<code>BeanDefinition</code>在正式初始化为<code>Bean</code>的前置处理，所以我们可以这个阶段进行很多扩展，比如占位符的处理<code>PropertySourcesPlaceholderConfigurer</code>等。</p> <p>接下来接续解读<code>AbstractApplicationContext#refresh</code>方法对<code>BeanPostProcessor</code>的注册。</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-126.htm">python 有序读取和保存yaml格式的文件</a></p>
                                        <p>下一个：<a href="/html/category/article-128.htm">HTML5 Canvas 水流样式 Loading 动画</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-218.htm">到底什么是消息队列</a></h4>
                <p>最近公司重构订单中心，用到消息中间件，闲暇时间对此进行学习了解，下面是学习内容的总结。 一、什么是消息队列 消息（Message）是指在应用之间传送的数据，消息可以非常简单，比如只包含文本字符串，也可</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-234.htm">Pandas 如何处理超大规模数据</a></h4>
                <p>作者&nbsp;|&nbsp;Sara&nbsp;A.&nbsp;Metwalli 译者&nbsp;|&nbsp;盖磊 策划&nbsp;|&nbsp;陈思  处理大规模数据集时常是棘手的事情，尤其在内</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-257.htm">postman测试@pathvariable,@requestparam,@requestbody发送情况</a></h4>
                <p>postman测试@pathvariable,@requestparam,@requestbody发送情况  1、三种方式简单说明  1.1、@Pathvariable 通过占位符的方式获取入参，前端</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-248.htm">vue父组件向子组件传值与传递方法</a></h4>
                <p>vue父组件向子组件传值与传递方法 学习笔记 1、父组件向子组件传值（props）  在子组件中，默认是无法访问到父组件中的data上的数据和methods中的方法 父组件可以在引用子组件的时候，通过</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-246.htm">实战代码（十）：Springboot RestTemplate连接池</a></h4>
                <p>一、理论基础 RestTemplate是Springboot中内置的Http请求工具，可以直接注入使用。 两个常用的构造方法如下图 (点击进入文档地址)  从上面可以看出，最简单的方式就是使用默认配置</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-220.htm">kafka踩坑java找不到kafka-run-class.sh: line 309: exec: java: not found</a></h4>
                <p>今天执行 user_1@test_1:/opt/kafka$ sudo bin/zookeeper-server-start.sh config/zookeeper.properties/opt/ka</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-252.htm">Android 4.0.1破坏了WebView HTML 5本地存储？</a></h4>
                <p>要解决此问题，请执行以下步骤- 对于版本低于4.4的android，将数据加载到具有这样的目录的文件方案的web视图中将不起作用。 browser.loadDataWithBaseUrl("file:</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-255.htm">解决antdv的table因数据量过大导致的卡顿问题</a></h4>
                <p>遇到的问题：antdv的table表格使用时因数据量过大，造成标签页切换卡顿的问题 解决办法：绑定滚动事件，页面只显示在可视区域内的数据，没在可视区域内的数据不予展示，dom元素的scrollHeig</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-240.htm">vue写一个简单的文件上传控件</a></h4>
                <p>这篇将介绍如何写一个简单的基于Vue+Element的文件上传控件。 控件将具有 1. 上传队列的列表，显示文件名称，大小等信息，可以显示上传进度实时刷新 2. 取消上传  &nbsp;使用Eleme</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-244.htm">Spring按业务模块输出日志到不同的文件_在线工具</a></h4>
                <p>一、背景 在我们开发的过程中，可能存在如下情况： 1、有些时候我们需要调用第三方的接口，一般情况下，调用接口，我们都会记录请求的入参和响应的。如果我们自己系统的日志和第三方的日志混合到一个日志文件中，</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>