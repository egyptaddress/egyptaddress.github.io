<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-127.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>ssh之struts2篇拦截器&amp;常用标签 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">ssh之struts2篇拦截器&amp;常用标签</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>struts2之拦截器&amp;常用标签</h3> <ul> <li><a href="#_1" rel="nofollow">一、拦截器</a></li> <li> <ul> <li><a href="#1_2" rel="nofollow">1、拦截器概述</a></li> <li><a href="#2_6" rel="nofollow">2、拦截器工作原理</a></li> <li><a href="#3_9" rel="nofollow">3、拦截器配置</a></li> <li> <ul> <li><a href="#31_10" rel="nofollow">3.1、拦截器</a></li> <li><a href="#32_19" rel="nofollow">3.2、拦截器栈</a></li> <li><a href="#33_37" rel="nofollow">3.3、默认拦截器栈</a></li> <li><a href="#34_45" rel="nofollow">3.4、内建拦截器</a></li> </ul> </li> <li><a href="#4_48" rel="nofollow">4、自定义拦截器</a></li> <li> <ul> <li><a href="#41_49" rel="nofollow">4.1、实现自定义拦截器</a></li> <li><a href="#42_57" rel="nofollow">4.2、举个栗子</a></li> </ul> </li> </ul> </li> <li><a href="#_64" rel="nofollow">二、标签</a></li> <li> <ul> <li><a href="#1_65" rel="nofollow">1、分类</a></li> <li><a href="#2_73" rel="nofollow">2、控制标签</a></li> <li><a href="#3_111" rel="nofollow">3、数据标签</a></li> <li> <ul> <li><a href="#31_sproperty__117" rel="nofollow">3.1、&lt; s:property &gt;标签</a></li> <li><a href="#32_sa__148" rel="nofollow">3.2、&lt; s:a &gt;标签</a></li> <li><a href="#33_sdebug__158" rel="nofollow">3.3、&lt; s:debug &gt;标签</a></li> <li><a href="#34_sinclude__161" rel="nofollow">3.4、&lt; s:include &gt;标签</a></li> <li><a href="#35_sparam__171" rel="nofollow">3.5、&lt; s:param &gt;标签</a></li> </ul> </li> <li><a href="#4_182" rel="nofollow">4、模板和主题</a></li> <li><a href="#5_191" rel="nofollow">5、表单标签</a></li> <li> <ul> <li><a href="#51_sform__193" rel="nofollow">5.1、&lt; s:form &gt;标签</a></li> <li><a href="#52_ssubmit__196" rel="nofollow">5.2、&lt; s:submit &gt;标签</a></li> <li><a href="#53_stextfield__stextarea__208" rel="nofollow">5.3、&lt; s:textfield &gt;和&lt; s:textarea &gt;标签</a></li> <li><a href="#54_spassword__217" rel="nofollow">5.4、&lt; s:password &gt;标签</a></li> <li><a href="#55_sradio__231" rel="nofollow">5.5、&lt; s:radio &gt;标签</a></li> <li><a href="#56_scheckbox__scheckboxlist__264" rel="nofollow">5.6、&lt; s:checkbox &gt;和&lt; s:checkboxlist &gt;标签</a></li> <li><a href="#57_sselect__276" rel="nofollow">5.7、&lt; s:select &gt;标签</a></li> <li><a href="#58_soptgroup__286" rel="nofollow">5.8、&lt; s:optgroup &gt;标签</a></li> <li><a href="#59_sfile__298" rel="nofollow">5.9、&lt; s:file &gt;标签</a></li> <li><a href="#510_shidden__307" rel="nofollow">5.10、&lt; s:hidden &gt;标签</a></li> <li><a href="#511_sreset__314" rel="nofollow">5.11、&lt; s:reset &gt;标签</a></li> </ul> </li> <li><a href="#6_333" rel="nofollow">6、非表单标签</a></li> </ul> </li> </ul> </div> <h1><a id="_1" rel="nofollow"></a>一、拦截器</h1> <h2><a id="1_2" rel="nofollow"></a>1、拦截器概述</h2> <p><strong>概述</strong>：interceptor是struts2的核心组成部分，可动态拦截Action的调用对象，类似Servlet中的过滤器。可插拔，实现AOP。<br /> 拦截器组合在一起=拦截器链/栈，对应各个功能的拦截器按照一定的顺序排列在一起形成的链，链组成的集合就是栈。</p> <h2><a id="2_6" rel="nofollow"></a>2、拦截器工作原理</h2> <p>通常以代理的方式调用，在一个Action执行前后进行拦截，围绕Action和Result的执行而执行，以链式，对真正要执行的execute方法进行拦截。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/ee77187e3ee4ed4eccbded0297db4bfc.jpg" alt="ssh之struts2篇拦截器&amp;常用标签"></p> <h2><a id="3_9" rel="nofollow"></a>3、拦截器配置</h2> <h3><a id="31_10" rel="nofollow"></a>3.1、拦截器</h3> <p>在struts.xml文件中配置，标签：&lt; interceptor &gt;<br /> name属性指定拦截器名称，class属性指定拦截器的实现类。<br /> 传参用&lt; param &gt;标签，其中name指定参数名，param Value表示参数的值。</p> <pre><code>&lt;interceptor name="login_icpt" class="login_interceptor"&gt;                 &lt;param name="name"&gt;param Value&lt;/param&gt;  &lt;/interceptor&gt;</code></pre> <h3><a id="32_19" rel="nofollow"></a>3.2、拦截器栈</h3> <p>拦截器栈被附加到一个Action上时，在执行Action之前必先执行栈中的每一个拦截器。<br /> 定义拦截器栈使用标签interceptors元素和interceptors-stack子元素，当配置多个拦截器时，interceptor-ref元素指定多个拦截器</p> <pre><code>&lt;package name="defualt" namespace="/" extends="struts-default"&gt;     &lt;interceptors&gt;         &lt;interceptor name="icpt1" class="interceptorClass1"/&gt;         &lt;interceptor name="icpt2" class="interceptorClass2"/&gt;          &lt;!--定义一个拦截器栈，myStack，包含俩拦截器和一个拦截器栈--&gt;         &lt;interceptor-stack name="myStack"&gt;             &lt;interceptor-ref name="defaultStack"&gt;&lt;/interceptor-ref&gt;             &lt;interceptor-ref name="icpt1"&gt;&lt;/interceptor-ref&gt;             &lt;interceptor-ref name="icpt2"&gt;&lt;/interceptor-ref&gt;         &lt;/interceptor-stack&gt;     &lt;/interceptors&gt; &lt;/package&gt;</code></pre> <h3><a id="33_37" rel="nofollow"></a>3.3、默认拦截器栈</h3> <p>配置默认拦截器用标签：&lt; default-interceptor-ref&gt;</p> <pre><code> &lt;default-interceptor-ref name="myStack"&gt;&lt;/default-interceptor-ref&gt;         &lt;action name="login" class="action.UserLoginAction"&gt;             &lt;result name="success"&gt;/login_success.jsp&lt;/result&gt;         &lt;/action&gt;</code></pre> <h3><a id="34_45" rel="nofollow"></a>3.4、内建拦截器</h3> <p>在struts-default.xml文件中，拦截器以name-class的形式配置。位置如下：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/10222a37a20fa66c663bed51c838dfd0.jpg" alt="ssh之struts2篇拦截器&amp;常用标签"></p> <h2><a id="4_48" rel="nofollow"></a>4、自定义拦截器</h2> <h3><a id="41_49" rel="nofollow"></a>4.1、实现自定义拦截器</h3> <p><strong>方式一：</strong><br /> 实现自定义拦截器=直接或间接的实现com.opensymphony.xwork2.interceptor.Interceptor接口。<br /> 实现其中的三个方法：void init()、<br /> void destory()、<br /> String intercept(ActionInvocation invocation) throws Exception<br /><strong>方式二：</strong><br /> 继承抽象拦截器类AbstractInterceptor，该类实现了上述接口的方法，只需实现interceptor（）就可以创建自定义拦截器。</p> <h3><a id="42_57" rel="nofollow"></a>4.2、举个栗子</h3> <p><strong>步骤：</strong><br /> 1）、必须实现Interceptor接口或者继承AbstractInterceptor类；<br /> 2）、在struts.xml中自定义拦截器；<br /> 3）、在struts.xml中Action使用拦截器。<br /> 举个栗子：（懒得自己写了。。。）<br /> https://jingyan.baidu.com/article/63f236285c13260208ab3d93.html</p> <h1><a id="_64" rel="nofollow"></a>二、标签</h1> <h2><a id="1_65" rel="nofollow"></a>1、分类</h2> <p>主要分为：普通标签和UI标签。</p> <table> <thead> <tr> <th>标签库</th> <th>细分</th> </tr> </thead> <tbody> <tr> <td>普通标签</td> <td>control标签，data标签</td> </tr> <tr> <td>UI标签</td> <td>Form、Non-Form、Ajax标签</td> </tr> </tbody> </table> <p>标签库：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/ebd9dbca2e9fb97218012ba47aabc9d5.jpg" alt="ssh之struts2篇拦截器&amp;常用标签"></p> <h2><a id="2_73" rel="nofollow"></a>2、控制标签</h2> <table> <thead> <tr> <th>控制标签</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>&lt;s:if&gt;</td> <td>可单独使用，程序的分支逻辑控制。必须指定test属性，用于设置标签的判断条件，其值为布尔类型的条件表达式</td> </tr> <tr> <td>&lt;s:elseif&gt;</td> <td>结合&lt;s:if&gt;使用，程序的分支逻辑控制。必须指定test属性，用于设置标签的判断条件，其值为布尔类型的条件表达式</td> </tr> <tr> <td>&lt;s:else&gt;</td> <td>结合&lt;s:if&gt;使用，程序的分支逻辑控制。</td> </tr> <tr> <td>&lt;s:iterator&gt;</td> <td>用于对集合中的数据进行迭代，可根据条件遍历集合。</td> </tr> </tbody> </table> <p>control_tags.jsp控制标签：</p> <pre><code>&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt; &lt;html&gt; &lt;head&gt;     &lt;title&gt;控制标签&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt;     &lt;table border="1px" cellpadding="0" cellspacing="0"&gt;         &lt;s:iterator var="name" value="{'java','python','sql','c','c#'}" status="st"&gt;             &lt;s:if test="#st.odd"&gt;                 &lt;tr style="background-color: aliceblue"&gt;                     &lt;td&gt;&lt;s:property value="name"/&gt; &lt;/td&gt;                 &lt;/tr&gt;             &lt;/s:if&gt;             &lt;s:else&gt;                 &lt;tr style="background-color: darkgray"&gt;                     &lt;td&gt;&lt;s:property value="name"/&gt; &lt;/td&gt;                 &lt;/tr&gt;             &lt;/s:else&gt;         &lt;/s:iterator&gt;     &lt;/table&gt; &lt;/center&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <p>s:iterator循环输出集合中的值，status属性的odd方法获取作为if，else标签的判断条件，对行数进行显示控制。<br /> 使用iterator遍历List集合时，判断索引的奇偶决定表格的颜色。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/ba88b83f576796a1c9e97f6313b6f2dd.jpg" alt="ssh之struts2篇拦截器&amp;常用标签"></p> <h2><a id="3_111" rel="nofollow"></a>3、数据标签</h2> <p>&lt; s:property&gt;<br /> &lt; s:a&gt;<br /> &lt; s:debug&gt;<br /> &lt; s:include&gt;<br /> &lt; s:param&gt;</p> <h3><a id="31_sproperty__117" rel="nofollow"></a>3.1、&lt; s:property &gt;标签</h3> <table> <thead> <tr> <th>属性</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>可选，指定该元素的标识</td> </tr> <tr> <td>default</td> <td>可选，若输出属性值为null，则显示default属性的指定值</td> </tr> <tr> <td>escape</td> <td>可选，指定是否忽略html代码（true忽略）</td> </tr> <tr> <td>value</td> <td>可选，指定需要输出的属性值，没有则默认输出ValueStack栈顶值</td> </tr> </tbody> </table> <p>property_tags.jsp</p> <pre><code>&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt; &lt;html&gt; &lt;head&gt;     &lt;title&gt;数据标签&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt;&lt;h2&gt;数据标签property&lt;/h2&gt; 输出字符串： &lt;s:property value="'keep going!'"/&gt;&lt;br&gt; 忽略html代码： &lt;s:property value="'&lt;h3&gt;keep going!&lt;/h3&gt;'" escapeHtml="true"/&gt;&lt;br&gt; 不忽略： &lt;s:property value="'&lt;h3&gt;keep going!&lt;/h3&gt;'" escapeHtml="false"/&gt;&lt;br&gt; 输出默认值： &lt;s:property value="" default="true"/&gt; &lt;/center&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/35c2eeafdf0047c41b45ea185b20a314.jpg" alt="ssh之struts2篇拦截器&amp;常用标签"></p> <h3><a id="32_sa__148" rel="nofollow"></a>3.2、&lt; s:a &gt;标签</h3> <p>构造页面超链接</p> <table> <thead> <tr> <th>属性</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>href</td> <td>可选，String，指定超链接地址</td> </tr> <tr> <td>action</td> <td>可选，String，指定超链接Action地址</td> </tr> <tr> <td>namespace</td> <td>可选，String，指定Action地址</td> </tr> <tr> <td>id</td> <td>可选，String，指定id</td> </tr> <tr> <td>method</td> <td>可选，String，指定Action调用方法</td> </tr> </tbody> </table> <h3><a id="33_sdebug__158" rel="nofollow"></a>3.3、&lt; s:debug &gt;标签</h3> <p>使用该标签，网页中会生成debug的链接，输出服务器对象信息。</p> <h3><a id="34_sinclude__161" rel="nofollow"></a>3.4、&lt; s:include &gt;标签</h3> <p>一个属性：value<br /> 指定被包含的jsp、Servlet等<br /> &lt; param &gt;子标签：用来传参，name参数名，value参数值</p> <pre><code>&lt;s:include value="property_tags.jsp"&gt;   &lt;s:param name="user" value="aa"/&gt; &lt;/s:include&gt;</code></pre> <h3><a id="35_sparam__171" rel="nofollow"></a>3.5、&lt; s:param &gt;标签</h3> <p>结合其他标签使用<br /> 1）使用value指定参数值<br /> 2）通过标签体指定参数值</p> <pre><code>    &lt;s:param name="color" value="red"/&gt;          &lt;s:param name="color"&gt;red&lt;/s:param&gt;</code></pre> <h2><a id="4_182" rel="nofollow"></a>4、模板和主题</h2> <p><strong>simple：</strong><br /> 最简单的主题，每个UI标签只生成最基本的html元素，没有任何附加功能。<br /><strong>xhtml：</strong><br /> stryts2的默认主题，扩展了simple主题，提供布局功能、lable显示名称、验证框架和国际化框架的集成。<br /><strong>css_html：</strong><br /> 扩展xhtml，添加了对css的支持和控制。<br /><strong>Ajax：</strong><br /> 继承了xhtml，提供Ajax支持。</p> <h2><a id="5_191" rel="nofollow"></a>5、表单标签</h2> <p>用来向服务器提交用户输入信息，所有表单标签在org.apache.struts2.components包都有一个相对应的类，继承自UIBean类。</p> <h3><a id="51_sform__193" rel="nofollow"></a>5.1、&lt; s:form &gt;标签</h3> <p>form标签输出一个html输入表单，此外，xhtml主题的form标签还输出表单元素外围的表格。<br /> 使用时一般包含其它的表单元素，如：&lt; s:textfield &gt;、&lt; s:radio &gt;等</p> <h3><a id="52_ssubmit__196" rel="nofollow"></a>5.2、&lt; s:submit &gt;标签</h3> <p>submit标签输出一个提交按钮。submit标签和form标签一起使用可以提供异步表单提交功能。</p> <table> <thead> <tr> <th>属性</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>action</td> <td>可选，String，指定提交时对应的action</td> </tr> <tr> <td>method</td> <td>可选，String，指定action中调用的方法</td> </tr> </tbody> </table> <p>submit标签可以输出以下三种类型提交按钮。</p> <pre><code>  input:等价于：&lt;input type="submit" .../&gt;   image:等价于：&lt;input type="image" .../&gt;     button:等价于：&lt;input type="button" .../&gt;</code></pre> <h3><a id="53_stextfield__stextarea__208" rel="nofollow"></a>5.3、&lt; s:textfield &gt;和&lt; s:textarea &gt;标签</h3> <p>都用于创建文本框<br /> textfield标签： textfield标签输出一个HMTL<strong>单行文本</strong>输入控件，等价于：</p> <pre><code>&lt;input type="text" .../&gt;      &lt;s:form action="register" method="post"&gt;         &lt;s:textfield name="username" lable="用户名"/&gt;</code></pre> <p>textarea标签：输出一个html<strong>多行文本</strong>输入控件，等价于：<code>&lt;s:textarea name="description" lable="描述"/&gt;</code></p> <h3><a id="54_spassword__217" rel="nofollow"></a>5.4、&lt; s:password &gt;标签</h3> <p>password标签输出一个HTML口令输入控件，密码输入框，</p> <table> <thead> <tr> <th>属性</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>name</td> <td>指定输入框名称</td> </tr> <tr> <td>size</td> <td>指定输入框的显示宽度，字符数</td> </tr> <tr> <td>maxlength</td> <td>限定输入框的最大输入字符串个数</td> </tr> <tr> <td>shoePassword</td> <td>是否显示初始值，密文显示 掩码代替</td> </tr> </tbody> </table> <p>举栗子：</p> <pre><code>&lt;s:password label="password" name="password" maxLength="15" size="6" showPassword="true"/&gt;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/5347bd18fd45e5d10b602948d97cb453.jpg" alt="ssh之struts2篇拦截器&amp;常用标签"></p> <h3><a id="55_sradio__231" rel="nofollow"></a>5.5、&lt; s:radio &gt;标签</h3> <p>radio标签输出一组hmtl单选按钮：<code>&lt;input type="radio" .../&gt;</code></p> <table> <thead> <tr> <th>属性</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>list</td> <td>必选，生成单选框的集合</td> </tr> <tr> <td>listKey</td> <td>可选，指定集合对象的哪个属性作为选项的value</td> </tr> <tr> <td>listValue</td> <td>可选， 指定集合对象的哪个属性作为选项的内容</td> </tr> </tbody> </table> <p>举个栗子：</p> <pre><code class="prism language-java"><span class="token operator">&lt;</span>s<span class="token operator">:</span>radio list<span class="token operator">=</span><span class="token string">"#{'0':'男','1':'女'}"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> label<span class="token operator">=</span><span class="token string">"性别"</span> value<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></pre> <p>完整版：（顺便加个textarea的）</p> <pre><code class="prism language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>html<span class="token punctuation">&gt;</span></span><span class="token generics function"><span class="token punctuation">&lt;</span>head<span class="token punctuation">&gt;</span></span><span class="token generics function"><span class="token punctuation">&lt;</span>title<span class="token punctuation">&gt;</span></span>登录页面<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>body<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span>div align<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"login"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">&gt;</span>         用户名<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span>         密  码<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span>  name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span>s<span class="token operator">:</span>radio list<span class="token operator">=</span><span class="token string">"#{'0':'男','1':'女'}"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> label<span class="token operator">=</span><span class="token string">"性别"</span> value<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span>s<span class="token operator">:</span>textarea label<span class="token operator">=</span><span class="token string">"个性签名"</span> name<span class="token operator">=</span><span class="token string">"description"</span> rows<span class="token operator">=</span><span class="token string">"5"</span> cols<span class="token operator">=</span><span class="token string">"15"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"login"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/3f46ea811c04ffc5d6e4d0875690c659.jpg" alt="ssh之struts2篇拦截器&amp;常用标签"></p> <h3><a id="56_scheckbox__scheckboxlist__264" rel="nofollow"></a>5.6、&lt; s:checkbox &gt;和&lt; s:checkboxlist &gt;标签</h3> <p>checkbox标签输出一个html复选框，等价于：<code>&lt;input type="checkbox" .../&gt;</code><br /> checkboxlist标签使用一个列表创建一系列复选框，属性设置与&lt; s:select/&gt;和&lt; s:radio/&gt;类似，只是创建的是html复选框。不同的是，checkboxlist标签是多选标签。<br /> 举个栗子：</p> <pre><code class="prism language-java"><span class="token operator">&lt;</span>s<span class="token operator">:</span>checkbox label<span class="token operator">=</span><span class="token string">"普通用户"</span> name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"ture"</span> fieldValue<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>s<span class="token operator">:</span>checkbox label<span class="token operator">=</span><span class="token string">"管理员"</span> name<span class="token operator">=</span><span class="token string">"admin"</span> fieldValue<span class="token operator">=</span><span class="token string">"admin"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span>s<span class="token operator">:</span>checkboxlist list<span class="token operator">=</span><span class="token string">"{'足球','篮球','排球','网球'}"</span> name<span class="token operator">=</span><span class="token string">"intersters"</span> label<span class="token operator">=</span><span class="token string">"球类运动"</span> labelposition<span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>s<span class="token operator">:</span>checkboxlist list<span class="token operator">=</span><span class="token string">"{'java','c','python','php'}"</span> name<span class="token operator">=</span><span class="token string">"course"</span> label<span class="token operator">=</span><span class="token string">"计算机语言"</span> labelposition<span class="token operator">=</span><span class="token string">"left"</span> listKey<span class="token operator">=</span><span class="token string">"key"</span> listValue<span class="token operator">=</span><span class="token string">"value"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/ac74e625d3db9bee343d60c79580fe13.jpg" alt="ssh之struts2篇拦截器&amp;常用标签"></p> <h3><a id="57_sselect__276" rel="nofollow"></a>5.7、&lt; s:select &gt;标签</h3> <p>select标签输出一个html下拉列表框，等价于:&lt;select …&gt;&lt;option …&gt;&lt; /option&gt;&lt; /select &gt;<br /> 举个栗子：</p> <pre><code class="prism language-java"><span class="token operator">&lt;</span>s<span class="token operator">:</span>select list<span class="token operator">=</span><span class="token string">"{'软件','计科','空信','电科','电信','物联网','通信'}"</span> label<span class="token operator">=</span><span class="token string">"所学专业"</span> size<span class="token operator">=</span><span class="token string">"3"</span> multiple<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span></code></pre> <p><em>multiple布尔类型，指定是否多选，默认为false。<br /> list必选，生成下拉框的集合。<br /> size可选，Int类型，指定最多可以同时显示多少个选项。</em><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/367db8af492ba1fc1ba861309acc99f3.jpg" alt="ssh之struts2篇拦截器&amp;常用标签"></p> <h3><a id="58_soptgroup__286" rel="nofollow"></a>5.8、&lt; s:optgroup &gt;标签</h3> <p>optgroup标签作为select标签的子标签使用，用于创建选项组。<br /> 可以在select标签的标签体中使用一个或者多个optgroup标签，对选项进行逻辑分析组。</p> <pre><code class="prism language-java"><span class="token operator">&lt;</span>s<span class="token operator">:</span>select list<span class="token operator">=</span><span class="token string">"#{'java','数据库'}"</span> label<span class="token operator">=</span><span class="token string">"所学"</span> name<span class="token operator">=</span><span class="token string">"couses"</span> listKey<span class="token operator">=</span><span class="token string">"value"</span> listValue<span class="token operator">=</span><span class="token string">"key"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>s<span class="token operator">:</span>optgroup label<span class="token operator">=</span><span class="token string">"Java"</span> list<span class="token operator">=</span><span class="token string">"#{'jsp':'jsp','servlet':'servlet','javabean':'javabean'}"</span> listValue<span class="token operator">=</span><span class="token string">"key"</span> listKey<span class="token operator">=</span><span class="token string">"value"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>s<span class="token operator">:</span>optgroup label<span class="token operator">=</span><span class="token string">"数据库"</span> list<span class="token operator">=</span><span class="token string">"#{'mysql':'mysql','oracle':'oracle','sqlserver':'sqlserver'}"</span> listValue<span class="token operator">=</span><span class="token string">"key"</span> listKey<span class="token operator">=</span><span class="token string">"value"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>s<span class="token operator">:</span>select<span class="token operator">&gt;</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/472ac23b3001af6080d0039e0533df00.jpg" alt="ssh之struts2篇拦截器&amp;常用标签"></p> <h3><a id="59_sfile__298" rel="nofollow"></a>5.9、&lt; s:file &gt;标签</h3> <p>用于创建文件选择框，生成html中的&lt; input type=“file”/&gt;标签。<br /> 举栗子：</p> <pre><code class="prism language-java"><span class="token operator">&lt;</span>s<span class="token operator">:</span>file name<span class="token operator">=</span><span class="token string">"upLoadfile"</span> accept<span class="token operator">=</span><span class="token string">"text/*"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span>s<span class="token operator">:</span>file name<span class="token operator">=</span><span class="token string">"other"</span> accept<span class="token operator">=</span><span class="token string">"text/html,text/plain"</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></pre> <p>accept指定接收文件类型，默认input。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/819cc4f704424fde27939d9bd24b5d90.jpg" alt="ssh之struts2篇拦截器&amp;常用标签"></p> <h3><a id="510_shidden__307" rel="nofollow"></a>5.10、&lt; s:hidden &gt;标签</h3> <p>hidden标签输出一个html隐藏表单元素，等价于:<code>&lt;input type="hidden" .../&gt;</code></p> <pre><code class="prism language-java"><span class="token operator">&lt;</span>s<span class="token operator">:</span>hidden name<span class="token operator">=</span><span class="token string">"id"</span> value<span class="token operator">=</span><span class="token string">"5"</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></pre> <h3><a id="511_sreset__314" rel="nofollow"></a>5.11、&lt; s:reset &gt;标签</h3> <p>重置按钮，属性 name ，指定重置按钮的名称；属性value ，显示按钮的值<br /> 举个栗子：</p> <pre><code class="prism language-java"><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"login"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">&gt;</span>         用户名<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span>         密  码<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span>  name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span>s<span class="token operator">:</span>radio list<span class="token operator">=</span><span class="token string">"#{'0':'男','1':'女'}"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> label<span class="token operator">=</span><span class="token string">"性别"</span> value<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span>s<span class="token operator">:</span>textarea label<span class="token operator">=</span><span class="token string">"个性签名"</span> name<span class="token operator">=</span><span class="token string">"description"</span> rows<span class="token operator">=</span><span class="token string">"5"</span> cols<span class="token operator">=</span><span class="token string">"15"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span>s<span class="token operator">:</span>file name<span class="token operator">=</span><span class="token string">"upLoadfile"</span> accept<span class="token operator">=</span><span class="token string">"jpg/*"</span> label<span class="token operator">=</span><span class="token string">"头像"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span><span class="token generics function"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span>s<span class="token operator">:</span>reset value<span class="token operator">=</span><span class="token string">"重置"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"提交"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/a2c5c4be01946192e739ba5758515b03.jpg" alt="ssh之struts2篇拦截器&amp;常用标签"><br /> 重置后：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/b296828b648daee8fa3d893ec00499c5.jpg" alt="ssh之struts2篇拦截器&amp;常用标签"></p> <h2><a id="6_333" rel="nofollow"></a>6、非表单标签</h2> <table> <thead> <tr> <th>非表单标签</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>&lt; s:actionerror&gt;</td> <td>如果action实例的getActionError（）方法返回不为null，该标签负责输出该方法返回的系列错误</td> </tr> <tr> <td>&lt;s:actionmessage&gt;</td> <td>如果action实例的getActionMessager（）方法返回不为null，该标签负责输出该方法返回的系列消息</td> </tr> <tr> <td>&lt; s:fielderror&gt;</td> <td>如果action实例存在表单域的类型转换错误、校验错误，该标签负责输出错误提示</td> </tr> </tbody> </table> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-126.htm">深入浅出Java线程池原理分析与使用</a></p>
                                        <p>下一个：<a href="/html/category/article-128.htm">C# 11 对 ref 和 struct 的改进</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-259.htm">游戏开发设计模式：单例模式</a></h4>
                <p>一、单例模式  文章目录  一、单例模式     1.1 单例模式总结介绍   1.1.1什么是单例模式 1.1.2单例模式分类 1.1.3单例类特点 1.1.4如何保证线程安全？   1.2 单例模</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-236.htm">tensorflow（三） 模型保存</a></h4>
                <p>tensorflow最简单的保存与加载模型的方法是Saver对象（存放在tensorflow.train）。构造器给graph所有的变量，或者定义在列表中的变量，添加save和restore的操作，分</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-229.htm">Docker提交镜像-数据卷-可视化</a></h4>
                <p>在熟悉完Docker的安装及基本命令使用之后，我们开始学习下Docker的进阶操作：包括但不限于新建Docker镜像，数据卷的挂载，以及Docker的可视化等。 Docker提交镜像 启动镜像 我们先</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-206.htm">读取spring的配置来定义常量</a></h4>
                <p>问题背景 1、在spring配置中有一个【在线地址】的配置  2、有一个工具类，可以读取spring的配置  需求：将spring的配置定义为一个常量 问题分析 1、常量定义原则：要用final和st</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-243.htm">SpringMVC访问静态资源的三种方式</a></h4>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果你的DispatcherServlet拦截 *.do这样的URL，就不存在访问不到静态资源的问题。如果你的Dispatch</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-255.htm">python 查看包的版本</a></h4>
                <p>python查看包的版本  方法1：pip 使用cmd命令打开命令行，在命令行输入pip list,即可查看所有已安装的包及包的版本。  方法2：导入查看 导入包，输入包名.__version__即可</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-261.htm">Java 集合框架ArrayList 储存自定义数组</a></h4>
                <p>package LinkedList;  import java.util.ArrayList; import java.util.Iterator;  import p.bean.Person;  </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-239.htm">Vue假数据应用——表格的添加、删除、搜索</a></h4>
                <p>Vue实现假数据的添加、删除、搜索 HTML &lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;script type="text/</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-211.htm">Java并发 &#8211; 并发容器类</a></h4>
                <p>多线程环境下，不安全的容器有哪些？为什么？  （1）List publicvoidtest1(){List&lt;String&gt; list=newArrayList&lt;&gt;();for(</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-208.htm">PHP字符串运算符详解</a></h4>
                <p>介绍 有两个用于处理字符串数据类型的运算符。在&nbsp;“”（点）运算符是PHP的串联运算符。两个字符串操作数结合在一起（右手字符串附加在左手字符串上），并返回一个新字符串。PHP还具有&nbsp;</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">22</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>