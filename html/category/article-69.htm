<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-69.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>SpringCloud——安全认证（Security） - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">SpringCloud——安全认证（Security）</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="htmledit_views"> <h3>一、SpringCloud Security简介</h3> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Spring Cloud Security提供了一组原语，用于构建安全的应用程序和服务，而且操作简便。可以在外部（或集中）进行大量配置的声明性模型有助于实现大型协作的远程组件系统，通常具有中央身份管理服务。它也非常易于在Cloud Foundry等服务平台中使用。在Spring Boot和Spring Security OAuth2的基础上，可以快速创建实现常见模式的系统，如单点登录，令牌中继和令牌交换。</p> <p id="features"><strong>功能：</strong></p> <ul> <li>从Zuul代理中的前端到后端服务中继SSO令牌</li> <li>资源服务器之间的中继令牌</li> <li>使Feign客户端表现得像<code>OAuth2RestTemplate</code>（获取令牌等）的拦截器</li> <li>在Zuul代理中配置下游身份验证</li> </ul> <h3>二、单一登录实现</h3> <p>1、在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/typ1805/article/details/82621881"  rel="nofollow">&nbsp;SpringCloud——服务的注册与发现Eureka</a>的基础上做修改</p> <p>添加spring-security支持：</p> <pre class="has"><code>&lt;dependency&gt; 	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 	&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre> <p>添加配置：</p> <pre class="has"><code>server:   port: 8082  spring:   application:     name: eureka-client  eureka:   client:     serviceUrl:       defaultZone: http://localhost:8081/eureka/ #    fetch-registry: false #    register-with-eureka: false  # 安全认证的配置 security:   basic:     enabled: true</code></pre> <p>2、启动工程，浏览器访问：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8082"  rel="nofollow">http://localhost:8082</a>/test</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230113/a75fa0cb5d13b63563227d7b6d4ecedb.jpg"></p> <p>输入用户名和密码认证，用户名为user，密码在程序启动时会输出到控制台上，如图：</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230113/ac76005d959b73aa1adfd5620a7450c6.jpg"></p> <p>登录成功后浏览器显示：</p> <pre class="has"><code>test=============8082</code></pre> <h3>三、配置MySQL数据库实现认证</h3> <p>1、添加相关依赖：</p> <pre class="has"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; 	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  	&lt;groupId&gt;com.example.demo.security&lt;/groupId&gt; 	&lt;artifactId&gt;security-oauth2&lt;/artifactId&gt; 	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; 	&lt;packaging&gt;jar&lt;/packaging&gt;  	&lt;name&gt;security-oauth2&lt;/name&gt;  	&lt;parent&gt; 		&lt;groupId&gt;com.example.demo&lt;/groupId&gt; 		&lt;artifactId&gt;springcloud-security&lt;/artifactId&gt; 		&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; 	&lt;/parent&gt;  	&lt;properties&gt; 		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; 		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; 		&lt;java.version&gt;1.8&lt;/java.version&gt; 	&lt;/properties&gt;  	&lt;dependencies&gt; 		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 			&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; 		&lt;/dependency&gt;  		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; 			&lt;scope&gt;test&lt;/scope&gt; 		&lt;/dependency&gt;  		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; 			&lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt; 		&lt;/dependency&gt;  		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; 			&lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt; 		&lt;/dependency&gt;  		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 			&lt;artifactId&gt;spring-boot-starter-velocity&lt;/artifactId&gt; 			&lt;version&gt;1.1.3.RELEASE&lt;/version&gt; 		&lt;/dependency&gt;  		&lt;dependency&gt; 			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 			&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; 		&lt;/dependency&gt;  		&lt;dependency&gt; 			&lt;groupId&gt;mysql&lt;/groupId&gt; 			&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; 		&lt;/dependency&gt;  	&lt;/dependencies&gt;  	&lt;build&gt; 		&lt;plugins&gt; 			&lt;plugin&gt; 				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; 			&lt;/plugin&gt; 		&lt;/plugins&gt; 	&lt;/build&gt;   &lt;/project&gt; </code></pre> <p>2、添加配置文件：</p> <pre class="has"><code>server:   port: 8081  spring:   application:     name: security-oauth2   datasource:     url: jdbc:mysql://127.0.0.1:3306/alan_oauth?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=true&amp;autoReconnect=true     username: root     password: admin     driver-class-name: com.mysql.jdbc.Driver  security:   basic:     enabled: false </code></pre> <p>3、相关config配置文件</p> <pre><code class="language-html">创建授权配置信息类OAuthSecurityConfig.java，声明TokenStore实现和ClientDetails的实现。</code></pre> <pre class="has"><code>package com.example.demo.security.config;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer; import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter; import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer; import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer; import org.springframework.security.oauth2.provider.ClientDetailsService; import org.springframework.security.oauth2.provider.client.JdbcClientDetailsService; import org.springframework.security.oauth2.provider.token.DefaultTokenServices; import org.springframework.security.oauth2.provider.token.TokenStore; import org.springframework.security.oauth2.provider.token.store.JdbcTokenStore;  import javax.sql.DataSource; import java.util.concurrent.TimeUnit;  /**  * 路径：com.example.demo.security.config  * 类名：  * 功能：《用一句描述一下》  * 备注：  * 创建人：typ  * 创建时间：2018/9/26 14:25  * 修改人：  * 修改备注：  * 修改时间：  */ @Configuration public class OAuthSecurityConfig extends AuthorizationServerConfigurerAdapter{      @Autowired     private AuthenticationManager authenticationManager;      @Autowired     private DataSource dataSource;      @Bean     public TokenStore tokenStore(){         return new JdbcTokenStore(dataSource);     }      @Override     public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {         endpoints.authenticationManager(authenticationManager);         endpoints.tokenStore(tokenStore());          // 配置TokenServices参数         DefaultTokenServices tokenServices = new DefaultTokenServices();         tokenServices.setTokenStore(endpoints.getTokenStore());         tokenServices.setSupportRefreshToken(false);         tokenServices.setClientDetailsService(endpoints.getClientDetailsService());         tokenServices.setTokenEnhancer(endpoints.getTokenEnhancer());         tokenServices.setAccessTokenValiditySeconds( (int) TimeUnit.DAYS.toSeconds(30)); // 30天         endpoints.tokenServices(tokenServices);      }       @Override     public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception {         //oauthServer.checkTokenAccess("isAuthenticated()");         oauthServer.checkTokenAccess("permitAll()");         oauthServer.allowFormAuthenticationForClients();     }      @Bean     public ClientDetailsService clientDetails() {         return new JdbcClientDetailsService(dataSource);     }      @Override     public void configure(ClientDetailsServiceConfigurer clients) throws Exception {         clients.withClientDetails(clientDetails());         clients.inMemory()                 .withClient("client")                 .secret("secret")                 .authorizedGrantTypes("authorization_code")                 .scopes("app");     } } </code></pre> <pre><code class="language-html">安全服务配置类OAuthWebConfig.java</code></pre> <pre class="has"><code>package com.example.demo.security.config;  import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.builders.WebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;  /**  * 路径：com.example.demo.security.config  * 类名：  * 功能：《用一句描述一下》  * 备注：  * 创建人：typ  * 创建时间：2018/9/26 14:22  * 修改人：  * 修改备注：  * 修改时间：  */ @Configuration public class OAuthWebConfig extends WebSecurityConfigurerAdapter{      @Override     public void configure(WebSecurity web) throws Exception {         web.ignoring()                 .antMatchers("/favor.ico");     }      @Override     protected void configure(HttpSecurity http) throws Exception {         super.configure(http);     } } </code></pre> <p>自定义provider调用类SsoAuthProvider.java</p> <pre class="has"><code>package com.example.demo.security.config;  import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.security.authentication.AuthenticationProvider; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.AuthenticationException; import org.springframework.security.core.GrantedAuthority; import org.springframework.stereotype.Component;  import java.util.Collections;  /**  * 路径：com.example.demo.security.config  * 类名：  * 功能：《用一句描述一下》  * 备注：  * 创建人：typ  * 创建时间：2018/9/26 14:33  * 修改人：  * 修改备注：  * 修改时间：  */ @Component public class SsoAuthProvider implements AuthenticationProvider{      private static final Logger log = LoggerFactory.getLogger(SsoAuthProvider.class);      @Override     public Authentication authenticate(Authentication authentication) throws AuthenticationException {         log.info("自定义provider调用");          返回一个Token对象表示登陆成功         return new UsernamePasswordAuthenticationToken(authentication.getPrincipal(), authentication.getCredentials(), Collections.&lt;GrantedAuthority&gt;emptyList());     }      @Override     public boolean supports(Class&lt;?&gt; aClass) {         return true;     } } </code></pre> <p>4、需要一个重定向的controller类</p> <pre class="has"><code>package com.example.demo.security.controller;  import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.bind.annotation.SessionAttributes;  import java.util.Map;  /**  * 路径：com.example.demo.security.controller  * 类名：  * 功能：《用一句描述一下》  * 备注：  * 创建人：typ  * 创建时间：2018/9/26 14:30  * 修改人：  * 修改备注：  * 修改时间：  */ @RestController @SessionAttributes("authorizationRequest") public class ErrorController {      private static final Logger log = LoggerFactory.getLogger(ErrorController.class);      @RequestMapping("/oauth/error")     public String error(@RequestParam Map&lt;String, String&gt; parameters){         String url = parameters.get("redirect_uri");         log.info("重定向: {}", url);         return "redirect:" + url + "?error=1";     } } </code></pre> <p>5、启动类添加注解@EnableAuthorizationServer</p> <pre class="has"><code>package com.example.demo.security;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.Bean; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.authentication.AuthenticationProvider; import org.springframework.security.authentication.ProviderManager; import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;  import java.util.Arrays;  @SpringBootApplication @EnableAuthorizationServer public class SecurityOauth2Application {  	public static void main(String[] args) { 		SpringApplication.run(SecurityOauth2Application.class, args); 	}  	@Autowired 	private AuthenticationProvider authenticationProvider;  	@Bean 	public AuthenticationManager authenticationManager(){ 		return new ProviderManager(Arrays.asList(authenticationProvider)); 	} } </code></pre> <p>6、创建数据库及相关表</p> <pre class="has"><code># Host: 127.0.0.1  (Version 5.7.21) # Date: 2018-09-26 15:17:51 # Generator: MySQL-Front 6.0  (Build 2.20)   # # Structure for table "clientdetails" #  DROP TABLE IF EXISTS `clientdetails`; CREATE TABLE `clientdetails` (   `appId` varchar(128) NOT NULL,   `resourceIds` varchar(256) DEFAULT NULL,   `appSecret` varchar(256) DEFAULT NULL,   `scope` varchar(256) DEFAULT NULL,   `grantTypes` varchar(256) DEFAULT NULL,   `redirectUrl` varchar(256) DEFAULT NULL,   `authorities` varchar(256) DEFAULT NULL,   `access_token_validity` int(11) DEFAULT NULL,   `refresh_token_validity` int(11) DEFAULT NULL,   `additionalInformation` varchar(4096) DEFAULT NULL,   `autoApproveScopes` varchar(256) DEFAULT NULL,   PRIMARY KEY (`appId`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  # # Data for table "clientdetails" #   # # Structure for table "oauth_access_token" #  DROP TABLE IF EXISTS `oauth_access_token`; CREATE TABLE `oauth_access_token` (   `token_id` varchar(256) DEFAULT NULL,   `token` blob,   `authentication_id` varchar(128) NOT NULL,   `user_name` varchar(256) DEFAULT NULL,   `client_id` varchar(256) DEFAULT NULL,   `authentication` blob,   `refresh_token` varchar(256) DEFAULT NULL,   PRIMARY KEY (`authentication_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  # # Data for table "oauth_access_token" #   # # Structure for table "oauth_approvals" #  DROP TABLE IF EXISTS `oauth_approvals`; CREATE TABLE `oauth_approvals` (   `userId` varchar(256) DEFAULT NULL,   `clientId` varchar(256) DEFAULT NULL,   `scope` varchar(256) DEFAULT NULL,   `status` varchar(10) DEFAULT NULL,   `expiresAt` datetime DEFAULT NULL,   `lastModifiedAt` datetime DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  # # Data for table "oauth_approvals" #   # # Structure for table "oauth_client_details" #  DROP TABLE IF EXISTS `oauth_client_details`; CREATE TABLE `oauth_client_details` (   `client_id` varchar(128) NOT NULL,   `resource_ids` varchar(256) DEFAULT NULL,   `client_secret` varchar(256) DEFAULT NULL,   `scope` varchar(256) DEFAULT NULL,   `authorized_grant_types` varchar(256) DEFAULT NULL,   `web_server_redirect_uri` varchar(256) DEFAULT NULL,   `authorities` varchar(256) DEFAULT NULL,   `access_token_validity` int(11) DEFAULT NULL,   `refresh_token_validity` int(11) DEFAULT NULL,   `additional_information` varchar(4096) DEFAULT NULL,   `autoapprove` varchar(256) DEFAULT NULL,   PRIMARY KEY (`client_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  # # Data for table "oauth_client_details" #  INSERT INTO `oauth_client_details` VALUES ('client',NULL,'secret','app','authorization_code','http://www.baidu.com',NULL,NULL,NULL,NULL,NULL);  # # Structure for table "oauth_client_token" #  DROP TABLE IF EXISTS `oauth_client_token`; CREATE TABLE `oauth_client_token` (   `token_id` varchar(256) DEFAULT NULL,   `token` blob,   `authentication_id` varchar(128) NOT NULL,   `user_name` varchar(256) DEFAULT NULL,   `client_id` varchar(256) DEFAULT NULL,   PRIMARY KEY (`authentication_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  # # Data for table "oauth_client_token" #   # # Structure for table "oauth_code" #  DROP TABLE IF EXISTS `oauth_code`; CREATE TABLE `oauth_code` (   `code` varchar(256) DEFAULT NULL,   `authentication` blob ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  # # Data for table "oauth_code" #   # # Structure for table "oauth_refresh_token" #  DROP TABLE IF EXISTS `oauth_refresh_token`; CREATE TABLE `oauth_refresh_token` (   `token_id` varchar(256) DEFAULT NULL,   `token` blob,   `authentication` blob ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  # # Data for table "oauth_refresh_token" #  </code></pre> <p>在oauth_client_details表中添加一条数据</p> <pre class="has"><code>INSERT INTO `oauth_client_details` VALUES ('client',NULL,'secret','app','authorization_code','http://www.baidu.com',NULL,NULL,NULL,NULL,NULL); </code></pre> <p>启动工程，浏览器访问：</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8081/oauth/authorize?client_id=client&amp;response_type=code&amp;redirect_uri=http://www.baidu.com"  rel="nofollow">http://localhost:8081/oauth/authorize?client_id=client&amp;response_type=code&amp;redirect_uri=http://www.baidu.com</a></p> <div>  <img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230113/574f69a646b70268401c0a1a8dd74a70.jpg"> </div> <p>&nbsp;</p> <p>点击Authorize会跳转到百度页面，因为数据库中配置的是百度页面。</p> <p>&nbsp;</p> <h3>四、OAuth的思路</h3> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;OAuth在"客户端"与"服务提供商"之间，设置了一个授权层（authorization layer）。"客户端"不能直接登录"服务提供商"，只能登录授权层，以此将用户与客户端区分开来。"客户端"登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。</p> <p>"客户端"登录授权层以后，"服务提供商"根据令牌的权限范围和有效期，向"客户端"开放用户储存的资料。</p> <p>OAuth 2.0的运行流程：</p> <p><img decoding="async" alt="OAuth运行流程" class="has" src="http://img.555519.xyz/uploads/20230113/540a667ced1d2561126796d0f28888b7.jpg"></p> <blockquote> <p>（A）用户打开客户端以后，客户端要求用户给予授权。</p> <p>（B）用户同意给予客户端授权。</p> <p>（C）客户端使用上一步获得的授权，向认证服务器申请令牌。</p> <p>（D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。</p> <p>（E）客户端使用令牌，向资源服务器申请获取资源。</p> <p>（F）资源服务器确认令牌无误，同意向客户端开放资源。</p> </blockquote> <p>在上面六个步骤之中，B是关键，即用户怎样才能给于客户端授权。有了这个授权以后，客户端就可以获取令牌，进而凭令牌获取资源。</p> <h3>五、客户端的授权模式</h3> <p>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。</p> <p>OAuth 2.0定义了四种授权方式：</p> <ul> <li>授权码模式（authorization code）</li> <li>简化模式（implicit）</li> <li>密码模式（resource owner password credentials）</li> <li>客户端模式（client credentials）</li> </ul> <p><strong>1、授权码模式</strong></p> <p>&nbsp; &nbsp; &nbsp; 授权码模式（authorization code）是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与"服务提供商"的认证服务器进行互动。</p> <p><img decoding="async" alt="授权码模式" class="has" src="http://img.555519.xyz/uploads/20230113/3929f909577479cfc3403653f928c58f.jpg"></p> <p>步骤如下：</p> <blockquote> <p>（A）用户访问客户端，后者将前者导向认证服务器。</p> <p>（B）用户选择是否给予客户端授权。</p> <p>（C）假设用户给予授权，认证服务器将用户导向客户端事先指定的"重定向URI"（redirection URI），同时附上一个授权码。</p> <p>（D）客户端收到授权码，附上早先的"重定向URI"，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。</p> <p>（E）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。</p> </blockquote> <p><strong>2、简化模式</strong></p> <p>&nbsp; &nbsp; &nbsp;简化模式（implicit grant type）不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了"授权码"这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。</p> <p><img decoding="async" alt="简化模式" class="has" src="http://img.555519.xyz/uploads/20230113/1073c6304d744c80f2f4c81da8a1c64e.jpg"></p> <p>步骤如下：</p> <blockquote> <p>（A）客户端将用户导向认证服务器。</p> <p>（B）用户决定是否给于客户端授权。</p> <p>（C）假设用户给予授权，认证服务器将用户导向客户端指定的"重定向URI"，并在URI的Hash部分包含了访问令牌。</p> <p>（D）浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。</p> <p>（E）资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。</p> <p>（F）浏览器执行上一步获得的脚本，提取出令牌。</p> <p>（G）浏览器将令牌发给客户端。</p> </blockquote> <p><strong>3、密码模式</strong></p> <p>&nbsp; &nbsp; &nbsp;密码模式（Resource Owner Password Credentials Grant）中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向"服务商提供商"索要授权。</p> <p>&nbsp; &nbsp; &nbsp;在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分，或者由一个著名公司出品。而认证服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。</p> <p><img decoding="async" alt="密码模式" class="has" src="http://img.555519.xyz/uploads/20230113/0f7c5337cd034740102a19dab027e38a.jpg"></p> <p>步骤如下：</p> <blockquote> <p>（A）用户向客户端提供用户名和密码。</p> <p>（B）客户端将用户名和密码发给认证服务器，向后者请求令牌。</p> <p>（C）认证服务器确认无误后，向客户端提供访问令牌。</p> </blockquote> <p><strong>4、客户端模式</strong></p> <p>&nbsp; &nbsp; &nbsp;客户端模式（Client Credentials Grant）指客户端以自己的名义，而不是以用户的名义，向"服务提供商"进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求"服务提供商"提供服务，其实不存在授权问题。</p> <p><img decoding="async" alt="客户端模式" class="has" src="http://img.555519.xyz/uploads/20230113/ca3f87ca93c0c1a8b184d459be66a7df.jpg"></p> <p>步骤如下：</p> <blockquote> <p>（A）客户端向认证服务器进行身份认证，并要求一个访问令牌。</p> <p>（B）认证服务器确认无误后，向客户端提供访问令牌。</p> </blockquote> <h3>六、更新令牌</h3> <p>&nbsp; &nbsp; &nbsp; &nbsp;如果用户访问的时候，客户端的"访问令牌"已经过期，则需要使用"更新令牌"申请一个新的访问令牌。</p> <p>客户端发出更新令牌的HTTP请求，包含以下参数：</p> <ul> <li>grant<em>type：表示使用的授权模式，此处的值固定为"refresh</em>token"，必选项。</li> <li>refresh_token：表示早前收到的更新令牌，必选项。</li> <li>scope：表示申请的授权范围，不可以超出上一次申请的范围，如果省略该参数，则表示与上一次一致。</li> </ul> <h3>源码</h3> <p>码云：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://gitee.com/typ1805/springcloud-master"  rel="nofollow">https://gitee.com/typ1805/springcloud-master</a><span style="font-size: 16px;">&nbsp;</span></p> </p></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-68.htm">面试题：NIO/Netty 中的零拷贝体现在哪里？</a></p>
                                        <p>下一个：<a href="/html/category/article-70.htm">FreeRTOS实时操作系统的任务应用函数详解_操作系统</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-207.htm">MySQL——union(合并结果集)、limit(获取部分数据)、关于MySQL中常用数据类型</a></h4>
                <p>博客目录 1、union(合并结果集) 2、limit(获取一张表中某部分数据) 3、表——创建表、删除表 4、关于MySQL中的数据类型  一、union(合并结果集)  将两个查询结果合并(可以是</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-226.htm">Vue &#8211; 缓存页面（keepAlive）</a></h4>
                <p>前言  项目主流程缓存优化，主流程页面（组件）切换时保持之前加载的状态，避免反复渲染影响页面性能，同时也可以很大程度上减少接口请求，减小服务器压力。  例如，我们将某个列表类组件内容滑动到第 100 </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-244.htm">vue实现页面刷新动画_vue.js_</a></h4>
                <p>本文实例为大家分享了vue实现页面刷新动画的具体代码，供大家参考，具体内容如下 做一个vue的页面刷新动画，找了好多动画样式，感谢大佬们造的轮子。 主要就是在index.html文件里面写一个动画样式</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-234.htm">数据传输POST心法分享，做前端的你还解决不了这个bug？</a></h4>
                <p>背景 随时随地给大家提供技术支持的葡萄又来了。这次的事情是这样的，提供demo属于是常规操作，但是前两天客户突然反馈压缩传输模块抛出异常，具体情况是压缩内容传输到服务端后无法解压。 由于代码没有发生任</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-243.htm">指针的高级运用——指针进阶</a></h4>
                <p>文章目录  学习目标 1.1 动态内存分配   引子 1.1动态分配内存函数 1.2malloc函数 1.3 calloc 函数 1.4 realloc函数 1.5 free函数 1.6 动态内存编程</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-245.htm">go语言实战&#8212;&#8211;28&#8212;&#8211;Gin、rest full api和mysql实现增删改查</a></h4>
                <p>一 Gin、rest full api和mysql实现增删改查  1 目前架构、含义以及对项目进行go mod gin_restful的项目目录。 每个目录的意思描述： 对gin_restful项目进</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-216.htm">Spark连接Hive，进行Hive数据表的读写操作</a></h4>
                <p>基础环境   Hadoop安装-1，hadoop安装-2  spark安装 Hive安装   配置  将Hive的conf目录下的hive-site-xml文件拷贝到spark的conf目录下； 将H</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-256.htm">Vue3项目中的骨架屏</a></h4>
                <p>实现场景:刚进入页面的时候,需要后端接口回传的数据,还没有回来,为了客户有更好的体验,需要设置骨架屏,效果图如下:  &nbsp;实现步骤: 1.设置通用组件骨架屏(可以设置的属性:高，宽，背景颜色，</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-203.htm">C++逆向 可变参数Hook</a></h4>
                <p>目录  C++逆向 可变参数Hook  0x00 前言： 0x01 C++可变参数：  可变参数简介 可变参数代码实战   0x02 逆向分析C++可变参数原理 0x03 printf Hook实战 </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-214.htm">SpringBoot实战数据访问整合Mybatis和Redis</a></h4>
                <p>前言 在开发中我们通常会对数据库的数据进行操作，SpringBoot对关系性和非关系型数据库的访问操作都提供了非常好的整合支持。SpringData是spring提供的一个用于简化数据库访问、支持云服</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>