<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-226.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Carson带你学设计模式：单例模式（Singleton） - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Carson带你学设计模式：单例模式（Singleton）</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/57250d86abde8d3643ed951c7ce33048.jpg" alt="Carson带你学设计模式：单例模式（Singleton）"></p> <h1>前言</h1> <p>今天Carson来全面总结最常用的设计模式 - 单例模式。</p> <blockquote> <p><strong>Carson带你学设计模式系列文章</strong><br />Carson带你学设计模式：这是一份全面 & 详细的设计模式学习指南<br />Carson带你学设计模式：单例模式（Singleton）<br />Carson带你学设计模式：简单工厂模式（SimpleFactoryPattern）<br />Carson带你学设计模式：工厂方法模式（Factory Method）<br />Carson带你学设计模式：抽象工厂模式（Abstract Factory）<br />Carson带你学设计模式：建造者模式（Builder Pattern）<br />Carson带你学设计模式：适配器模式（Adapter Pattern）<br />Carson带你学设计模式：外观模式（Facade Pattern）<br />Carson带你学设计模式：静态代理模式（Proxy Pattern）<br />Carson带你学设计模式：动态代理模式（Proxy Pattern）<br />Carson带你学设计模式：模板方法模式（Template Method）<br />Carson带你学设计模式：策略模式（Strategy Pattern）<br />Carson带你学设计模式：观察者模式（Observer）</p> </blockquote> <hr/> <h1>目录</h1> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/9d214d99bce300a6c0d90cf63312238a.jpg" alt="Carson带你学设计模式：单例模式（Singleton）"></p> <hr/> <h1>1. 实例引入</h1> <ul> <li>背景：小成有一个塑料生产厂，但里面只有一个仓库。</li> <li>目的：想用代码来实现仓库的管理</li> <li>现有做法： 建立仓库类和工人类<br /> <blockquote> <p>其中，仓库类里的quantity=商品数量；工人类里有搬运方法MoveIn(int i)和MoveOut(int i)。</p> </blockquote> </li> <li>出现的问题：通过测试发现，每次工人搬运操作都会新建一个仓库，就是货物都不是放在同一仓库，这是怎么回事呢？（看下面代码）</li> </ul> <pre><code>package scut.designmodel.SingletonPattern;   //仓库类 class StoreHouse {     private int quantity = 100;      public void setQuantity(int quantity) {         this.quantity = quantity;     }      public int getQuantity() {         return quantity;     } }  //搬货工人类 class Carrier{     public StoreHouse mStoreHouse;     public Carrier(StoreHouse storeHouse){         mStoreHouse = storeHouse;     }     //搬货进仓库     public void MoveIn(int i){         mStoreHouse.setQuantity(mStoreHouse.getQuantity()+i);     }     //搬货出仓库     public void MoveOut(int i){         mStoreHouse.setQuantity(mStoreHouse.getQuantity()-i);     } }  //工人搬运测试 public class SinglePattern {     public static void main(String[] args){         StoreHouse mStoreHouse1 = new StoreHouse();         StoreHouse mStoreHouse2 = new StoreHouse();         Carrier Carrier1 = new Carrier(mStoreHouse1);         Carrier Carrier2 = new Carrier(mStoreHouse2);          System.out.println("两个是不是同一个？");          if(mStoreHouse1.equals(mStoreHouse2)){//这里用equals而不是用 == 符号，因为 == 符号只是比较两个对象的地址             System.out.println("是同一个");         }else {             System.out.println("不是同一个");         }         //搬运工搬完货物之后出来汇报仓库商品数量         Carrier1.MoveIn(30);         System.out.println("仓库商品余量："+Carrier1.mStoreHouse.getQuantity());         Carrier2.MoveOut(50);         System.out.println("仓库商品余量："+Carrier2.mStoreHouse.getQuantity());     } }</code></pre> <p>结果：</p> <pre><code>两个是不是同一个？ 不是同一个 仓库商品余量：130 仓库商品余量：50</code></pre> <hr/> <h1>2. 单例模式介绍</h1> <h3>2.1 模式说明</h3> <p>实现1个类只有1个实例化对象 & 提供一个全局访问点</p> <h3>2.2 作用（解决的问题）</h3> <p>保证1个类只有1个对象，降低对象之间的耦合度</p> <blockquote> <p>从上面可看出：工人类操作的明显不是同一个仓库实例，而全部工人希望操作的是同一个仓库实例，即只有1个实例</p> </blockquote> <h3>2.3 工作原理</h3> <p>在Java中，我们通过使用对象（类实例化后）来操作这些类，<strong>类实例化是通过它的构造方法进行的</strong>，要是想实现一个类只有一个实例化对象，就要对类的构造方法下功夫：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/d36e386e8594d3f42d92d9ab91f43767.jpg" alt="Carson带你学设计模式：单例模式（Singleton）"></p> <p>单例模式的一般实现：（含使用步骤）</p> <pre><code> public class Singleton { //1. 创建私有变量 ourInstance（用以记录 Singleton 的唯一实例） //2. 内部进行实例化     private static Singleton ourInstance  = new  Singleton();  //3. 把类的构造方法私有化，不让外部调用构造方法实例化     private Singleton() {     } //4. 定义公有方法提供该类的全局唯一访问点 //5. 外部通过调用getInstance()方法来返回唯一的实例     public static  Singleton newInstance() {         return ourInstance;     } }</code></pre> <p>好了，单例模式的介绍和原理应该了解了吧？那么我们现在来解决上面小成出现的“仓库不是一个”的问题吧！</p> <hr/> <h1>3. 实例讲解</h1> <p>小成使用单例模式改善上面例子的代码：</p> <pre><code>package scut.designmodel.SingletonPattern;  import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock;  //单例仓库类 class StoreHouse {      //仓库商品数量     private int quantity = 100;     //自己在内部实例化     private static StoreHouse ourInstance  = new StoreHouse();;     //让外部通过调用getInstance()方法来返回唯一的实例。     public static StoreHouse getInstance() {         return ourInstance;     }      //封闭构造函数     private StoreHouse() {     }      public void setQuantity(int quantity) {         this.quantity = quantity;     }      public int getQuantity() {         return quantity;     } }   //搬货工人类 class Carrier{     public StoreHouse mStoreHouse;     public Carrier(StoreHouse storeHouse){         mStoreHouse = storeHouse;     }     //搬货进仓库     public void MoveIn(int i){         mStoreHouse.setQuantity(mStoreHouse.getQuantity()+i);     }     //搬货出仓库     public void MoveOut(int i){         mStoreHouse.setQuantity(mStoreHouse.getQuantity()-i);     } }  //工人搬运测试 public class SinglePattern {     public static void main(String[] args){         StoreHouse mStoreHouse1 = StoreHouse.getInstance();         StoreHouse mStoreHouse2 = StoreHouse.getInstance();         Carrier Carrier1 = new Carrier(mStoreHouse1);         Carrier Carrier2 = new Carrier(mStoreHouse2);          System.out.println("两个是不是同一个？");          if(mStoreHouse1.equals(mStoreHouse2)){             System.out.println("是同一个");         }else {             System.out.println("不是同一个");         }         //搬运工搬完货物之后出来汇报仓库商品数量         Carrier1.MoveIn(30);         System.out.println("仓库商品余量："+Carrier1.mStoreHouse.getQuantity());         Carrier2.MoveOut(50);         System.out.println("仓库商品余量："+Carrier2.mStoreHouse.getQuantity());     } }</code></pre> <p>结果：</p> <pre><code>两个是不是同一个？ 是同一个 仓库商品余量：130 仓库商品余量：80</code></pre> <p>从结果分析，使用了单例模式后，仓库类就只有一个仓库实例了，再也不用担心搬运工人进错仓库了！！！</p> <hr/> <h1>4. 特点</h1> <h3>4.1 优点</h3> <ul> <li>提供了对唯一实例的受控访问；</li> <li>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能；</li> <li>可以根据实际情况需要，在单例模式的基础上扩展做出双例模式，多例模式；</li> </ul> <h3>4.2 缺点</h3> <ol> <li>单例类的职责过重，里面的代码可能会过于复杂，在一定程度上违背了“单一职责原则”。</li> <li>如果实例化的对象长时间不被利用，会被系统认为是垃圾而被回收，这将导致对象状态的丢失。</li> </ol> <hr/> <h1>5. 单例模式的实现方式</h1> <ul> <li>单例模式的实现方式有多种，根据需求场景，可分为2大类、6种实现方式。具体如下：</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/902de8086a5e39f2b4f8777fb9d7c5f2.jpg" alt="Carson带你学设计模式：单例模式（Singleton）"></p> <ul> <li>下面，我将详细介绍每种单例模式的实现方式</li> </ul> <h3>a. 初始化单例类时 即 创建单例</h3> <h5>1. 饿汉式</h5> <blockquote> <p>这是 最简单的单例实现方式</p> </blockquote> <ul> <li>原理<br /> 依赖<code>JVM</code>类加载机制，保证单例只会被创建1次，即<strong>线程安全</strong></li> </ul> <blockquote> <ol> <li><code>JVM</code>在类的初始化阶段(即 在<code>Class</code>被加载后、被线程使用前)，会执行类的初始化</li> <li>在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化</li> </ol> </blockquote> <ul> <li>具体实现</li> </ul> <pre><code>class Singleton {      // 1. 加载该类时，单例就会自动被创建     private static  Singleton ourInstance  = new  Singleton();          // 2. 构造函数 设置为 私有权限     // 原因：禁止他人创建实例      private Singleton() {     }          // 3. 通过调用静态方法获得创建的单例     public static  Singleton newInstance() {         return ourInstance;     } }</code></pre> <ul> <li>应用场景<br /> 除了初始化单例类时 即 创建单例外，继续延伸出来的是：<strong>单例对象 要求初始化速度快 & 占用内存小</strong></li> </ul> <h5>2. 枚举类型</h5> <ul> <li>原理<br /> 根据枚举类型的下述特点，满足单例模式所需的<strong>创建单例、线程安全、实现简洁的需求</strong></li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/b73b79df5b6890fc3f7cbde8cae9e262.jpg" alt="Carson带你学设计模式：单例模式（Singleton）"></p> <ul> <li>实现方式</li> </ul> <pre><code>public enum Singleton{      //定义1个枚举的元素，即为单例类的1个实例     INSTANCE;      // 隐藏了1个空的、私有的 构造方法     // private Singleton () {}  }  // 获取单例的方式： Singleton singleton = Singleton.INSTANCE;</code></pre> <ul> <li>注：这是<strong>最简洁、易用</strong> 的单例实现方式，借用<code>《Effective Java》</code>的话：</li> </ul> <blockquote> <p>单元素的枚举类型已经成为实现<code>Singleton</code>的最佳方法</p> </blockquote> <hr/> <h3>b. 按需、延迟创建单例</h3> <h5>1. 懒汉式（基础实现）</h5> <ul> <li>原理</li> </ul> <p>与 饿汉式 最大的区别是：<strong>单例创建的时机</strong></p> <blockquote> <ul> <li>饿汉式：单例创建时机不可控，即类加载时<strong>自动创建</strong> 单例</li> <li>懒汉式：单例创建时机可控，即有需要时，才<strong>手动创建</strong> 单例</li> </ul> </blockquote> <ul> <li>具体实现</li> </ul> <pre><code>class Singleton {     // 1. 类加载时，先不自动创建单例    //  即，将单例的引用先赋值为 Null     private static  Singleton ourInstance  = null；      // 2. 构造函数 设置为 私有权限     // 原因：禁止他人创建实例      private Singleton() {     }          // 3. 需要时才手动调用 newInstance（） 创建 单例        public static  Singleton newInstance() {     // 先判断单例是否为空，以避免重复创建     if( ourInstance == null){         ourInstance = new Singleton();         }         return ourInstance;     } }</code></pre> <ul> <li>缺点<br /> 基础实现的懒汉式是线程不安全的，具体原因如下</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/a1a3e825874b3fad3c1d6ad4c3b75105.jpg" alt="Carson带你学设计模式：单例模式（Singleton）"></p> <ul> <li>下面，将对<strong>懒汉式</strong> 进行优化，使得适合在多线程环境下运行</li> </ul> <h5>2. 同步锁（懒汉式的改进）</h5> <ul> <li>原理<br /> 使用同步锁<code>synchronized</code>锁住 创建单例的方法 ，防止多个线程同时调用，从而避免造成单例被多次创建</li> </ul> <blockquote> <ol> <li>即，<code>getInstance（）</code>方法块只能运行在1个线程中</li> <li>若该段代码已在1个线程中运行，另外1个线程试图运行该块代码，则<strong>会被阻塞而一直等待</strong></li> <li>而在这个线程安全的方法里我们实现了单例的创建，保证了多线程模式下 单例对象的唯一性</li> </ol> </blockquote> <ul> <li>具体实现</li> </ul> <pre><code>// 写法1 class Singleton {     // 1. 类加载时，先不自动创建单例     //  即，将单例的引用先赋值为 Null     private static  Singleton ourInstance  = null；          // 2. 构造函数 设置为 私有权限     // 原因：禁止他人创建实例      private Singleton() {     }      // 3. 加入同步锁 public static synchronized Singleton getInstance(){         // 先判断单例是否为空，以避免重复创建         if ( ourInstance == null )             ourInstance = new Singleton();         return ourInstance;     } }   // 写法2 // 该写法的作用与上述写法作用相同，只是写法有所区别 class Singleton{       private static Singleton instance = null;      private Singleton(){ }      public static Singleton getInstance(){         // 加入同步锁         synchronized(Singleton.class) {             if (instance == null)                 instance = new Singleton();         }         return instance;     } }</code></pre> <ul> <li>缺点<br /> 每次访问都要进行线程同步（即 调用<code>synchronized</code>锁)，造成过多的同步开销（加锁 = 耗时、耗能）</li> </ul> <blockquote> <p>实际上只需在第1次调用该方法时才需要同步，一旦单例创建成功后，就没必要进行同步</p> </blockquote> <h5>3. 双重校验锁（懒汉式的改进）</h5> <ul> <li> <p>原理<br /> 在同步锁的基础上，添加1层<code>if</code>判断：若单例已创建，则不需再执行加锁操作就可获取实例，从而提高性能</p> </li> <li> <p>具体实现</p> </li> </ul> <pre><code>class Singleton {     private static  Singleton ourInstance  = null；      private Singleton() {     }          public static  Singleton newInstance() {      // 加入双重校验锁     // 校验锁1：第1个if     if( ourInstance == null){  // ①      synchronized (Singleton.class){ // ②       // 校验锁2：第2个 if       if( ourInstance == null){           ourInstance = new Singleton();           }       }   }         return ourInstance;    } }  // 说明 // 校验锁1：第1个if // 作用：若单例已创建，则直接返回已创建的单例，无需再执行加锁操作 // 即直接跳到执行 return ourInstance  // 校验锁2：第2个 if  // 作用：防止多次创建单例问题 // 原理   // 1. 线程A调用newInstance()，当运行到②位置时，此时线程B也调用了newInstance()   // 2. 因线程A并没有执行instance = new Singleton();，此时instance仍为空，因此线程B能突破第1层 if 判断，运行到①位置等待synchronized中的A线程执行完毕   // 3. 当线程A释放同步锁时，单例已创建，即instance已非空   // 4. 此时线程B 从①开始执行到位置②。此时第2层 if 判断 = 为空（单例已创建），因此也不会创建多余的实例</code></pre> <ul> <li>缺点<br /> 实现复杂 = 多种判断，易出错</li> </ul> <h5>4. 静态内部类</h5> <ul> <li>原理<br /> 根据<strong>静态内部类</strong> 的特性，同时解决了按需加载、线程安全的问题，同时实现简洁</li> </ul> <blockquote> <ol> <li>在静态内部类里创建单例，在装载该内部类时才会去创建单例</li> <li>线程安全：类是由<code>JVM</code>加载，而<code>JVM</code>只会加载1遍，保证只有1个单例</li> </ol> </blockquote> <ul> <li>具体实现</li> </ul> <pre><code>class Singleton {          // 1. 创建静态内部类     private static class Singleton2 {        // 在静态内部类里创建单例       private static  Singleton ourInstance  = new Singleton()；     }      // 私有构造函数     private Singleton() {     }          // 延迟加载、按需创建     public static  Singleton newInstance() {         return Singleton2.ourInstance;     }  }  // 调用过程说明：       // 1. 外部调用类的newInstance()        // 2. 自动调用Singleton2.ourInstance        // 2.1 此时单例类Singleton2得到初始化        // 2.2 而该类在装载 & 被初始化时，会初始化它的静态域，从而创建单例；        // 2.3 由于是静态域，因此只会JVM只会加载1遍，Java虚拟机保证了线程安全性       // 3. 最终只创建1个单例</code></pre> <hr/> <h1>6. 总结</h1> <ul> <li>本文主要对<strong>单例模式</strong> 进行了全面介绍，包括原理 & 实现方式</li> <li>对于实现方式，此处作出总结</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/12a4f7782194388eea91642071647320.jpg" alt="Carson带你学设计模式：单例模式（Singleton）"></p> <hr/> <h1>欢迎关注Carson_Ho的CSDN博客 与 公众号！</h1> <p>博客链接：https://carsonho.blog.csdn.net/</p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-225.htm">Spring的3级缓存和循环引用的理解_在线工具</a></p>
                                        <p>下一个：<a href="/html/category/article-227.htm">Spring Boot四大神器之CLI</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-6105.htm">动物医院取什么名字形容敬业的（动物医院是干嘛的）</a></h4>
                <p>摘要：       本篇文章给大家谈谈动物医院取什么名字形容敬业的，以及动物医院是干嘛的对应的知识点，希望对各位有所帮助，不要忘了收藏本站喔。本文目录一览：1、医院起名大全2、...        本</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2239.htm">【面试普通人VS高手系列】HashMap是怎么解决哈希冲突的？</a></h4>
                <p>常用数据结构基本上是面试必问的问题，比如HashMap、LinkList、ConcurrentHashMap等。 关于HashMap，有个学员私信了我一个面试题说： “HashMap是怎么解决哈希冲突</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4402.htm">狗粮品牌有哪些品牌 狗粮品牌有哪些品牌好</a></h4>
                <p>摘要：       大家好，今天小编关注到一个比较有意思的话题，就是关于狗粮品牌有哪些品牌的问题，于是小编就整理了2个相关介绍狗粮品牌有哪些品牌的解答，让我们一起看看吧。狗粮哪几个品牌比较好？狗粮哪个</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4443.htm">中国农大动物医院哪个医生好 中国农大动物医院哪个医生好一点</a></h4>
                <p>摘要：       大家好，今天小编关注到一个比较有意思的话题，就是关于中国农大动物医院哪个医生好的问题，于是小编就整理了4个相关介绍中国农大动物医院哪个医生好的解答，让我们一起看看吧。北京农大动物医</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-6016.htm">宠物粮食排行榜前十 宠物粮食排行榜前十名</a></h4>
                <p>摘要：       大家好，今天小编关注到一个比较有意思的话题，就是关于宠物粮食排行榜前十的问题，于是小编就整理了5个相关介绍宠物粮食排行榜前十的解答，让我们一起看看吧。宠物食物？宠物粮有哪些比较靠谱</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4293.htm">免费领养宠物的平台小狗有哪些（免费领养宠物的app有哪些）</a></h4>
                <p>摘要：       本篇文章给大家谈谈免费领养宠物的平台小狗有哪些，以及免费领养宠物的app有哪些对应的知识点，希望对各位有所帮助，不要忘了收藏本站喔。本文目录一览：1、家中有一只狗想找新主人上哪..</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4322.htm">宠物粮食品牌前十排名榜单 宠物粮食品牌前十排名榜单图片</a></h4>
                <p>摘要：       大家好，今天小编关注到一个比较有意思的话题，就是关于宠物粮食品牌前十排名榜单的问题，于是小编就整理了4个相关介绍宠物粮食品牌前十排名榜单的解答，让我们一起看看吧。什么品牌鸽粮性价比</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4549.htm">深圳宠物领养中心官网（深圳宠物领养机构）</a></h4>
                <p>摘要：       今天给各位分享深圳宠物领养中心官网的知识，其中也会对深圳宠物领养机构进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、那个,我想问下深圳的狗.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2823.htm">jQuery实现呼吸灯轮播图</a></h4>
                <p>jQuery实现呼吸灯轮播图  jQuery实现呼吸灯轮播图    jQuery实现呼吸灯轮播图 &lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;he</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4323.htm">四川红烧鱼的做法 最正宗的做法(四川红烧鱼怎么做好吃又简单视频教程)</a></h4>
                <p>各位同学好，相信还有很多人对于正宗四川怎么做的相关问题不太了解，今天给各位分享一下关于正宗四川红烧鱼怎么做的解答，希望可以帮助到大家，下面一起来看看吧！！本文目录导读：正宗四川红烧鱼怎么做正宗四川红烧</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">36</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>