<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-218.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>【SpringMVC笔记02】SpringMVC接收请求参数的几种方式 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">【SpringMVC笔记02】SpringMVC接收请求参数的几种方式</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="htmledit_views"> <blockquote> <p><strong>这篇文章，主要介绍SpringMVC框架中接收请求参数的几种方式。</strong></p> </blockquote> <p id="main-toc"><strong>目录</strong></p> <p id="%E4%B8%80%E3%80%81SpringMVC%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-toc" style="margin-left:0px;">一、SpringMVC接收请求参数</p> <p id="1.1%E3%80%81%E9%80%9A%E8%BF%87%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6-toc" style="margin-left:40px;">1.1、通过方法参数接收</p> <p id="1.2%E3%80%81%E9%80%9A%E8%BF%87HttpServletRequest%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0-toc" style="margin-left:40px;">1.2、通过HttpServletRequest接收参数</p> <p id="1.3%E3%80%81%40RequestParam%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0-toc" style="margin-left:40px;">1.3、@RequestParam注解获取参数</p> <p id="1.4%E3%80%81%E9%80%9A%E8%BF%87JavaBean%E5%AF%B9%E8%B1%A1%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0-toc" style="margin-left:40px;">1.4、通过JavaBean对象接收参数</p> <p id="1.5%E3%80%81%E9%80%9A%E8%BF%87%40PathVariable%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0-toc" style="margin-left:40px;">1.5、通过@PathVariable注解获取参数</p> <hr id="hr-toc"/> <h1>一、SpringMVC接收请求参数</h1> <p>这篇文章主要总结一下SpringMVC框架中，如何接收HTTP请求的参数，主要有如下几种常见的方式。</p> <h2 id="1.1%E3%80%81%E9%80%9A%E8%BF%87%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6">1.1、通过方法参数接收</h2> <p>SpringMVC框架里面，我们可以直接在【Controller】层对应的方法参数里面，编写我们需要接收的参数名称，这样SpringMVC框架就会自动将我们的请求参数和方法参数进行映射绑定。</p> <ul> <li><strong>编写如下测试案例。</strong></li> </ul> <pre><code class="language-java">@Controller public class ParamController {          // 请求参数和方法参数自动映射     @RequestMapping("/param01")     public String param01(String username, String password) {         System.out.println("username=" + username);         System.out.println("password=" + password);         return "hello";     }      }</code></pre> <ul> <li><strong>启动工程，浏览器访问：【http://localhost:8080/springmvc/param01】，然后查看控制台输出结果。</strong></li> <li><strong>访问时候携带参数：【http://localhost:8080/springmvc/param01?username=root&password=123456】。</strong></li> </ul> <p><img fetchpriority="high" decoding="async" alt="" height="193" src="http://img.555519.xyz/uploads/20230224/82379e43f1833c864a5a8eae5e09f2f4.jpg"></p> <ul> <li> <strong>SpringMVC中，如果接收的参数名称和方法参数名称不同，那么对应的方法参数默认就是null。</strong>&nbsp;</li> </ul> <h2 id="1.2%E3%80%81%E9%80%9A%E8%BF%87HttpServletRequest%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0">1.2、通过HttpServletRequest接收参数</h2> <p>在SpringMVC框架中，我们的方法参数里面可以直接使用servlet中的请求对象，要使用servlet的相关api，那么我们需要引入【servlet-api】的依赖，如下所示：</p> <ul> <li><strong>添加【servlet-api】依赖，目的是为了可以在项目中使用servlet相关的类代码。</strong></li> </ul> <pre><code class="language-XML"><!-- 引入servlet-api依赖 --> <dependency>   <groupId>javax.servlet</groupId>   servlet-api</artifactId>   <version>2.5</version>   <!-- 作用域设置为已被提供: 表示servlet-api依赖会被Tomcat容器提供，   打包时候不会再将servlet-api加入到里面 -->   <scope>provided</scope> </dependency></code></pre> <ul> <li><strong>通过【HttpServletRequest】获取请求参数。</strong></li> </ul> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param02")     public String param02(HttpServletRequest request) {         System.out.println("username=" + request.getParameter("username"));         System.out.println("password=" + request.getParameter("password"));         return "hello";     } }</code></pre> <ul> <li><strong>这种获取参数的方式就是最原始的，直接从HTTP请求里面获取。</strong></li> </ul> <h2 id="1.3%E3%80%81%40RequestParam%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0">1.3、@RequestParam注解获取参数</h2> <p>通过【1.1】的方式获取参数时候，如果我们的前端参数名称和后端方法参数名称不一致，就无法获取到对应的参数值，为了解决前后端参数名称不一致的问题，SpringMVC框架提供了<span style="color:#fe2c24;"><strong>【@RequestParam】</strong></span>注解，解决参数名称不一致的问题。</p> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param03")     public String param03(@RequestParam("uname") String username, @RequestParam("pass") String password) {         System.out.println("username=" + username);         System.out.println("password=" + password);         return "hello";     }      }</code></pre> <ul> <li><strong>浏览器访问地址：【http://localhost:8080/springmvc/param01?<span style="color:#fe2c24;">uname</span>=root&<span style="color:#fe2c24;">pass</span>=123456】。</strong></li> <li><strong>注意：浏览器的请求参数名称是uname、pass，而后端方法参数名称是：username、password。</strong></li> </ul> <p><img decoding="async" alt="" class="left" height="316" src="http://img.555519.xyz/uploads/20230224/95f05d8ff548cd84da63d04747e2676f.jpg"></p> <h2 id="1.4%E3%80%81%E9%80%9A%E8%BF%87JavaBean%E5%AF%B9%E8%B1%A1%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0">1.4、通过JavaBean对象接收参数</h2> <p>存在这样一种情况，当我们的前端参数数量特别多的时候，如果按照方法参数来接收，那么此时一个方法里面可能就需要写几十个参数名称，显然这样是不合理的，解决这个问题的办法就是通过一个对象来接收前端所有的参数，这个对象就是我们说的一个JavaBean，也就是pojo实体类对象。</p> <ul> <li><strong>创建【User】实体类。</strong></li> </ul> <pre><code class="language-java">public class User {     private String username;     private String password;      public String getUsername() {         return username;     }     public void setUsername(String username) {         this.username = username;     }     public String getPassword() {         return password;     }     public void setPassword(String password) {         this.password = password;     } }</code></pre> <ul> <li><strong>通过【Bean】对象接收参数。</strong></li> </ul> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param04")     public String param04(User user) {         System.out.println("username=" + user.getUsername());         System.out.println("password=" + user.getPassword());         return "hello";     }  }</code></pre> <ul> <li><strong>浏览器访问：【http://localhost:8080/springmvc/param04?username=root&password=123456】。</strong></li> <li><strong>可以发现，后端依然可以获取到对应的参数值。</strong></li> </ul> <p><img decoding="async" alt="" class="left" height="283" src="http://img.555519.xyz/uploads/20230224/1a8314e82c17e19b39607e0eaea0a6b3.jpg"></p> <h2 id="1.5%E3%80%81%E9%80%9A%E8%BF%87%40PathVariable%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0">1.5、通过@PathVariable注解获取参数</h2> <p>在Restful风格的HTTP请求里面，有些请求参数会直接放在请求路径里面，并且没有参数名称，对于这种在请求路径中并且没有参数名称的请求参数，SpringMVC框架提供了<span style="color:#fe2c24;"><strong>【@PathVariable】</strong></span>注解进行获取，这种获取参数的方式，叫做：<strong>【路径参数】</strong>。</p> <ul> <li><strong>路径参数，类似于：【/api/param01/<span style="color:#fe2c24;">root</span>/<span style="color:#fe2c24;">123456</span>】。（红色字体表示参数值，其余表示请求路径）。</strong></li> <li><strong>SpringMVC里面，路径参数语法格式如下：</strong></li> </ul> <blockquote> <p><strong>路径参数：【/请求路径/<span style="color:#fe2c24;">{参数名称1}</span>/<span style="color:#fe2c24;">{参数名称2}</span>】</strong></p> <ul> <li><strong>路径参数需要使用【{}】花括号括起来，参数名称任意。</strong></li> </ul> </blockquote> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param05/{username}/{password}")     public String param05(@PathVariable String username, @PathVariable String password) {         System.out.println("username=" + username);         System.out.println("password=" + password);         return "hello";     }  }</code></pre> <ul> <li><strong>路径参数中的参数名称需要和方法参数名称一致，这样SpringMVC才能够将其进行映射；</strong></li> <li><strong>也可以通过指定【@PathVariable】注解的【value】属性值来关联路径参数。</strong></li> </ul> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param05/{uname}/{pass}") {     public String param05(@PathVariable("uname") String username, @PathVariable("pass") String password) {         System.out.println("username=" + username);         System.out.println("password=" + password);         return "hello";     }  }</code></pre> <ul> <li><strong>上面两种方式都可以，但是实际开发中，还是采用第二种，尽量指定【@PathVariable】注解的【value】属性值，因为这样更容易理解，并且可以确保不出错。</strong></li> </ul> <p><img loading="lazy" decoding="async" alt="" class="left" height="468" src="http://img.555519.xyz/uploads/20230224/68c7aed9b9e3022a169e1c263e7d4c20.jpg"></p> <blockquote> <p><strong>综上，这篇文章结束了，主要介绍SpringMVC框架中接收请求参数的几种常见方式。</strong></p> </blockquote> <p><strong>【源代码地址：<a class="link-info" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://gitee.com/zhuyoubin/ssm_code/tree/master/spring-mvc/springmvc-demo02"  title="https://gitee.com/zhuyoubin/ssm_code/tree/master/spring-mvc/springmvc-demo02" rel="nofollow">https://gitee.com/zhuyoubin/ssm_code/tree/master/spring-mvc/springmvc-demo02】。</strong></p> </p></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-217.htm">Vuex入门mapState, mapGetters, mapMutations, mapActions详解终结篇带源码</a></p>
                                        <p>下一个：<a href="/html/category/article-219.htm">Golang学习之网络参数请求-Query Params及Path Variables的区别及底层实现</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4402.htm">狗粮品牌有哪些品牌 狗粮品牌有哪些品牌好</a></h4>
                <p>摘要：       大家好，今天小编关注到一个比较有意思的话题，就是关于狗粮品牌有哪些品牌的问题，于是小编就整理了2个相关介绍狗粮品牌有哪些品牌的解答，让我们一起看看吧。狗粮哪几个品牌比较好？狗粮哪个</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2824.htm">如何使用线程池执行定时任务？</a></h4>
                <p>在 Java 语言中，有两个线程池可以执行定时任务：ScheduledThreadPool 和 SingleThreadScheduledExecutor，其中 SingleThreadSchedul</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-6061.htm">动物打预防针去哪里打针好点（给动物打疫苗的官方部门）</a></h4>
                <p>摘要：       今天给各位分享动物打预防针去哪里打针好点的知识，其中也会对给动物打疫苗的官方部门进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、去哪里给猫.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-6105.htm">动物医院取什么名字形容敬业的（动物医院是干嘛的）</a></h4>
                <p>摘要：       本篇文章给大家谈谈动物医院取什么名字形容敬业的，以及动物医院是干嘛的对应的知识点，希望对各位有所帮助，不要忘了收藏本站喔。本文目录一览：1、医院起名大全2、...        本</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1926.htm">分享C++三种类型new类型的运算符使用详情_C 语言_</a></h4>
                <p>目录  1.new操作符 2.::operator new  2.1原始调用 2.2重载1 2.3重载2  3.place new     1.new操作符 new operator，平时用的最多的n</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4586.htm">猫体外驱虫用什么药比较好知乎（猫体外驱虫滴在哪里）</a></h4>
                <p>摘要：       本篇文章给大家谈谈猫体外驱虫用什么药比较好知乎，以及猫体外驱虫滴在哪里对应的知识点，希望对各位有所帮助，不要忘了收藏本站喔。本文目录一览：1、猫体外驱虫用什么药比较好?...   </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3424.htm">用gcc查看c源文件的汇编代码   C++性能优化技术导论</a></h4>
                <p>1  用gcc查看c源文件的汇编代码    &nbsp;      gcc -S -o xx.s 2.c &nbsp; http://blog.csdn.net/heiyeshuwu/article/</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2240.htm">webpack 执行npm run 时，因为版本依赖报的那些错</a></h4>
                <p>环境介绍 webpack 4.34.0 webpack-dev-server 3.7.0 报错 Error: invalid "instanceof" keyword value Promise   </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3755.htm">Kotlin中的扩展函数（静态分派）</a></h4>
                <p>扩展函数  扩展函数可以在已有类中添加新的方法，不会对原类做修改   举例1  对Context进行扩展showToast方法，可以在Fragment、Activity、Application中弹出T</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3121.htm">windows 平台下编译openssl 最新版本-3.0.5</a></h4>
                <p>根据openssl 官方仓库的描述，他们不提供二进制版本的文件，需要我们自己针对不同的平台打包 环境配置 安装好以下软件，并配置好环境变量  Perl Nasm namke.exe cl.exe 最后</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">36</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>