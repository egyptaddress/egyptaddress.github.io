<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-225.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Spring的3级缓存和循环引用的理解_在线工具 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Spring的3级缓存和循环引用的理解_在线工具</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<blockquote> <p>此处是我自己的一个理解，防止以后忘记，如若那个地方理解不对，欢迎指出。</p> </blockquote> <h1 id="一背景">一、背景</h1> <p>在我们写代码的过程中一般会使用 <code>@Autowired</code> 来注入另外的一个对象，但有些时候发生了<code> 循环依赖</code>，但是我们的代码没有报错，这个是什么原因呢？</p> <h1 id="二前置知识">二、前置知识</h1> <h2 id="1考虑循环依赖的类型">1、考虑循环依赖的类型</h2> <p>此处我们考虑 <code>单例</code> + <code>@Autowired</code> 的循环依赖，不考虑使用<code>构造器注入</code>或<code>原型作用域的Bean</code>的注入。</p> <h2 id="2代理对象何时创建">2、代理对象何时创建</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/4f2efb146cccd30df758f97759072b97.jpg" alt="Spring的3级缓存和循环引用的理解_在线工具"><br /><strong>注意：</strong><br /> 正常情况下，即没有发生 循环依赖的时候，<code>aop增强</code>是在 bean 初始化完成之后的 <code>BeanPostProcessor#postProcessAfterInitialization</code>方法中，但是如果有循环依赖发生的话，就需要提前，在 <code>getEarlyBeanReference</code>中提前创建代理对象。</p> <h2 id="33级缓存中保存的是什么对象">3、3级缓存中保存的是什么对象</h2> <table> <thead> <tr> <th>缓存字段名</th> <th>缓存级别</th> <th>数据类型</th> <th>解释</th> </tr> </thead> <tbody> <tr> <td>singletonObjects</td> <td>1</td> <td>Map&lt;String, Object&gt;</td> <td>保存的是完整的Bean，即可以使用的Bean</td> </tr> <tr> <td>earlySingletonObjects</td> <td>2</td> <td>Map&lt;String, Object&gt;</td> <td>保存的是半成品的Bean,即属性还没有设置，没有完成初始化工作</td> </tr> <tr> <td>singletonFactories</td> <td>3</td> <td>Map&lt;String, ObjectFactory&lt;?&gt;&gt;</td> <td>主要是生成Bean，然后放到二级缓存中</td> </tr> </tbody> </table> <p><strong>注意：</strong><br /><code>ObjectFactory#getObject()</code> 每调用一次，都会产生一个新的对象或返回旧对象，取决于是否存在代理等等。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/4dbcae99ba855144b53b8240a4d82a6c.jpg" alt="Spring的3级缓存和循环引用的理解_在线工具"></p> <h2 id="4从3级缓存中获取对象">4、从3级缓存中获取对象</h2> <blockquote> <p>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String, boolean)</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/39e95a555cf81b430f300e15e1900194.jpg" alt="Spring的3级缓存和循环引用的理解_在线工具"></p> <h2 id="5-spring-bean的简化创建过程">5 Spring Bean的简化创建过程</h2> <h3 id="1实例化一个bean">1、实例化一个bean</h3> <pre><code class="language-java">Object bean = instanceWrapper.getWrappedInstance(); </code></pre> <p>实例化Bean 即 new Bean()</p> <h3 id="2加入到三级缓存中">2、加入到三级缓存中</h3> <pre><code class="language-java">addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean)); </code></pre> <p>加入到三级缓存中是有一些条件判断的，一般都会是成立的，此处认为需要加入到三级缓存。</p> <h3 id="3设置bean的属性">3、设置bean的属性</h3> <pre><code class="language-java">populateBean(beanName, mbd, instanceWrapper); </code></pre> <p>第一步实例化了bean，但是此时是没有填充需要注入的属性的，通过这一步进行属性的填充。</p> <h3 id="4初始化bean">4、初始化bean</h3> <pre><code class="language-java">Object exposedObject = initializeBean(beanName, exposedObject, mbd); </code></pre> <p>初始化Bean，执行初始化方法、Aware回调、执行 BeanPostProcessor#postProcessAfterInitialization 方法 (<code>aop的增强</code>是在这个里面实现的)</p> <p>如果有<code>循环引用</code>的话，则aop的增强需要提前。</p> <h3 id="5加入到一级缓存中">5、加入到一级缓存中</h3> <pre><code class="language-java">addSingleton(......) </code></pre> <h1 id="三理解">三、理解</h1> <pre><code class="language-java">@Component class A {     @Autowired 	private B b; }  @Transaction (存在代理) @Component class B{     @Autowired 	private A a; } </code></pre> <h2 id="1假设只有singletonobjects和earlysingletonobjects可否完成循环依赖">1、假设只有singletonObjects和earlySingletonObjects可否完成循环依赖</h2> <table> <thead> <tr> <th>缓存字段名</th> <th>缓存级别</th> <th>数据类型</th> <th>解释</th> </tr> </thead> <tbody> <tr> <td>singletonObjects</td> <td>1</td> <td>Map&lt;String, Object&gt;</td> <td>保存的是完整的Bean，即可以使用的Bean</td> </tr> <tr> <td>earlySingletonObjects</td> <td>2</td> <td>Map&lt;String, Object&gt;</td> <td>保存的是半成品的Bean,即属性还没有设置，没有完成初始化工作</td> </tr> </tbody> </table> <p>此时需要获取 <code>B</code>的实例，即 <code>getBean("b")</code>，由上方了解到的 Bean 的简化流程可知<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/3853546a0bcb2a1f9e4ed8d122b1b3e2.jpg" alt="Spring的3级缓存和循环引用的理解_在线工具"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/04a8ea3ecf5d146feb995c9a078bf6c2.jpg" alt="Spring的3级缓存和循环引用的理解_在线工具"><br /> 由上图可知，<code>对象存在代理时</code>，2级缓存无法解决问题。因为代理对象是通过<code>BeanPostProcessor</code>来完成，<code>是在设置属性之后才产生的代理对象</code>。</p> <p>此时可能有人会说，那如果我在构建完B的实例后，就立马进行Aop代理，这样不就解决问题了吗？那假设A和B之间没有发生循环依赖，这样设计会不会不优雅？</p> <h2 id="2假设只有singletonobjects和singletonfactories可否完成循环依赖">2、假设只有singletonObjects和singletonFactories可否完成循环依赖</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/76875e30067a8affc5fa72b2adb05fe8.jpg" alt="Spring的3级缓存和循环引用的理解_在线工具"><br /> 由图中可知也是不可以实现的。</p> <h2 id="33级缓存如何实现">3、3级缓存如何实现</h2> <h3 id="1解决代理问题">1、解决代理问题</h3> <p>因为默认情况下，代理是通过<code>BeanPostProcessor</code>来完成，为了解决代理，就需要提前创建代理，那么这个代理的创建就放到3级缓存中来进行创建。</p> <pre><code class="language-java">addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean)); </code></pre> <p><code>getEarlyBeanReference</code> 此方法会返回代理bean</p> <h3 id="2解决单例通过第3级缓存多次获取的值不一致">2、解决单例通过第3级缓存多次获取的值不一致</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/39e95a555cf81b430f300e15e1900194.jpg" alt="Spring的3级缓存和循环引用的理解_在线工具"><br /> 从上图中可知，对象是先从 <code>一级-&gt;二级-&gt;三级缓存</code> 这样查找，当三级缓存产生了对象后就放入二级缓存中缓存起来，同时删除三级缓存。</p> <h3 id="3流程图">3、流程图</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/0e9f0c7f4cfa3104d594bf25274378bd.jpg" alt="Spring的3级缓存和循环引用的理解_在线工具"></p> <h1 id="四总结">四、总结</h1> <p>1、一级缓存 <code>singletonObjects</code> 存放可以使用的单例。<br /> 2、二级缓存<code>earlySingletonObjects</code>存放的是早期的Bean，即是半成品，此时还是不可用的。<br /> 3、三级缓存<code>singletonFactories</code> 是一个对象工厂，用于创建对象，然后放入到二级缓存中。同时对象如果有Aop代理的话，这个对对象工厂返回的就是代理对象。</p> <p>那可以在<code>earlySingletonObjects</code>中直接存放创建后的代理对象吗？这样是可以解决问题，但是设计可能就不合理了。因为在Spring中 <code>Aop</code>的代理是在对象完成之后创建的。而且如果没有发生循环依赖的话，有必要提前创建代理对象吗？分成三级缓存，代码结构更清楚，更合理。</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-224.htm">jackson   json对象、实体类相互转换</a></p>
                                        <p>下一个：<a href="/html/category/article-226.htm">Carson带你学设计模式：单例模式（Singleton）</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-250.htm">配置tomcat，修改对项目的访问路径</a></h4>
                <p>在Idea中对项目访问路径的配置题  &nbsp;当将wai包直接部署到tomcat中时，如何修改对项目的访问路径？ 两种方案： 1、首先将tomcat的目录下的webapps/ROOT目录下的所有内</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1321.htm">Spring Boot的依赖配置文件的解析</a></h4>
                <p>SpringBoot笔记-day01 在pom.xml中 &lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&l</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-235.htm">lombok和JPA的死递归</a></h4>
                <p>这是一个Bug JPA我觉得是一个封装的很棒的框架，至于说很臃肿这个事，我觉得在需求需要很多复杂查询的时候，不适合用JPA。因为它的封装太棒了，以致于增强了表和实体类之间的耦合。不过在一些简单查询的部</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-257.htm">JavaScript如何将字符串转换为分层对象</a></h4>
                <p>假设我们有一种特殊的字符串，其中包含成对的字符，像这样- const&nbsp;str&nbsp;=&nbsp;"AABBCCDDEE"; 我们需要基于此字符串构造一个对象，该字符串应如下所示： co</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-225.htm">Spring的3级缓存和循环引用的理解_在线工具</a></h4>
                <p>此处是我自己的一个理解，防止以后忘记，如若那个地方理解不对，欢迎指出。  一、背景 在我们写代码的过程中一般会使用 @Autowired 来注入另外的一个对象，但有些时候发生了 循环依赖，但是我们的代</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1629.htm">原生js实现楼层滚动（界面滑动）效果</a></h4>
                <p>截取自自己写的代码 思路很简单，就是改编自回到顶部效果，控制滚动条位移到指定位置  先有个布局，四个触发li和四张图片 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;h</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-230.htm">Vuex的各个模块封装</a></h4>
                <p>一、各个模块的作用：   state 用来数据共享数据存储  mutation 用来注册改变数据状态（同步）  getters 用来对共享数据进行过滤并计数操作  action 解决异步改变共享数据（</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1912.htm">远程服务器连接（密钥验证，跳板机）</a></h4>
                <p>服务器远程连接 天下大事 必作于细 rsa密钥配置 本地设备 利用git生成一对rsa公私密钥 keygen windows的话，默认生成目录在C:\Users\用户名.sshid_rsa为私钥文件i</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-240.htm">SpringBoot配置跨域Cors</a></h4>
                <p>01、同源策略 同源策略[same origin policy]是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。 同源策略是浏览器安全的基石。  什么是源 源[or</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-260.htm">Vue中 Vue.prototype 详解及使用</a></h4>
                <p>我们可能会在很多组件里用到数据/实用工具，但是不想污染全局作用域。这种情况下，可以通过在原型上定义它们使其在每个 Vue 的实例中可用。 1. 基本示例 在main.js中添加一个变量到 Vue.pr</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>