<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-171.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>netty系列之:netty中的核心MessageToMessage编码器 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">netty系列之:netty中的核心MessageToMessage编码器</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div class="toc"> <div class="toc-container-header">目录</div> <ul> <li><a href="#%E7%AE%80%E4%BB%8B" rel="nofollow">简介</a></li> <li><a href="#%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B" rel="nofollow">框架简介</a></li> <li><a href="#messagetomessageencoder" rel="nofollow">MessageToMessageEncoder</a></li> <li><a href="#messagetomessagedecoder" rel="nofollow">MessageToMessageDecoder</a></li> <li><a href="#messagetomessagecodec" rel="nofollow">MessageToMessageCodec</a></li> <li><a href="#%E6%80%BB%E7%BB%93" rel="nofollow">总结</a></li> </ul> </div> <h1 id="简介">简介</h1> <p>在netty中我们需要传递各种类型的消息，这些message可以是字符串，可以是数组，也可以是自定义的对象。不同的对象之间可能需要互相转换，这样就需要一个可以自由进行转换的转换器，为了统一编码规则和方便用户的扩展，netty提供了一套消息之间进行转换的框架。本文将会讲解这个框架的具体实现。</p> <h1 id="框架简介">框架简介</h1> <p>netty为消息和消息之间的转换提供了三个类，这三个类都是抽象类，分别是MessageToMessageDecoder,MessageToMessageEncoder和MessageToMessageCodec。</p> <p>先来看下他们的定义：</p> <pre><code>public abstract class MessageToMessageEncoder&lt;I&gt; extends ChannelOutboundHandlerAdapter</code></pre> <pre><code>public abstract class MessageToMessageDecoder&lt;I&gt; extends ChannelInboundHandlerAdapter</code></pre> <pre><code>public abstract class MessageToMessageCodec&lt;INBOUND_IN, OUTBOUND_IN&gt; extends ChannelDuplexHandler</code></pre> <p>MessageToMessageEncoder继承自ChannelOutboundHandlerAdapter，负责向channel中写消息。</p> <p>MessageToMessageDecoder继承自ChannelInboundHandlerAdapter，负责从channel中读取消息。</p> <p>MessageToMessageCodec继承自ChannelDuplexHandler，它是一个双向的handler，可以从channel中读取消息，也可以向channel中写入消息。</p> <p>有了这三个抽象类，我们再看下这三个类的具体实现。</p> <h1 id="messagetomessageencoder">MessageToMessageEncoder</h1> <p>先看一下消息的编码器MessageToMessageEncoder，编码器中最重要的方法就是write,看下write的实现：</p> <pre><code>    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {         CodecOutputList out = null;         try {             if (acceptOutboundMessage(msg)) {                 out = CodecOutputList.newInstance();                 @SuppressWarnings("unchecked")                 I cast = (I) msg;                 try {                     encode(ctx, cast, out);                 } finally {                     ReferenceCountUtil.release(cast);                 }                  if (out.isEmpty()) {                     throw new EncoderException(                             StringUtil.simpleClassName(this) + " must produce at least one message.");                 }             } else {                 ctx.write(msg, promise);             }         } catch (EncoderException e) {             throw e;         } catch (Throwable t) {             throw new EncoderException(t);         } finally {             if (out != null) {                 try {                     final int sizeMinusOne = out.size() - 1;                     if (sizeMinusOne == 0) {                         ctx.write(out.getUnsafe(0), promise);                     } else if (sizeMinusOne &gt; 0) {                         if (promise == ctx.voidPromise()) {                             writeVoidPromise(ctx, out);                         } else {                             writePromiseCombiner(ctx, out, promise);                         }                     }                 } finally {                     out.recycle();                 }             }         }     }</code></pre> <p>write方法接受一个需要转换的原始对象msg，和一个表示channel读写进度的ChannelPromise。</p> <p>首先会对msg进行一个类型判断，这个判断方法是在acceptOutboundMessage中实现的。</p> <pre><code>    public boolean acceptOutboundMessage(Object msg) throws Exception {         return matcher.match(msg);     }</code></pre> <p>这里的matcher是一个TypeParameterMatcher对象，它是一个在MessageToMessageEncoder构造函数中初始化的属性：</p> <pre><code>    protected MessageToMessageEncoder() {         matcher = TypeParameterMatcher.find(this, MessageToMessageEncoder.class, "I");     }</code></pre> <p>这里的I就是要匹配的msg类型。</p> <p>如果不匹配，则继续调用<code>ctx.write(msg, promise);</code> 将消息不做任何转换的写入到channel中，供下一个handler调用。</p> <p>如果匹配成功，则会调用核心的encode方法:<code>encode(ctx, cast, out);</code></p> <p>注意，encode方法在MessageToMessageEncoder中是一个抽象方法，需要用户在继承类中自行扩展。</p> <p>encode方法实际上是将msg对象转换成为要转换的对象，然后添加到out中。这个out是一个list对象，具体而言是一个CodecOutputList对象，作为一个list，out是一个可以存储多个对象的列表。</p> <p>那么out是什么时候写入到channel中去的呢？</p> <p>别急，在write方法中最后有一个finally代码块，在这个代码块中，会将out写入到channel里面。</p> <p>因为out是一个List，可能会出现out中的对象部分写成功的情况，所以这里需要特别处理。</p> <p>首先判断out中是否只有一个对象，如果是一个对象，那么直接写到channel中即可。如果out中多于一个对象，那么又分成两种情况，第一种情况是传入的promise是一个voidPromise，那么调用writeVoidPromise方法。</p> <p>什么是voidPromise呢?</p> <p>我们知道Promise有多种状态，可以通过promise的状态变化了解到数据写入的情况。对于voidPromise来说，它只关心一种失败的状态，其他的状态都不关心。</p> <p>如果用户关心promise的其他状态，则会调用writePromiseCombiner方法，将多个对象的状态合并为一个promise返回。</p> <p>事实上，在writeVoidPromise和writePromiseCombiner中，out中的对象都是一个一个的取出来，写入到channel中的,所以才会生成多个promise和需要将promise进行合并的情况：</p> <pre><code>    private static void writeVoidPromise(ChannelHandlerContext ctx, CodecOutputList out) {         final ChannelPromise voidPromise = ctx.voidPromise();         for (int i = 0; i &lt; out.size(); i++) {             ctx.write(out.getUnsafe(i), voidPromise);         }     }      private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) {         final PromiseCombiner combiner = new PromiseCombiner(ctx.executor());         for (int i = 0; i &lt; out.size(); i++) {             combiner.add(ctx.write(out.getUnsafe(i)));         }         combiner.finish(promise);     }</code></pre> <h1 id="messagetomessagedecoder">MessageToMessageDecoder</h1> <p>和encoder对应的就是decoder了，MessageToMessageDecoder的逻辑和MessageToMessageEncoder差不多。</p> <p>首先也是需要判断读取的消息类型，这里也定义了一个TypeParameterMatcher对象，用来检测传入的消息类型：</p> <pre><code>    protected MessageToMessageDecoder() {         matcher = TypeParameterMatcher.find(this, MessageToMessageDecoder.class, "I");     }</code></pre> <p>decoder中重要的方法是channelRead方法，我们看下它的实现：</p> <pre><code>    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {         CodecOutputList out = CodecOutputList.newInstance();         try {             if (acceptInboundMessage(msg)) {                 @SuppressWarnings("unchecked")                 I cast = (I) msg;                 try {                     decode(ctx, cast, out);                 } finally {                     ReferenceCountUtil.release(cast);                 }             } else {                 out.add(msg);             }         } catch (DecoderException e) {             throw e;         } catch (Exception e) {             throw new DecoderException(e);         } finally {             try {                 int size = out.size();                 for (int i = 0; i &lt; size; i++) {                     ctx.fireChannelRead(out.getUnsafe(i));                 }             } finally {                 out.recycle();             }         }     }</code></pre> <p>首先检测msg的类型，只有接受的类型才进行decode处理，否则将msg加入到CodecOutputList中。</p> <p>最后在finally代码块中将out中的对象一个个取出来，调用ctx.fireChannelRead进行读取。</p> <p>消息转换的关键方法是decode，这个方法也是一个抽象方法，需要在继承类中实现具体的功能。</p> <h1 id="messagetomessagecodec">MessageToMessageCodec</h1> <p>前面讲解了一个编码器和一个解码器，他们都是单向的。最后要讲解的codec叫做MessageToMessageCodec，这个codec是一个双向的，即可以接收消息，也可以发送消息。</p> <p>先看下它的定义：</p> <pre><code>public abstract class MessageToMessageCodec&lt;INBOUND_IN, OUTBOUND_IN&gt; extends ChannelDuplexHandler</code></pre> <p>MessageToMessageCodec继承自ChannelDuplexHandler，接收两个泛型参数分别是INBOUND_IN和OUTBOUND_IN。</p> <p>它定义了两个TypeParameterMatcher，分别用来过滤inboundMsg和outboundMsg:</p> <pre><code>    protected MessageToMessageCodec() {         inboundMsgMatcher = TypeParameterMatcher.find(this, MessageToMessageCodec.class, "INBOUND_IN");         outboundMsgMatcher = TypeParameterMatcher.find(this, MessageToMessageCodec.class, "OUTBOUND_IN");     }</code></pre> <p>分别实现了channelRead和write方法，用来读写消息：</p> <pre><code>    @Override     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {         decoder.channelRead(ctx, msg);     }      @Override     public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {         encoder.write(ctx, msg, promise);     }</code></pre> <p>这里的decoder和encoder实际上就是前面我们讲到的MessageToMessageDecoder和MessageToMessageEncoder:</p> <pre><code>    private final MessageToMessageEncoder&lt;Object&gt; encoder = new MessageToMessageEncoder&lt;Object&gt;() {          @Override         public boolean acceptOutboundMessage(Object msg) throws Exception {             return MessageToMessageCodec.this.acceptOutboundMessage(msg);         }          @Override         @SuppressWarnings("unchecked")         protected void encode(ChannelHandlerContext ctx, Object msg, List&lt;Object&gt; out) throws Exception {             MessageToMessageCodec.this.encode(ctx, (OUTBOUND_IN) msg, out);         }     };      private final MessageToMessageDecoder&lt;Object&gt; decoder = new MessageToMessageDecoder&lt;Object&gt;() {          @Override         public boolean acceptInboundMessage(Object msg) throws Exception {             return MessageToMessageCodec.this.acceptInboundMessage(msg);         }          @Override         @SuppressWarnings("unchecked")         protected void decode(ChannelHandlerContext ctx, Object msg, List&lt;Object&gt; out) throws Exception {             MessageToMessageCodec.this.decode(ctx, (INBOUND_IN) msg, out);         }     };</code></pre> <p>可以看到MessageToMessageCodec实际上就是对MessageToMessageDecoder和MessageToMessageEncoder的封装，如果需要对MessageToMessageCodec进行扩展的话，需要实现下面两个方法：</p> <pre><code>    protected abstract void encode(ChannelHandlerContext ctx, OUTBOUND_IN msg, List&lt;Object&gt; out)             throws Exception;      protected abstract void decode(ChannelHandlerContext ctx, INBOUND_IN msg, List&lt;Object&gt; out)             throws Exception;</code></pre> <h1 id="总结">总结</h1> <p>netty中提供的MessageToMessage的编码框架是后面对编码解码器进行扩展的基础。只有深入了解其中的原理，我们对于新的编码解码器运用起来才能得心应手。</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-170.htm">.Net中字符串不变性与相等判断的特殊场景</a></p>
                                        <p>下一个：<a href="/html/category/article-172.htm">Spring Cloud Gateway系列 配置Gateway详解</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-249.htm">Unity 内置渲染管线转URP</a></h4>
                <p>一、CG 替换 HLSL   未使用光照计算的shader升级后不做修改仍然可以使用，但是可能会不兼容SRP Batcher，所以仍然需要修改，使用了光照计算的shader必须要修改。   SubSh</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-208.htm">vue3.0下如何使用mapState，mapGetters和mapActions</a></h4>
                <p>vue3.0下如何使用mapState，mapGetters和mapActions      1、新建useMapper.js 2、新建useState.js 3、新建useGetters.js 4、</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-222.htm">vue 使用echarts绘制折线图</a></h4>
                <p>&lt;template&gt;     &lt;div&gt;         &lt;!-- 方法一，注册echarts到vue的原型对象中，指定某个div作为echarts的画布 --&gt; </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-216.htm">Spark连接Hive，进行Hive数据表的读写操作</a></h4>
                <p>基础环境   Hadoop安装-1，hadoop安装-2  spark安装 Hive安装   配置  将Hive的conf目录下的hive-site-xml文件拷贝到spark的conf目录下； 将H</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-255.htm">vue动态获取ref方式</a></h4>
                <p>&lt;div v-for="(item,index) in list" :key="index"              :class=" circleAnimation === 1 ? 'bal</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-256.htm">Vue3项目中的骨架屏</a></h4>
                <p>实现场景:刚进入页面的时候,需要后端接口回传的数据,还没有回来,为了客户有更好的体验,需要设置骨架屏,效果图如下:  &nbsp;实现步骤: 1.设置通用组件骨架屏(可以设置的属性:高，宽，背景颜色，</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-240.htm">python神经网络使用Keras构建RNN训练_python</a></h4>
                <p>目录  Keras中构建RNN的重要函数  1、SimpleRNN 2、model.train_on_batch  全部代码     Keras中构建RNN的重要函数  1、SimpleRNN Sim</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-259.htm">C ++程序查找n个数的GCD和LCM</a></h4>
                <p>这是找出n个数字的GCD和LCM的代码。两个或更多不都是零的整数的GCD或最大公除数是将每个整数相除的最大正整数。GCD也被称为最大公因数。 两个数字的最小公倍数(LCM)是两个数字的倍数的最小数字（</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-239.htm">ubuntu 18及以上版本配置IP的方法，你get了吗_在线工具</a></h4>
                <p>本文讲讲 Ubuntu 18 及以上版本配置 IP 的方法，为什么它值得一讲，因为以 Ubuntu 16 为首的版本的配置方法已经不适用了，如果你还不知道，那本文正好 get 一个新技能。 Ubunt</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-241.htm">VS code vue安装Vetur后还是没有高亮显示之离线安装插件</a></h4>
                <p>前言 因为公司项目是在云桌面开发，没有网络，需要在有网络的电脑安装vscode及插件然后压缩复制到云桌面，但是 安装了Vetur 压缩过去后vue文件代码还是没有高亮，试过很多种方法，但是都无效。然后</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>