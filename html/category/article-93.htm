<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-93.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>多线程详解 创建多线程 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">多线程详解 创建多线程</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2><a id="__1" rel="nofollow"></a>一. 进程与线程：</h2> <h3><a id="1__2" rel="nofollow"></a>1. 进程：</h3> <p>进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。程序运行时系统就会创建一个进程，并为它分配资源，然后把该进程放入进程就绪队列，进程调度器选中它的时候就会为它分配CPU时间，程序开始真正运行。</p> <h3><a id="2__4" rel="nofollow"></a>2. 线程：</h3> <p>线程是一条执行路径，是程序执行时的最小单位，它是进程的一个执行流，<strong>是CPU调度和分派的基本单位</strong>，一个进程可以由很多个线程组成，线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。线程由CPU独立调度执行，在多CPU环境下就允许多个线程同时运行。同样多线程也可以实现并发操作，每个请求分配一个线程来处理。</p> <h3><a id="3__6" rel="nofollow"></a>3. 执行方式：</h3> <p>① 顺序执行：即程序从上往下一步一步的执行<br /> ② 并发执行：指两个或多个事件在同一个时间段内执行<br /> ③ 并行执行：指两个或多个事件在同一时刻同时执行</p> <h2><a id="__10" rel="nofollow"></a>二. 创建多线程的三种方式：</h2> <h3><a id="1_Thread_11" rel="nofollow"></a>1. 继承Thread类：</h3> <p>继承Thread类后要重写Thread类的run()方法，然后调用start()方法开启线程</p> <pre><code class="prism language-bash">public class TestThread1 extends Thread<span class="token punctuation">{<!-- --></span>     public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         EatThread eatThread<span class="token operator">=</span> new EatThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         DrinkThread drinkThread<span class="token operator">=</span> new DrinkThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         eatThread.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         drinkThread.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  class EatThread extends Thread<span class="token punctuation">{<!-- --></span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         System.out.println<span class="token punctuation">(</span><span class="token string">"开始吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         try<span class="token punctuation">{<!-- --></span>             Thread.sleep<span class="token punctuation">(</span>5000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"结束吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  class DrinkThread extends Thread<span class="token punctuation">{<!-- --></span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         System.out.println<span class="token punctuation">(</span><span class="token string">"开始喝酒?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         try<span class="token punctuation">{<!-- --></span>             Thread.sleep<span class="token punctuation">(</span>5000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"结束喝酒?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>此时的运行结果为：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/d2d7a5ecf5e40bd9cee8da4a9dc98d96.jpg" alt="多线程详解 创建多线程"><br /> 当把主函数（即主线程）改为run()方法开启线程：</p> <pre><code class="prism language-bash">public class TestThread1 extends Thread<span class="token punctuation">{<!-- --></span>     public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         EatThread eatThread<span class="token operator">=</span> new EatThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         DrinkThread drinkThread<span class="token operator">=</span> new DrinkThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         eatThread.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         drinkThread.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>此时的运行结果为：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/e0fcfe814893926a06c75f900470d057.jpg" alt="多线程详解 创建多线程"><br /> 造成区别的原因时：当使用start()方法开启线程时，各线程是并发执行的，当使用run()方法开启线程时，各线程是顺序执行的。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/c1299022aafd1d795354f12c4d78146f.jpg" alt="多线程详解 创建多线程"></p> <h3><a id="2_Runnable_68" rel="nofollow"></a>2. 实现Runnable接口：</h3> <p>与继承Thread类方法类似，实现Runnable接口后要重写run()方法，然后使用Thread类来包装调用start()方法开启线程</p> <pre><code class="prism language-bash">public class TestThread2 implements Runnable<span class="token punctuation">{<!-- --></span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         System.out.println<span class="token punctuation">(</span><span class="token string">"开始吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         try<span class="token punctuation">{<!-- --></span>             Thread.sleep<span class="token punctuation">(</span>5000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"结束吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         TestThread2 t1<span class="token operator">=</span> new TestThread2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         new Thread<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread thread<span class="token operator">=</span> new Thread<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  //对同一对象进行多线程从操作         thread.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>运行结果为：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/efb9a4ce31cb69c1b2ef9e078b768167.jpg" alt="多线程详解 创建多线程"></p> <pre><code class="prism language-handlebars"><span class="token variable">注意：</span><span class="token variable">new</span><span class="token variable">Thread</span><span class="token punctuation">(</span><span class="token variable">t1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">和</span><span class="token variable">Thread</span><span class="token variable">thread</span><span class="token punctuation">=</span><span class="token variable">new</span><span class="token variable">Thread</span><span class="token punctuation">(</span><span class="token variable">t1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">thread</span><span class="token punctuation">.</span><span class="token variable">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">这两种写法效果是一样的</span><span class="token variable">第一种方法继承Thread类，Thread类也实现了Runnable接口</span><span class="token variable">第二种方法实现Runnable接口，类似创建一个代理工具类</span><span class="token variable">推荐使用实现Runnable接口的方法实现多线程，可以避免Java单线程的限制</span><span class="token variable">线程开启不一定立即执行，由CPU调度执行</span></code></pre> <h3><a id="3_Callable_110" rel="nofollow"></a>3. 实现Callable接口：</h3> <p>① 实现Callable接口，需要返回值类型<br /> ② 重写call()方法，需要抛出异常<br /> ③ 创建目标对象 : TestThread3 testThread3 = new TestThread3()<br /> ④ 创建执行服务 : ExecutorService ser = Executors.newFixedThreadPool(2)<br /> ⑤ 提交执行 : Future r1 = ser.submit(testThread3)<br /> ⑥ 获取结果 : boolean rst1 = r1.get();<br /> ⑦ 关闭服务 : ser.shutdownNow();</p> <pre><code class="prism language-bash">public class TestThread3 implements Callable<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span>  //①实现Callable接口，需要返回值类型     private String name<span class="token punctuation">;</span>      public TestThread3<span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         this.name<span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>     @Override     public Boolean call<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{<!-- --></span>  //②重写call<span class="token punctuation">(</span><span class="token punctuation">)</span>方法，需要抛出异常         if<span class="token punctuation">(</span>name.equals<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">))</span><span class="token punctuation">{<!-- --></span>             System.out.println<span class="token punctuation">(</span><span class="token string">"欢迎"</span>+name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws ExecutionException, InterruptedException<span class="token punctuation">{<!-- --></span>         //③创建目标对象         TestThread3 t1<span class="token operator">=</span> new TestThread3<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         TestThread3 t2<span class="token operator">=</span> new TestThread3<span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          //④创建执行服务         ExecutorService ser<span class="token operator">=</span> Executors.newFixedThreadPool<span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span>          //⑤提交执行         Future<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span> r1<span class="token operator">=</span> ser.submit<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>         Future<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span> r2<span class="token operator">=</span> ser.submit<span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>          //⑥获取结果         boolean rst1<span class="token operator">=</span> r1.get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         boolean rst2<span class="token operator">=</span> r2.get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System.out.println<span class="token punctuation">(</span>rst1<span class="token punctuation">)</span><span class="token punctuation">;</span>         System.out.println<span class="token punctuation">(</span>rst2<span class="token punctuation">)</span><span class="token punctuation">;</span>          //⑦关闭服务         ser.shutdownNow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>运行结果：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/747425e673d4f262be469697d474a08a.jpg" alt="多线程详解 创建多线程"></p> <h2><a id="__160" rel="nofollow"></a>三. 多线程实例——龟兔赛跑</h2> <pre><code class="prism language-bash">public class Race implements Runnable<span class="token punctuation">{<!-- --></span>     private static String winner<span class="token punctuation">;</span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span> 1<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> 100<span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             // 模拟兔子休息             if<span class="token punctuation">(</span>Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span><span class="token string">"兔子"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> i%10<span class="token operator">==</span>0<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 try<span class="token punctuation">{<!-- --></span>                     Thread.sleep<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                     e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>              boolean flag<span class="token operator">=</span> isGameOver<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>             // 如果比赛结束，终止程序<span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>             // Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>获取当前线程             // Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>获取当前线程名字             System.out.print<span class="token punctuation">(</span>Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"--&gt;跑了"</span>+i+<span class="token string">"步"</span>+<span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             if<span class="token punctuation">(</span>i%5<span class="token operator">==</span>0<span class="token punctuation">)</span>                 System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>     // 判断是否有胜利者     public boolean isGameOver<span class="token punctuation">(</span>int step<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>winner<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>step<span class="token operator">&gt;=</span>100<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 winner<span class="token operator">=</span> Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 System.out.println<span class="token punctuation">(</span><span class="token string">"winner is "</span>+winner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         Race race<span class="token operator">=</span> new Race<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         new Thread<span class="token punctuation">(</span>race,<span class="token string">"兔子"</span><span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         new Thread<span class="token punctuation">(</span>race,<span class="token string">"乌龟"</span><span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>结果：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/b3c242e1a23467509c5b436382f0b95e.jpg" alt="多线程详解 创建多线程"><br /> 参考:<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/vbirdbest/article/details/81282163"  rel="nofollow">https://blog.csdn.net/vbirdbest/article/details/81282163</a>.</p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-92.htm">Spring 5 中文解析数据存储篇-JDBC数据存储(下)</a></p>
                                        <p>下一个：<a href="/html/category/article-94.htm">IndexError: tensors used as indices must be long, byte or bool tensors</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-237.htm">Vue3实现跑马灯效果_vue.js</a></h4>
                <p>本文实例为大家分享了Vue3实现跑马灯效果的具体代码，供大家参考，具体内容如下 先看效果：  html部分代码  &lt;div class="app"&gt;              &lt;p </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-230.htm">java中RabbitMQ高级应用_java</a></h4>
                <p>目录  1、消息可靠性投递   1.1、确认模式  1.2、退回模式  1.3、确认机制  2、消费端限流  3、消息过期时间  4、死信队列   4.1、死信概念  4.2、延迟队列     1、消</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-252.htm">Android 4.0.1破坏了WebView HTML 5本地存储？</a></h4>
                <p>要解决此问题，请执行以下步骤- 对于版本低于4.4的android，将数据加载到具有这样的目录的文件方案的web视图中将不起作用。 browser.loadDataWithBaseUrl("file:</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-235.htm">C#中检查null的语法糖_在线工具</a></h4>
                <p>今天看到已经更新了devblogs，新增的C# 11的!!（用于检查null的语法）经过非常长的讨论，最后取消了。然后我又想起来null检查，这个可以说一说。 函数参数null检查 传统写法 写一个函</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-238.htm">js数组删除的方法</a></h4>
                <p>js的数组删除，我建议大家使用splice函数，不要使用slice函数，因为slice是返回一个新数组，并不是从原来的数组中删除。 比如： let a=[111,222,333,444]; a.spl</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-209.htm">Java基础知识 29（同步代码块，同步方法，静态同步方法，Lock锁，死锁问题）</a></h4>
                <p>Java基础知识 29  先回顾一下上节课讲的多个窗口共同卖票的问题，首先我们设置三个不同的线程来同步进行卖票，我们把所有的票数全部设置成静态变量，让这三个线程可以共享这些票。通过设置这个静态变量我们</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-247.htm">.NET如何快速比较两个byte数组是否相等</a></h4>
                <p>前言  之前在群里面有群友问过一个这样的问题，在.NET中如何快速的比较两个byte数组是否完全相等，听起来是一个比较两个byte数组是完全相等是一个简单的问题，但是深入研究以后，觉得还是有很多方案的</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-240.htm">vue写一个简单的文件上传控件</a></h4>
                <p>这篇将介绍如何写一个简单的基于Vue+Element的文件上传控件。 控件将具有 1. 上传队列的列表，显示文件名称，大小等信息，可以显示上传进度实时刷新 2. 取消上传  &nbsp;使用Eleme</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-203.htm">Python tkinter库图形绘制例子分享_python_</a></h4>
                <p>目录  一、椭圆绘制 二、矩形绘制 三、多边形绘制    一、椭圆绘制 实例代码：  import tkinter as tk                    # 导入tkinter库，并重命名</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-215.htm">你不知道的Python容器</a></h4>
                <p>你不知道的Python容器  你不知道的Python容器  散列表  ChainMap MappingProxyType   线性表 堆 参考资料    昨天阅读了《Python Tricks: Th</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>