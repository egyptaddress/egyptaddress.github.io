<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-114.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>C#语法糖系列第一篇：聊聊 params 参数底层玩法 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">C#语法糖系列第一篇：聊聊 params 参数底层玩法</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<p>首先说说为什么要写这个系列，大概有两点原因。</p> <ol> <li>这种文章阅读量确实高...</li> <li>对 IL 和 汇编代码 的学习巩固</li> </ol> <p>所以就决定写一下这个系列，如果大家能从中有所收获，那就更好啦！</p> <h2 id="一params-应用层玩法">一：params 应用层玩法</h2> <p>首先上一段<code>测试代码</code>。</p> <pre><code class="language-C#">     class Program     {         static void Main(string[] args)         {             Test(100, 200, 300);             Test();         }          static void Test(params int[] list)         {             Console.WriteLine($"list.length={list.Length}");         }     }</code></pre> <p>输出结果如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/b16229a0ff3f234a13ae850defcc9a9d.jpg" alt="C#语法糖系列第一篇：聊聊 params 参数底层玩法"></p> <p>可以看出如果给<code>方法形参</code> 加上<code>params</code> 前缀，在传递<code>方法实参</code> 上就特别灵活，点赞。</p> <p>接下来我们来看看，这么灵活的<code>实参传递</code> 底层到底是怎么玩的？我们先从 IL 层面探究下。</p> <h2 id="二il-层面解读">二：IL 层面解读</h2> <p>用<code>ILSpy</code> 打开我们的 exe ，看看 IL 代码</p> <pre><code class="language-C#"> .method private hidebysig static  	void Main ( 		string[] args 	) cil managed  { 	// Method begins at RVA 0x2050 	// Code size 37 (0x25) 	.maxstack 8 	.entrypoint  	IL_0000: nop 	IL_0001: ldc.i4.3 	IL_0002: newarr [mscorlib]System.Int32 	IL_0007: dup 	IL_0008: ldtoken field valuetype '&lt;PrivateImplementationDetails&gt;'/'__StaticArrayInitTypeSize=12' '&lt;PrivateImplementationDetails&gt;'::'9AC9CF706FBD14D039E0436219C5D852927E5F69295F2EF423AE897345197B2A' 	IL_000d: call void [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray(class [mscorlib]System.Array, valuetype [mscorlib]System.RuntimeFieldHandle) 	IL_0012: call void ConsoleApp2.Program::Test(int32[]) 	IL_0017: nop 	IL_0018: ldc.i4.0 	IL_0019: newarr [mscorlib]System.Int32 	IL_001e: call void ConsoleApp2.Program::Test(int32[]) 	IL_0023: nop 	IL_0024: ret } // end of method Program::Main  .method private hidebysig static  	void Test ( 		int32[] list 	) cil managed  { 	.param [1] 		.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = ( 			01 00 00 00 		) 	// Method begins at RVA 0x2076 	// Code size 26 (0x1a) 	.maxstack 8  	IL_0000: nop 	IL_0001: ldstr "list.length={0}" 	IL_0006: ldarg.0 	IL_0007: ldlen 	IL_0008: conv.i4 	IL_0009: box [mscorlib]System.Int32 	IL_000e: call string [mscorlib]System.String::Format(string, object) 	IL_0013: call void [mscorlib]System.Console::WriteLine(string) 	IL_0018: nop 	IL_0019: ret } // end of method Program::Test</code></pre> <p>上面是<code>Main</code> 和<code>Test</code> 方法的IL代码，我们逐一看一下。</p> <h3 id="1-test-方法">1. Test 方法</h3> <p>从<code>int32[] list</code> 参数看并没有所谓的<code>params</code>，这也就说明它是<code>C#编译器</code> 玩的一个手段而已，在方法调用前就已经构建好了。</p> <h3 id="2-main方法">2. Main方法</h3> <p>可以看到 IL 层面的<code>Test(100, 200, 300)</code> 已经变成了下面五行代码。</p> <pre><code class="language-C#"> 	IL_0002: newarr [mscorlib]System.Int32 	IL_0007: dup 	IL_0008: ldtoken field valuetype '&lt;PrivateImplementationDetails&gt;'/'__StaticArrayInitTypeSize=12' '&lt;PrivateImplementationDetails&gt;'::'9AC9CF706FBD14D039E0436219C5D852927E5F69295F2EF423AE897345197B2A' 	IL_000d: call void [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray(class [mscorlib]System.Array, valuetype [mscorlib]System.RuntimeFieldHandle) 	IL_0012: call void ConsoleApp2.Program::Test(int32[])</code></pre> <p>逻辑大概就是:</p> <ul> <li>用<code>newarr</code> 构建初始化<code>int[]</code> 数组。</li> <li>用<code>ldtoken</code> 从程序元数据中提取<code>1,2,3</code>。</li> <li>用<code>InitializeArray</code> 来将 1，2，3 构建到数组中。</li> </ul> <p>有了这些指令，我相信 JIT 就知道怎么做了。</p> <p>再看<code>Test()</code> 的 IL 指令只有一行<code>newarr [mscorlib]System.Int32</code> 初始化。</p> <p>所以本质上来说，就是提前构建好 array，然后进行参数传递，仅此而已。。。</p> <h2 id="三汇编层面解读">三：汇编层面解读</h2> <p>有了<code>newarr + ldtoken + call</code> 三条指令，接下来我们读一下汇编层做了什么，使用 windbg 打开 exe，简化后的汇编代码如下：</p> <pre><code class="language-C#"> 0:000&gt; !U /d 009b0848 Normal JIT generated code ConsoleApp2.Program.Main(System.String[]) Begin 009b0848, size 77  D:\net5\ConsoleApp4\ConsoleApp2\Program.cs @ 14: &gt;&gt;&gt; 009b0848 55              push    ebp 009b0849 8bec            mov     ebp,esp 009b084b 83ec10          sub     esp,10h 009b084e 33c0            xor     eax,eax 009b0850 8945f4          mov     dword ptr [ebp-0Ch],eax 009b0853 8945f8          mov     dword ptr [ebp-8],eax 009b0856 8945f0          mov     dword ptr [ebp-10h],eax 009b0859 894dfc          mov     dword ptr [ebp-4],ecx 009b085c 833df042710000  cmp     dword ptr ds:[7142F0h],0 009b0863 7405            je      009b086a 009b0865 e816f55264      call    clr!JIT_DbgIsJustMyCode (64edfd80) 009b086a 90              nop  D:\net5\ConsoleApp4\ConsoleApp2\Program.cs @ 15: 009b086b b95e186763      mov     ecx,offset mscorlib_ni!System.Text.Encoding.GetEncodingCodePage(Int32)$##6006719 &lt;PERF&gt; (mscorlib_ni+0x185e) (6367185e) 009b0870 ba03000000      mov     edx,3 009b0875 e8b229d5ff      call    0070322c (JitHelp: CORINFO_HELP_NEWARR_1_VC) 009b087a 8945f4          mov     dword ptr [ebp-0Ch],eax 009b087d b9e04d7100      mov     ecx,714DE0h 009b0882 e819c91f64      call    clr!JIT_GetRuntimeFieldStub (64bad1a0) 009b0887 8945f8          mov     dword ptr [ebp-8],eax 009b088a 8d45f8          lea     eax,[ebp-8] 009b088d ff30            push    dword ptr [eax] 009b088f 8b4df4          mov     ecx,dword ptr [ebp-0Ch] 009b0892 e8f9c61f64      call    clr!ArrayNative::InitializeArray (64bacf90) 009b0897 8b4df4          mov     ecx,dword ptr [ebp-0Ch] 009b089a ff15904d7100    call    dword ptr ds:[714D90h] (ConsoleApp2.Program.Test(Int32[]), mdToken: 06000002) 009b08a0 90              nop  D:\net5\ConsoleApp4\ConsoleApp2\Program.cs @ 16: 009b08a1 b95e186763      mov     ecx,offset mscorlib_ni!System.Text.Encoding.GetEncodingCodePage(Int32)$##6006719 &lt;PERF&gt; (mscorlib_ni+0x185e) (6367185e) 009b08a6 33d2            xor     edx,edx 009b08a8 e87f29d5ff      call    0070322c (JitHelp: CORINFO_HELP_NEWARR_1_VC) 009b08ad 8945f0          mov     dword ptr [ebp-10h],eax 009b08b0 8b4df0          mov     ecx,dword ptr [ebp-10h] 009b08b3 ff15904d7100    call    dword ptr ds:[714D90h] (ConsoleApp2.Program.Test(Int32[]), mdToken: 06000002) 009b08b9 90              nop  D:\net5\ConsoleApp4\ConsoleApp2\Program.cs @ 17: 009b08ba 90              nop 009b08bb 8be5            mov     esp,ebp 009b08bd 5d              pop     ebp 009b08be c3              ret</code></pre> <h3 id="1-newarr">1. newarr</h3> <p>可以很清楚的看到，<code>newarr</code> 调用了 CLR 中的jithelper函数<code>CORINFO_HELP_NEWARR_1_VC</code> 下的<code>JIT_NewArr1</code> 方法，大家有兴趣可以看下<code>jitheapler.cpp</code>，调用完之后，初始化数组就出来了。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/8a49eacf5d9c4fcbe68ef881bb9ac2bf.jpg" alt="C#语法糖系列第一篇：聊聊 params 参数底层玩法"></p> <p>从dp看，数组只申明了<code>length=3</code>,还并没有数组元素，也就说所谓的初始化。</p> <h3 id="2-ldtoken--initializearray">2. ldtoken &amp; InitializeArray</h3> <p>刚才也说到了, ldtoken 是在运行时提取元数据，那就必须要解析 PE 头，在 clr 层面有一个<code>PEDecoder::GetRvaData</code> 方法就是用来解析运行时数据，它是发生在<code>ArrayNative::InitializeArray</code> 方法中，所以我们下两个 bu 命令拦截。</p> <pre><code class="language-C#"> 0:000&gt; bu clr!ArrayNative::InitializeArray 0:000&gt; bu clr!PEDecoder::GetRvaData 0:000&gt; g Breakpoint 3 hit eax=0019f500 ebx=0019f5ac ecx=024c2338 edx=006fb930 esi=00000000 edi=0019f520 eip=64bacf90 esp=0019f4f0 ebp=0019f508 iopl=0         nv up ei pl zr na pe nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246 clr!ArrayNative::InitializeArray: 64bacf90 6a78            push    78h 0:000&gt; g Breakpoint 0 hit eax=00713448 ebx=00624044 ecx=0071344c edx=0071dc28 esi=00624044 edi=00624de0 eip=64befcfc esp=0019f400 ebp=0019f410 iopl=0         nv up ei pl zr na pe nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246 clr!PEDecoder::GetRvaData: 64befcfc 55              push    ebp 0:000&gt; k   # ChildEBP RetAddr       00 0019f410 64b63be5     clr!PEDecoder::GetRvaData 01 0019f410 64b63bb3     clr!Module::GetRvaField+0x40 02 0019f44c 64bad0a7     clr!FieldDesc::GetStaticAddressHandle+0xdd 03 0019f4ec 00680897     clr!ArrayNative::InitializeArray+0x11a 0:000&gt; bp 64b63be5 0:000&gt; g eax=00402928 ebx=00624044 ecx=0071344c edx=0071dc28 esi=00624044 edi=00624de0 eip=64b63be5 esp=0019f40c ebp=0019f410 iopl=0         nv up ei pl nz na pe nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206 clr!Module::GetRvaField+0x40: 64b63be5 5e              pop     esi</code></pre> <p>从输出看，上面的<code>GetRvaField</code> 方法的返回值会送到 eax 上，接下来我们验证下 eax 上的值是不是参数 100，200，300 。</p> <pre><code class="language-C#"> 0:000&gt; dp eax L3 00402928  00000064 000000c8 0000012c</code></pre> <p>上面三个就是 16进制的表示，接下来我们再验证下这三个值是怎么赋到初始化数组中的，可以用<code>ba</code> 命令对 内存地址 进行拦截。</p> <pre><code class="language-C#"> 0:000&gt; ba r4 023e2338 + 0x8 0:000&gt; ba r4 023e2338 + 0x8 + 0x4 0:000&gt; ba r4 023e2338 + 0x8 + 0x4 + 0x4 0:000&gt; g Breakpoint 3 hit eax=0000000c ebx=00000000 ecx=00000003 edx=00000064 esi=00402928 edi=023e2340 eip=6a91d68b esp=0019f440 ebp=0019f4ec iopl=0         nv up ei pl nz na pe nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206 VCRUNTIME140_CLR0400!memcpy+0x50b: 6a91d68b 83c704          add     edi,4 0:000&gt; g Breakpoint 4 hit eax=0000000c ebx=00000000 ecx=00000002 edx=000000c8 esi=0040292c edi=023e2344 eip=6a91d68b esp=0019f440 ebp=0019f4ec iopl=0         nv up ei pl nz na po nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202 VCRUNTIME140_CLR0400!memcpy+0x50b: 6a91d68b 83c704          add     edi,4 0:000&gt; g Breakpoint 5 hit eax=0000000c ebx=00000000 ecx=00000001 edx=0000012c esi=00402930 edi=023e2348 eip=6a91d68b esp=0019f440 ebp=0019f4ec iopl=0         nv up ei pl nz na po nc cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202 VCRUNTIME140_CLR0400!memcpy+0x50b: 6a91d68b 83c704          add     edi,4  0:000&gt; dp 023e2338 L5 023e2338  6368426c 00000003 00000064 000000c8 023e2348  0000012c</code></pre> <p>接下来稍微解释下<code>ba r4 023e2338 + 0x8</code> 命令。</p> <ul> <li> <p>023e2338 是初始化数组的首地址。</p> </li> <li> <p>023e2338+0x8 初始化数组第一个元素的地址。</p> </li> <li> <p>023e2338 + 0x8 + 0x4  初始化数组第二个元素的地址。</p> </li> <li> <p>r4  按4byte对地址块读写进行监控。</p> </li> </ul> <p>当三个断点命中后，可以看到初始化数组<code>023e2338</code> 上的三个元素值都已经填上了，就说这么多吧，相信大家对 params 机制有一定的理解。</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-113.htm">SpringBoot——整合druid数据源，以及使用druid数据源监控</a></p>
                                        <p>下一个：<a href="/html/category/article-115.htm">vue中vuex全家桶的使用封装</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-227.htm">Spring Boot四大神器之CLI</a></h4>
                <p>目录             1. Spring Boot CLI简介： 2. 安装CLI:   手动安装：   3. 运行Groovy脚本 4. CLI运行原理说明：（CLI帮我们做了什么？）   </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-229.htm">Docker提交镜像-数据卷-可视化</a></h4>
                <p>在熟悉完Docker的安装及基本命令使用之后，我们开始学习下Docker的进阶操作：包括但不限于新建Docker镜像，数据卷的挂载，以及Docker的可视化等。 Docker提交镜像 启动镜像 我们先</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-239.htm">Vue假数据应用——表格的添加、删除、搜索</a></h4>
                <p>Vue实现假数据的添加、删除、搜索 HTML &lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;script type="text/</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-231.htm">RestTemplate微服务调用捕捉服务端异常</a></h4>
                <p>1. restTemplate执行调用前，设置异常处理类 //1.执行调用前，设置异常处理类 restTemplate.setErrorHandler(newCustomResponseErrorHa</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-252.htm">[js] 回调函数 回调地狱 Promise async/await</a></h4>
                <p>1. 回调函数 callback   一种封装代码的手段   什么是 callback , 概念 =&gt; 把 函数A 当做 实参 传递到 函数B 内部 =&gt; 在 函数B 内部以 形参 的方式</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-225.htm">Spring的3级缓存和循环引用的理解_在线工具</a></h4>
                <p>此处是我自己的一个理解，防止以后忘记，如若那个地方理解不对，欢迎指出。  一、背景 在我们写代码的过程中一般会使用 @Autowired 来注入另外的一个对象，但有些时候发生了 循环依赖，但是我们的代</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-253.htm">win11系统怎么设置软件安装来源</a></h4>
                <p>&nbsp; &nbsp;我们为了保证电脑安装软件的安全性，以及不会下载到一些有流氓软件之类的问题出现，可以在电脑中设置应用下载来源，那么win11系统怎么设置软件安装来源呢?今天为大家分享win11</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-251.htm">C# 有关List&lt;T&gt;的Contains与Equals方法_在线工具</a></h4>
                <p>【以下内容仅为本人在学习中的所感所想，本人水平有限目前尚处学习阶段，如有错误及不妥之处还请各位大佬指正，请谅解，谢谢！】 #Updated【2022.5.2 修复移动端排版混乱的问题】 ！！！观前提醒</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-216.htm">Citus 分布式 PostgreSQL 集群 &#8211; SQL Reference(SQL支持和变通方案)</a></h4>
                <p>由于Citus 通过扩展PostgreSQL 提供分布式功能，因此它与PostgreSQL 结构兼容。这意味着用户可以使用丰富且可扩展的PostgreSQL 生态系统附带的工具和功能来处理使用Citu</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-255.htm">python 查看包的版本</a></h4>
                <p>python查看包的版本  方法1：pip 使用cmd命令打开命令行，在命令行输入pip list,即可查看所有已安装的包及包的版本。  方法2：导入查看 导入包，输入包名.__version__即可</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">28</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>