<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-234.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>从 jQuery 到 Vue3 的快捷通道_在线工具 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">从 jQuery 到 Vue3 的快捷通道_在线工具</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<blockquote> <p>当初使用 jQuery 做了几个简单的项目，算是有一点点了解，现在学习Vue3，发现了一个可以快速转换思维的通道 —— 使用CDN的方式模拟 Vite 建立的项目！</p> </blockquote> <h1 id="cdn方式">CDN方式</h1> <p>jQuery的使用非常方便，用 script 引入 js文件即可，然后找到DOM即可开始操作。<br /> 而 Vue3 也支持直接用 script 引入的方式，然后使用插值的方式绑定数据，我们来看一下使用方法：</p> <ul> <li>引入 vue.js</li> </ul> <pre><code class="language-html">  &lt;head&gt;     &lt;meta charset="UTF-8" /&gt;     &lt;!--加载 vue3 --&gt;     &lt;script src="https://unpkg.com/vue@3.2.33/dist/vue.global.js"&gt;&lt;/script&gt;     &lt;!--加载 element-plus --&gt;     &lt;script src="https://unpkg.com/element-plus@2.1.9/dist/index.full.js"&gt;&lt;/script&gt;     &lt;link href="https://unpkg.com/element-plus@2.1.9/dist/index.css" /&gt;     &lt;title&gt;Vue3 CDN的简单演示&lt;/title&gt;   &lt;/head&gt;</code></pre> <p>这样我们就可以在网页里面使用 Vue 了，另外我们引入了一个UI库——element-plus。</p> <ul> <li>绑定数据和事件</li> </ul> <p>然后我们写一个 hello word：</p> <pre><code class="language-html">&lt;body&gt;     &lt;div id="app"&gt;       &lt;button @click="count++"&gt;自增&lt;/button&gt; &lt;br&gt;       &lt;el-button @click="count++" &gt;自增&lt;/el-button&gt; &lt;br&gt;       {{ count }}     &lt;/div&gt;     &lt;script&gt;       const { ref, createApp } = Vue       const app = {         setup() {           const count = ref(0)           return {             count           }         }       }              createApp(app)         .use(ElementPlus)         .mount('#app')     &lt;/script&gt;   &lt;/body&gt;</code></pre> <ul> <li> <p>插值<br /> 在模板里面使用双大括号即可实现数据绑定。</p> </li> <li> <p>事件<br /> 可以使用原生button，也可以使用UI库提供的button，用v-on（简写：@）添加事件。</p> </li> <li> <p>定义数据<br /> 这里采用 composition API 的方式，使用 ref，实现简单的计数功能。</p> </li> <li> <p>挂载<br /> 使用 createApp 创建一个App，然后挂载插件、UI库、路由、状态等。</p> </li> </ul> <blockquote> <p>本篇只做简单介绍，详细介绍请移步官网：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://staging-cn.vuejs.org/"  target="_blank" rel="nofollow">https://staging-cn.vuejs.org/</a></p> </blockquote> <h1 id="组件化">组件化</h1> <p>一个项目有很多功能，显然不能把所有代码都放在一起，那么如何管理代码呢？Vue提供了组件化的方式，便于组织代码。</p> <p>我们可以建立一个 count.js 文件（单文件组件），实现上面那个简单的计数功能：</p> <ul> <li>count.js</li> </ul> <pre><code class="language-js">const { ref } = Vue export default {   name: 'count',   template: `      &lt;button @click="count++"&gt;自增&lt;/button&gt; &lt;br&gt;      &lt;el-button @click="count++" &gt;自增&lt;/el-button&gt; &lt;br&gt;      {{ count }}   `   setup() {     const count = ref(0)     return {       count     }   } }</code></pre> <p>这样就可以建立一个单独的Vue组件，相关的代码都可以放在这里，管理起来就更容易了。</p> <h1 id="工程化项目">工程化项目</h1> <p>一般我们可以用 Vite 建立一个项目，然后安装需要的各种插件，但是这需要我们先了解 node、npm、yarn、vite等，还要先配置好环境，这些对于新手来说容易懵。</p> <p>那么能不能<strong>暂时</strong>跳过这些，直接建立一个工程化的项目呢？当然是可以的！</p> <p>我们可以模仿 Vite 建立的项目的文件结构，用CDN的方式实现一个项目。</p> <blockquote> <p>为啥要用CDN的方式模拟一下呢？因为这样可以先不用了解node等前置知识点，可以比较清晰的看到 Vue 的运作方式，快速理解Vue的特点，可以作为一种过渡方式。</p> </blockquote> <h2 id="目录结构">目录结构</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/4054d87eaf13d7c1b2528fba63b18be2.jpg" alt="从 jQuery 到 Vue3 的快捷通道_在线工具"></p> <p>可以发现和 Vite 建立的项目的结构是基本一样的，只是把.vue后缀变成了.js后缀。</p> <h2 id="加载各种插件">加载各种插件</h2> <pre><code class="language-html">  &lt;head&gt;     &lt;meta charset="UTF-8" /&gt;     &lt;link  href="../nfwt.ico" /&gt;     &lt;script src="src/script/appImport.js?v=1"&gt;&lt;/script&gt;     &lt;!--加载 axios --&gt;     &lt;script src="https://unpkg.com/axios@0.26.1/dist/axios.min.js"&gt;&lt;/script&gt;     &lt;!--加载 vue3 --&gt;     &lt;script src="https://unpkg.com/vue@3.2.33/dist/vue.global.js"&gt;&lt;/script&gt;     &lt;!--加载 vue-router --&gt;     &lt;script src="https://unpkg.com/vue-router@4.0.14/dist/vue-router.global.js"&gt;&lt;/script&gt;     &lt;!--加载 pinia --&gt;     &lt;script src="https://unpkg.com/vue-demi@0.12.5/lib/index.iife.js"&gt;&lt;/script&gt;     &lt;script src="https://unpkg.com/pinia@2.0.13/dist/pinia.iife.js"&gt;&lt;/script&gt;     &lt;!--加载 element-plus --&gt;     &lt;script src="https://unpkg.com/element-plus@2.1.9/dist/index.full.js"&gt;&lt;/script&gt;     &lt;link href="https://unpkg.com/element-plus@2.1.9/dist/index.css" /&gt;   &lt;/head&gt;</code></pre> <ul> <li>pinia 状态管理<br /> pinia 需要加载两个文件，一个是pinia.js，另一个是其依赖项 vue-demi，实现兼容vue2的功能。</li> </ul> <h2 id="加载-mainjs">加载 main.js</h2> <p>main.js 是入口文件，需要在 index.html 使用<code>type="module"</code> 的方式引入，这样main里面才可以使用“import”。</p> <pre><code class="language-html">  &lt;body&gt;     &lt;div id="app"&gt;       这里是CDN仿工程化开发的演示...      &lt;/div&gt;     &lt;script type="module" src="src/main.js"&gt;&lt;/script&gt;   &lt;/body&gt;</code></pre> <h2 id="设置-mainjs">设置 main.js</h2> <p>然后在main里面加载根节点、路由设置、状态设置、UI库等操作。</p> <pre><code class="language-js">const ver = window.__ver || '?v=0' const pinia = Pinia.createPinia()  Promise.all([   import('./app.js' + ver),   import('./router/index.js' + ver), ]).then((res) =&gt; {   Vue.createApp(res[0].default)     .use(res[1].default) // 挂载路由     .use(ElementPlus) // 加载ElementPlus     .use(pinia) // 状态管理     .mount('#app') // 对应div })</code></pre> <p>可以直接使用<code>import App from './app.js'</code> 的方式加载，但是不好管理缓存。<br /> 所以采用了这种增加版本号的方式，以确保可以加载最新文件。</p> <h2 id="appjs">App.js</h2> <p>可以在 app.js 做页面布局，当然也可以实现其他功能。</p> <pre><code class="language-js">const { ref, defineAsyncComponent } = Vue  // 加载菜单组件 const myMenu = defineAsyncComponent(() =&gt; import('./views/menu.js' + window.__ver))  export default {   name: 'app',   components: {     myMenu   },   template: `   &lt;el-container&gt;     &lt;el-header&gt;       CND的方式 模仿工程化项目     &lt;/el-header&gt;     &lt;el-container&gt;       &lt;el-aside width="200px"&gt;         &lt;!--菜单--&gt;         &lt;my-menu/&gt;       &lt;/el-aside&gt;       &lt;el-container&gt;         &lt;el-main&gt;           &lt;!--路由容器 --&gt;           &lt;router-view&gt;&lt;/router-view&gt;         &lt;/el-main&gt;         &lt;el-footer&gt;           CND的简单演示。by Vue3、element-plus、Pinia、vue-Router         &lt;/el-footer&gt;       &lt;/el-container&gt;     &lt;/el-container&gt;   &lt;/el-container&gt;   `,   setup() {     return {     }   } }</code></pre> <p>这里采用异步组件的方式加载子组件，方便设置版本号，确保可以加载最新文件。</p> <h2 id="设置路由">设置路由</h2> <p>为了更方便的加载组件，我们可以使用 vue-router 设置路由。</p> <pre><code class="language-js"> // 定义路由  const routes = [   {     path: '/',     name: 'Home',     component: () =&gt; myImport('views/home')   },   {     path: '/pinia',     name: 'pinia',     component: () =&gt; myImport('views/state/pinia')   },   {     path: '/',     name: 'ui',     component: () =&gt; myImport('views/ui/ui-elp')   },   {     path: '/h',     name: 'h-test',     component: () =&gt; myImport('views/h/h')   },   {     path: '/jsx',     name: 'jsx-test',     component: () =&gt; myImport('views/h/jsx')   } ]  const base = '/cdn3/' const router = VueRouter.createRouter({   history: VueRouter.createWebHistory(base),   routes })  export default router</code></pre> <p>如果组件只有js文件，那么可以直接使用 import 来加载，如果组件由js+html组成，需要使用 myImport 来加载，myImport 是我自己封装的函数，在最后介绍。</p> <h2 id="设置菜单">设置菜单</h2> <p>我们先做一个简单的菜单：</p> <ul> <li>menu.js</li> </ul> <pre><code class="language-js">export default {   name: 'menu',   template: `     &lt;router-link :to="{name:'Home'}"&gt;首页&lt;/router-link&gt;&lt;br&gt;&lt;br&gt;     &lt;router-link :to="{name:'pinia'}"&gt;pinia&lt;/router-link&gt;&lt;br&gt;&lt;br&gt;     &lt;router-link :to="{name:'h-test'}"&gt;h的演示&lt;/router-link&gt;&lt;br&gt;&lt;br&gt;     &lt;router-link :to="{name:'jsx-test'}"&gt;jsx的演示&lt;/router-link&gt;&lt;br&gt;&lt;br&gt;   `,   setup() {     return {     }   } }</code></pre> <p>这里先使用 router-link 做个简单的连接，也可以使用 el-menu 做菜单。</p> <h2 id="状态管理">状态管理</h2> <p>这里采用最新的 pinia 进行状态管理，因为 Vuex 有点臃肿。</p> <p>首先需要在 main.js 里面挂载pinia，见 main 的部分。<br /> 然后我们建立一个js文件，定义一个状态，再建立一个js文件作为组件。</p> <ul> <li>count.js</li> </ul> <pre><code class="language-js">const { defineStore } = Pinia  const testPromie = () =&gt; {   return new Promise((resolve) =&gt; {     setTimeout(() =&gt; {       resolve(100)     }, 500)   }) }  export const useCounterStore = defineStore('counter', {   state: () =&gt; {     return { count: 0, name: '' }   },   actions: {     increment() {       this.count ++     },     async loadData(val, state) {       const foo = await testPromie()       this.count += foo       this.name = 'async 赋值：' + new Date().valueOf()     },     loadData2(val, state) {       testPromie().then((val) =&gt; {         this.count += val         this.name = '异步赋值：' + new Date().valueOf()       })     }   } })</code></pre> <ul> <li>pinia.js</li> </ul> <p>然后在组件里面引入：</p> <pre><code class="language-js">// 状态 import { useCounterStore } from './count.js'  export default {   name: 'pinia-test',   setup() {     const test = useCounterStore()     return { count }   } }</code></pre> <ul> <li>pinia.html</li> </ul> <p>我们可以把 template 部分拿出去，做成 html 文件：</p> <pre><code class="language-html">&lt;div&gt;   测试pinia的状态&lt;br&gt;   {{ test }}&lt;br&gt;   &lt;el-button type="" @click="test.increment()"&gt;修改&lt;/el-button&gt; &lt;/div&gt;</code></pre> <p>这样一个简单的项目结构就搭建起来了。</p> <h1 id="小结">小结</h1> <p>本篇仅为过渡，并不是说正式项目要用这种方式开发，因为缺点也是很明显的。</p> <p>当然也是有一些优点：</p> <ul> <li>可以更充分的利用CDN，缓存vue.js这类的变化频率低的 js 文件，只需要更新业务相关的代码即可。</li> <li>如果CDN不卡的话，加载速度可以更快。</li> <li>可以利用CDN的资源，缓解自己服务器的压力。</li> <li>项目可以分模块开发，稳定且基础的模块可以打包、发布到CDN里面使用。</li> </ul> <h1 id="源码和演示">源码和演示</h1> <ul> <li>源码：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://gitee.com/naturefw-project/vue3-cnd"  target="_blank" rel="nofollow">https://gitee.com/naturefw-project/vue3-cnd</a></li> <li>演示：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://naturefw-project.gitee.io/vue3-cnd/"  target="_blank" rel="nofollow">https://naturefw-project.gitee.io/vue3-cnd/</a></li> </ul> <h1 id="补充">补充</h1> <p>template 部分，如果用字符串的方式写，那么比较麻烦，所以可以分为 html 文件的方式来写，这样可以使用提示、补全和验证等功能。</p> <p>然后做一个加载的函数 myImport ：</p> <pre><code class="language-js">window.myImport = (url) =&gt; {   return new Promise((resolve, reject) =&gt; {     const ver = window.__ver || ''     const baseUrl = window.__basrUrl || '/src/'     // 先加载 js     import(baseUrl + url + '.js' + ver).then((resjs) =&gt; {       const js = resjs.default       if (!js.template) {         // 如果模板是空的，表示需要加载 html作为模板         axios.get(baseUrl + url + '.html' + ver).then((resHTML) =&gt; {           js.template = resHTML.data           resolve(js)         })       } else {         // 否则直接使用 js 注册组件         resolve(js)       }     })   }) }</code></pre> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-233.htm">echarts根据数据动态生成不同条数的折线图</a></p>
                                        <p>下一个：<a href="/html/category/article-235.htm">lombok和JPA的死递归</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-246.htm">Vue内置组件的component标签</a></h4>
                <p>component标签：它的用途是可以动态绑定我们的组件,根据数据不同更换不同的组件. 有一个is属性，is的作用就是显示指定的组件 官方说明：渲染一个“元组件”为动态组件。依 is 的值，来决定哪个</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-224.htm">jackson   json对象、实体类相互转换</a></h4>
                <p>json对象转换为实体类，使用jackson 进行jsonObject、实体类对象转换。 首先导入依赖 &lt;dependency&gt;     &lt;groupId&gt;com.faster</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-229.htm">Docker提交镜像-数据卷-可视化</a></h4>
                <p>在熟悉完Docker的安装及基本命令使用之后，我们开始学习下Docker的进阶操作：包括但不限于新建Docker镜像，数据卷的挂载，以及Docker的可视化等。 Docker提交镜像 启动镜像 我们先</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1054.htm">mysql 中插入百万条数据</a></h4>
                <p>文章目录  mysql 中插入百万条数据     1. 创建测试表 2. 开启二进制日志 3. 创建一个生成随机字符串的函数: 4. 调用上边的两个插入函数        mysql 中插入百万条数据</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1351.htm">Rabbit MQ 怎么保证可靠性、幂等性、消费顺序</a></h4>
                <p>RabbitMQ如何保证消息的可靠性 RabbitMQ消息丢失的三种情况 生产者弄丢消息时的解决方法  方法一：生产者在发送数据之前开启RabbitMQ的事务(采用该种方法由于事务机制，会导致吞吐量下</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-228.htm"># kubernetes调度之nodeName与NodeSelector</a></h4>
                <p>系列目录  Kubernetes的调度有简单，有复杂，指定NodeName和使用NodeSelector调度是最简单的，可以将Pod调度到期望的节点上。 本文主要介绍kubernetes调度框架中的N</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-262.htm">Python 认识列表和元组</a></h4>
                <p>列表和元组，都是一个可以放置任何数据类型的有序集合。   列表的特性 动态的（mutable）：长度大小不固定，可以随意地增加、删减或者改变元素。 会修改原来列表中的元素，而不会创建新的列表。 # 新</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-253.htm">win11系统怎么设置软件安装来源</a></h4>
                <p>&nbsp; &nbsp;我们为了保证电脑安装软件的安全性，以及不会下载到一些有流氓软件之类的问题出现，可以在电脑中设置应用下载来源，那么win11系统怎么设置软件安装来源呢?今天为大家分享win11</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-235.htm">lombok和JPA的死递归</a></h4>
                <p>这是一个Bug JPA我觉得是一个封装的很棒的框架，至于说很臃肿这个事，我觉得在需求需要很多复杂查询的时候，不适合用JPA。因为它的封装太棒了，以致于增强了表和实体类之间的耦合。不过在一些简单查询的部</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-261.htm">Java 集合框架ArrayList 储存自定义数组</a></h4>
                <p>package LinkedList;  import java.util.ArrayList; import java.util.Iterator;  import p.bean.Person;  </p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>