<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-95.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Python OpenCV实现3种滤镜效果实例_python_ - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Python OpenCV实现3种滤镜效果实例_python_</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">前言</a></li> <li><a href="#_label1" rel="nofollow">浮雕滤镜效果</a></li> <li><a href="#_label2" rel="nofollow">雕刻滤镜效果</a></li> <li><a href="#_label3" rel="nofollow">凸透镜滤镜效果</a></li> <li><a href="#_label4" rel="nofollow">总结</a></li> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>前言</h2> <p>本篇文章要使用OpenCV、Numpy 和Math这3个工具包实现一个简单的滤镜编辑器。在这个滤镜编辑器中，包含了3种滤镜效果，它们分别是浮雕滤镜、雕刻滤镜和凸透镜滤镜。本篇文章将对目标图像（如图1所示）进行处理，使得目标图像分别呈现浮雕滤镜（如图2所示）、雕刻滤镜（如图3所示）和凸透镜滤镜（如图4所示）的视觉效果。</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220413/06e3852ed5a090cc3451df22fed2c24d.jpg"></p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220413/c66ffa83a043a2964660886d28d544d7.jpg"></p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220413/09e490a9749fcf5f84b6a04cb3d1adf5.jpg"></p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220413/385bd7dc214359f58688a965d857898f.jpg"></p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>浮雕滤镜效果</h2> <p>为了实现浮雕滤镜效果，首先要把实现浮雕滤镜效果的原理搞清楚、弄明白。实现浮雕滤镜效果的原理如下所示：</p> <ul> <li> <p>根据灰度图像中的某一个像素的像素值与其周围像素的像素值之间的差值，确定这个像素经过卷积处理后的像素值；</p> </li> <li> <p>由于边缘点的像素值与其周围像素的像素值之间的差值较大，经卷积处理后，导致这些边缘点较亮，从而达到凸显边缘的目的，进而形成浮雕状；</p> </li> <li> <p>为经卷积处理后的每一个像素加上一个灰度偏移值128，作为呈现浮雕滤镜效果的图像的底色。</p> </li> </ul> <p>明确了实现浮雕滤镜效果的原理后，再来学习一下实现浮雕滤镜效果的算法。实现浮雕滤镜效果的算法如下所示：</p> <ul> <li> <p>对灰度图像中的每一个像素进行卷积处理；</p> </li> <li> <p>实现浮雕滤镜效果的卷积核算子需采用如下矩阵：</p> </li> </ul> <blockquote> <p>[[1, 0], [0, -1]]</p> </blockquote> <p>掌握了实现浮雕滤镜效果的原理和算法后，下面开始编写用于实现浮雕滤镜效果的方法，即<code>fuDiao()</code>方法。<code>fuDiao()</code>方法是一个自定义的、有参且有返回值的方法，<code>fuDiao()</code>方法的语法格式如下所示：</p> <div class="ay1code"> <pre class="brush:py;">def fuDiao(img):      ……# 省略方法体中的代码      return canvas</pre> </div> <p><strong>参数说明：</strong></p> <blockquote> <p> img：与目标图像对应的灰度图像。</p> </blockquote> <p><strong>返回值说明：</strong></p> <blockquote> <p>canvas：画布，用于呈现浮雕滤镜效果的图像。</p> </blockquote> <p>那么，<code>fuDiao()方法</code>被省略的代码各自发挥怎样的作用？此外，被省略的代码又是那些呢？</p> <p><strong>先要明确fuDiao()方法中被省略的代码各自发挥的作用是什么：</strong></p> <p><strong>因为用于实现浮雕滤镜效果的卷积核算子是一个二维矩阵，所以需要使用<code>Numpy工具包</code>中的<code>array()方法</code>创建这个二维矩阵。关键代码如下所示：</strong></p> <div class="ay1code"> <pre class="brush:py;">kernel = np.array([[1, 0], [0, -1]])</pre> </div> <p><strong>分别获取灰度图像中像素的行数和列数。关键代码如下所示：</strong></p> <div class="ay1code"> <pre class="brush:py;">row = img.shape[0]  col = img.shape[1]</pre> </div> <p>根据灰度图像中像素的行数和列数，创建一个等高、等宽的，纯黑色的画布。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">canvas = np.zeros([row, col], dtype=np.uint8)</pre> </div> <p>根据横、纵坐标，使用嵌套的for循环得到灰度图像中的每一个像素。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">for i in range(row - 1):  for j in range(col - 1):</pre> </div> <p>使用实现浮雕滤镜效果的卷积核算子，对灰度图像中的每一个像素进行卷积处理，并且为经卷积处理后的每一个像素加上一个灰度偏移值128。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">new_value = np.sum(img[i:i + 2, j:j + 2] * kernel) + 128</pre> </div> <p>对于经卷积处理且加上一个灰度偏移值后的每一个像素的像素值，如果大于255，那么等于255；如果小于0，那么等于0。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">if new_value &gt; 255:     new_value = 255     elif new_value &lt; 0:        new_value = 0    else:      pass</pre> </div> <p>把经过比较后的每一个像素的像素值根据坐标赋值给画布对应位置上的像素。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:js;">canvas[i, j] = new_value</pre> </div> <p>结合<code>fuDiao()方法</code>中被省略的代码和它们各自发挥的作用，就能够迅速完成<code>fuDiao()</code>方法的编写。<code>fuDiao()</code>方法的代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">def fuDiao(img):        kernel = np.array([[1, 0], [0, -1]])        row = img.shape[0]        col = img.shape[1]        canvas = np.zeros([row, col], dtype=np.uint8)        for i in range(row - 1):           for j in range(col - 1):               new_value = np.sum(img[i:i + 2, j:j + 2] * kernel) + 128               if new_value &gt; 255:                   new_value = 255                elif new_value &lt; 0:                   new_value = 0                else:                    pass               canvas[i, j] = new_value        return canvas</pre> </div> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>雕刻滤镜效果</h2> <p><strong>实现雕刻滤镜效果的原理与实现浮雕滤镜效果的原理大致相同，实现雕刻滤镜效果的原理如下所示：</strong></p> <ul> <li> <p>根据灰度图像中的某一个像素的像素值与其周围像素的像素值之间的差值，确定这个像素经过卷积处理后的像素值；</p> </li> <li> <p>由于边缘点的像素值与其周围像素的像素值之间的差值较大，经卷积处理后，导致这些边缘点较暗，从而达到凹陷边缘的目的，进而形成雕刻状；</p> </li> <li> <p>为经卷积处理后的每一个像素加上一个灰度偏移值128，作为呈现雕刻滤镜效果的图像的底色。</p> </li> </ul> <p><strong>虽然实现雕刻滤镜效果的原理与实现浮雕滤镜效果的原理大致相同，但是实现雕刻滤镜效果的算法与实现浮雕滤镜效果的算法大不相同。实现雕刻滤镜效果的算法如下所示：</strong></p> <ul> <li> <p>对灰度图像中的每一个像素进行卷积处理；</p> </li> <li> <p>实现雕刻滤镜效果的卷积核算子需采用如下矩阵：</p> </li> </ul> <div class="ay1code"> <pre class="brush:py;">[[-1, 0],  [0, 1]]</pre> </div> <p>掌握了实现雕刻滤镜效果的原理和算法后，下面开始编写用于实现雕刻滤镜效果的方法，即<code>diaoKe()</code>方法。与<code>fuDiao()</code>方法相同，<code>diaoKe()</code>方法也是一个自定义的、有参且有返回值的方法，<code>diaoKe()</code>方法的语法格式如下所示：</p> <div class="ay1code"> <pre class="brush:py;">def diaoKe(img):     ……# 省略方法体中的代码      return canvas</pre> </div> <p><strong>参数说明：</strong></p> <blockquote> <p>img：与目标图像对应的灰度图像。</p> </blockquote> <p><strong>返回值说明：</strong></p> <blockquote> <p>canvas：画布，用于呈现雕刻滤镜效果的图像。</p> </blockquote> <p><strong>diaoKe()方法被省略的代码与fuDiao()方法被省略的代码大同小异，首先明确下diaoKe()方法中被省略的代码各自发挥的作用是什么：</strong></p> <p><strong>用于实现雕刻滤镜效果的卷积核算子与用于实现浮雕滤镜效果的卷积核算子虽然不同，但也是一个二维矩阵，因此需要使用Numpy工具包中的array()方法创建这个二维矩阵。关键代码如下所示：</strong></p> <div class="ay1code"> <pre class="brush:py;">kernel = np.array([[-1, 0], [0, 1]])</pre> </div> <p>分别获取灰度图像中像素的行数和列数。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">row = img.shape[0]  col = img.shape[1]</pre> </div> <p>根据灰度图像中像素的行数和列数，创建一个等高、等宽的，纯黑色的画布。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">canvas = np.zeros([row, col], dtype=np.uint8)</pre> </div> <p>根据横、纵坐标，使用嵌套的for循环得到灰度图像中的每一个像素。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">for i in range(row - 1):  for j in range(col - 1):</pre> </div> <p>使用实现雕刻滤镜效果的卷积核算子，对灰度图像中的每一个像素进行卷积处理，并且为经卷积处理后的每一个像素加上一个灰度偏移值128。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">new_value = np.sum(img[i:i + 2, j:j + 2] * kernel) + 128</pre> </div> <p>对于经卷积处理且加上一个灰度偏移值后的每一个像素的像素值，如果大于255，那么等于255；如果小于0，那么等于0。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">  if new_value &gt; 255:        new_value = 255    elif new_value &lt; 0:        new_value = 0    else:        pass</pre> </div> <p>把经过比较后的每一个像素的像素值根据坐标赋值给画布对应位置上的像素。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:js;">canvas[i, j] = new_value</pre> </div> <p>结合<code>diaoKe()</code>方法中被省略的代码和它们各自发挥的作用，就能够迅速完成<code>diaoKe()</code>方法的编写。<code>diaoKe()</code>方法的代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">  def diaoKe(img):        kernel = np.array([[-1, 0], [0, 1]])        row = img.shape[0]        col = img.shape[1]        canvas = np.zeros([row, col], dtype=np.uint8)        for i in range(row - 1):            for j in range(col - 1):                new_value = np.sum(img[i:i + 2, j:j + 2] * kernel) + 128                if new_value &gt; 255:                    new_value = 255                elif new_value &lt; 0:                    new_value = 0                else:                    pass                canvas[i, j] = new_value        return canvas</pre> </div> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>凸透镜滤镜效果</h2> <p>所谓凸透镜滤镜效果，相当于用户使用凸透镜观察一幅图像而成的视觉效果。实现凸透镜滤镜效果的原理与实现浮雕滤镜效果的原理和实现雕刻滤镜效果的原理大不相同。下面将着重对实现凸透镜滤镜效果的原理进行讲解：</p> <ul> <li> <p>当使用凸透镜中心观察一幅图像时，被观察的图像区域将按照一定比例进行放大；相应地，这个区域的周围区域将被压缩；</p> </li> <li> <p>为了让放大后的图像区域看起来和谐自然，这些被压缩的周围区域要保持连续性。</p> </li> </ul> <p><strong>明确了实现凸透镜滤镜效果的原理后，再来学习一下实现凸透镜滤镜效果的算法。实现凸透镜滤镜效果的算法如下所示：</strong></p> <ul> <li> <p>根据目标图像的宽、高确定凸透镜的半径；</p> </li> <li> <p>选择一个凸函数作为映射函数；</p> </li> </ul> <p>如果目标图像中的某一个像素与目标图像中心之间的距离的平方不大于凸透镜的半径的平方（两个整数进行比较，保证比较结果的精确度），就使用映射函数对这个像素的横、纵坐标进行映射处理。</p> <p><strong>掌握了实现凸透镜滤镜效果的原理和算法后，下面开始编写用于实现凸透镜滤镜效果的方法，即<code>tuTouJing()</code>方法。与<code>fuDiao()</code>方法和<code>diaoKe()</code>方法相同，<code>tuTouJing()</code>方法也是一个自定义的、有参且有返回值的方法，<code>tuTouJing()</code>方法的语法格式如下所示：</strong></p> <div class="ay1code"> <pre class="brush:py;">def tuTouJing(img):      ……# 省略方法体中的代码      return canvas</pre> </div> <p>参数说明：</p> <blockquote> <p> img：目标图像。</p> </blockquote> <p>返回值说明：</p> <blockquote> <p>canvas：画布，用于呈现凸透镜滤镜效果的图像。</p> </blockquote> <p><strong>先要明确<code>tuTouJing()</code>方法中被省略的代码各自发挥的作用是什么：</strong></p> <p>分别获取目标图像中像素的行数和列数以及目标图像的通道数。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">row = img.shape[0]  col = img.shape[1]  channel = img.shape[2]</pre> </div> <p>根据目标图像中像素的行数和列数以及目标图像的通道数，创建一个等高、等宽、等通道数的，纯黑色的画布。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">canvas = np.zeros([row, col, channel], dtype=np.uint8)</pre> </div> <p>根据目标图像中像素的行数和列数，分别获取目标图像中心的横、纵坐标。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">center_x = row/2  center_y = col/2</pre> </div> <p>比较目标图像中心的横、纵坐标的大小，把较小的数值作为凸透镜的半径。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">radius = min(center_x, center_y)</pre> </div> <p>根据横、纵坐标，使用嵌套的for循环得到目标图像中的每一个像素。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">for i in range(row):  for j in range(col):</pre> </div> <p>计算目标图像中的每一个像素与目标图像中心之间的距离的平方和距离。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">distance = ((i-center_x) * (i-center_x) + (j-center_y) * (j-center_y))  new_dist = math.sqrt(distance)</pre> </div> <p>把目标图像中的每一个像素的像素值根据坐标赋值给画布对应位置上的像素。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">canvas[i,j,:] = img[i, j, :]</pre> </div> <p>如果目标图像中的某一个像素与目标图像中心之间的距离的平方不大于凸透镜的半径的平方，就使用映射函数对这个像素的横、纵坐标进行映射处理。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">if distance &lt;= radius**2:  new_i = np.int(np.floor(new_dist * (i-center_x) / radius + center_x))  new_j = np.int(np.floor(new_dist * (j-center_y) / radius + center_y))</pre> </div> <p>把经过映射处理后的每一个像素的像素值根据坐标赋值给画布对应位置上的像素。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">canvas[i,j,:] = img[new_i, new_j, :]</pre> </div> <p>结合tuTouJing()方法中被省略的代码和它们各自发挥的作用，就能够迅速完成tuTouJing()方法的编写。tuTouJing()方法的代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">  def tuTouJing(img):        row = img.shape[0]        col = img.shape[1]        channel = img.shape[2]        canvas = np.zeros([row, col, channel], dtype=np.uint8)        center_x = row/2        center_y = col/2        radius = min(center_x, center_y)        for i in range(row):            for j in range(col):                distance = ((i-center_x) * (i-center_x) + (j-center_y) * (j-center_y))                new_dist = math.sqrt(distance)                canvas[i,j,:] = img[i, j, :]                if distance &lt;= radius**2:                    new_i = np.int(np.floor(new_dist * (i-center_x) / radius + center_x))                    new_j = np.int(np.floor(new_dist * (j-center_y) / radius + center_y))                    canvas[i,j,:] = img[new_i, new_j, :]        return canvas</pre> </div> <p class="maodian"><a name="_label4" rel="nofollow"></a></p> <h2>总结</h2> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-94.htm">史上最简便的可以直接用的登录验证码攻略（前后端都有）</a></p>
                                        <p>下一个：<a href="/html/category/article-96.htm">python -mysql-excel数据导出-如何把python的list列表中的数据放入sql语句的in后的语句中的办法</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-234.htm">从 jQuery 到 Vue3 的快捷通道_在线工具</a></h4>
                <p>当初使用 jQuery 做了几个简单的项目，算是有一点点了解，现在学习Vue3，发现了一个可以快速转换思维的通道 —— 使用CDN的方式模拟 Vite 建立的项目！  CDN方式 jQuery的使用非</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-228.htm"># kubernetes调度之nodeName与NodeSelector</a></h4>
                <p>系列目录  Kubernetes的调度有简单，有复杂，指定NodeName和使用NodeSelector调度是最简单的，可以将Pod调度到期望的节点上。 本文主要介绍kubernetes调度框架中的N</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-222.htm">由浅入深，带你用JavaScript实现响应式原理（Vue2、Vue3响应式原理）</a></h4>
                <p>由浅入深，带你用JavaScript实现响应式原理 前言 为什么前端框架Vue能够做到响应式？当依赖数据发生变化时，会对页面进行自动更新，其原理还是在于对响应式数据的获取和设置进行了监听，一旦监听到数</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-216.htm">Citus 分布式 PostgreSQL 集群 &#8211; SQL Reference(SQL支持和变通方案)</a></h4>
                <p>由于Citus 通过扩展PostgreSQL 提供分布式功能，因此它与PostgreSQL 结构兼容。这意味着用户可以使用丰富且可扩展的PostgreSQL 生态系统附带的工具和功能来处理使用Citu</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-220.htm">SpringCloud&#8212;-Feign隔离和降级</a></h4>
                <p>限流是一种预防措施，虽然限流可以尽量避免因高并发而引起的服务故障，但服务还会因为其它原因而故障。 而要将这些故障控制在一定范围，避免雪崩，就要靠线程隔离（舱壁模式）和熔断降级手段了。线程隔离：调用者在</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-254.htm">图像处理学习笔记——BMP图片详解</a></h4>
                <p>一、位图和调色板的概念  1.位图（Bitmap）： 例如我们常说的屏幕分辨率为 640*480，刷新频率为70Hz，意思是说每行要扫描 640 个象素，一共有 480 行，每秒重复扫描屏幕 70 次</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-232.htm">Android中EditText光标的显示与隐藏方法</a></h4>
                <p>目录  Android EditText的光标的显示和隐藏 Android之第一次不显示EditText光标 总结   Android EditText的光标的显示和隐藏 一、java代码 1.编辑框</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-212.htm">定时器中 this 指向修改实现方法和原理讲解</a></h4>
                <p>定时器中 this 指向修改实现方法和原理讲解      1. 变量替换 2. 箭头函数 3. bind() 方法       定时器属于全局 window ，window.setTimeout();</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-244.htm">Redis事务详解</a></h4>
                <p>大家好，我是七淅。 如果你了解过关系型数据库事务的话，相信这篇文章对你来说是很容易理解的了。具体什么是事务我就不说不多了，直接讲 Redis 事务相关的部分。 首先，我们先来看下，Redis 是怎么执</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-262.htm">Python 认识列表和元组</a></h4>
                <p>列表和元组，都是一个可以放置任何数据类型的有序集合。   列表的特性 动态的（mutable）：长度大小不固定，可以随意地增加、删减或者改变元素。 会修改原来列表中的元素，而不会创建新的列表。 # 新</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">24</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>