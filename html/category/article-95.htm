<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-95.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>python基础知识-pycharm版 第七天 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">python基础知识-pycharm版 第七天</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2><a id="_0" rel="nofollow"></a>嵌套函数（内部函数）</h2> <p><strong>嵌套函数</strong>：在函数内部定义的函数！<br /> 【操作】嵌套函数定义</p> <pre><code class="prism language-python"><span class="token keyword">def</span><span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'outer running'</span><span class="token punctuation">)</span><span class="token keyword">def</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'inner running'</span><span class="token punctuation">)</span> 		 	inner<span class="token punctuation">(</span><span class="token punctuation">)</span> 	 outer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> <p>执行结果：<br /> outer running<br /> inner running</p> <p>上面程序中，inner()就是定义在outer函数内部的函数。inner()的定义和调用都在outer()函数内部<br /> 一般在什么情况下使用嵌套函数？<br /> 1.封装-数据隐藏<br /> 外部无法访问“嵌套函数”。<br /> 2.贯彻DRY(Don’tRepeatYourself)原则<br /> 嵌套函数，可以让我们在函数内部避免重复代码。<br /> 3.闭包</p> <h2><a id="nonlocal_26" rel="nofollow"></a>nonlocal关键字</h2> <p>nonlocal用来声明外层的局部变量。<br /> global用来声明全局变量。</p> <h2><a id="LEGB_29" rel="nofollow"></a>LEGB规则</h2> <p>Python在查找“名称”时，是按照LEGB规则查找的：<br /> Local–&gt;Enclosed–&gt;Global–&gt;Builtin<br /> Local指的就是函数或者类的方法内部<br /> Enclosed指的是嵌套函数（一个函数包裹另一个函数，闭包）<br /> Global指的是模块中的全局变量<br /> Builtin指的是Python为自己保留的特殊名称。<br /> 如果某个name映射在局部(local)命名空间中没有找到，接下来就会在闭包作用域(enclosed)进行搜索，如果闭包作用域也没有找到，Python就会到全局(global)命名空间中进行查找，最后会在内建(built-in)命名空间搜索（如果一个名称在所有命名空间中都没有找到，就会产生一个NameError）。</p> <h1><a id="61__37" rel="nofollow"></a>6章(1) 面向对象初步</h1> <p>面向对象编程将<strong>数据</strong>和<strong>操作数据相关的方法</strong>封装到<strong>对象</strong>中，组织代码和数据的方式更加接近人的思维，从而大大提高了编程的效率。<br /> Python完全采用了面向对象的思想，是真正面向对象的编程语言，完全支持面向对象的基本功能，例如：继承、多态、封装等<br /> 注：Python支持<strong>面向过程</strong>、<strong>面向对象</strong>、<strong>函数式编程</strong>等多种编程范式。</p> <h2><a id="_41" rel="nofollow"></a>面向对象和面向过程区别</h2> <p>步骤 ，执行者，找动词，简单<br /> 组成，设计者，找名词，复杂</p> <h2><a id="_44" rel="nofollow"></a>对象的进化</h2> <p>1.简单数据<br /> 像30,40，50.4等这些数字，可以看做是简单数据。最初的计算机编程，都是像这样的数字。<br /> 2.数组<br /> 将同类型的数据放到一起。比如：整数数组[20,30,40]，浮点数数组[10.2,11.3,12.4]，字符串数组：[“aa”,”bb”,”cc”]<br /> 3.结构体<br /> 将不同类型的数据放到一起，是C语言中的数据结构。<br /> 4.对象<br /> 将不同类型的数据、方法（即函数）放到一起，就是对象。比如：</p> <pre><code class="prism language-python"><span class="token keyword">class</span><span class="token class-name">Student</span><span class="token punctuation">:</span><span class="token comment"># 类对象</span> 	company<span class="token operator">=</span><span class="token string">'SXT'</span><span class="token comment">#类属性</span> 	count<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">def</span><span class="token function">__int__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>score<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#构造方法 第一个参数必须是self</span> 		self<span class="token punctuation">.</span>name<span class="token operator">=</span> name<span class="token comment">#实例属性</span> 		self<span class="token punctuation">.</span>score<span class="token operator">=</span> score 		Student<span class="token punctuation">.</span>count<span class="token operator">=</span>Student<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">def</span><span class="token function">say_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#实例方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我的公司是："</span><span class="token punctuation">,</span>Student<span class="token punctuation">.</span>company<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0}的分数是{1}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span>  s1<span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'徐鑫'</span>，<span class="token number">18</span><span class="token punctuation">)</span><span class="token comment"># s1实例对象、,自动调用__int__</span> s1<span class="token punctuation">.</span>say_score<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> <h2><a id="_71" rel="nofollow"></a>类的定义</h2> <p>我们通过类定义数据类型的属性（数据）和方法（行为）,也就是说，“<strong>类</strong>将行为和状态打包在一起”<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220723/f5bdf1244e05fd41f724bf1e6510cc2d.jpg" alt="python基础知识-pycharm版 第七天"><br /><strong>对象</strong>是类的具体实体，一般称为“类的实例”。类看做“饼干模具”，对象就是根据这个“模具”制造出的“饼干”。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220723/0cb60c0c76717a2777225faae945b4ac.jpg" alt="python基础知识-pycharm版 第七天"><br /> Python中，“一切皆对象”。类也称为“类对象”，类的实例也称为“实例对象”。<br /> 定义类的语法格式如下：<br /> class类名：<br /> 类体<br /> 要点如下：<br /> 1.类名必须符合“标识符”的规则；一般规定，首字母大写，多个单词使用“驼峰原则”。<br /> 2.类体中我们可以定义属性和方法。<br /> 3.属性用来描述数据，方法(即函数)用来描述这些数据相关的操作。</p> <h2><a id="__init____new___84" rel="nofollow"></a>__init__构造方法和__new__方法</h2> <p>一个Python对象包含如下部分：<br /> 1.id（identity识别码）<br /> 2.type（对象类型）<br /> 3.value（对象的值）<br /> (1)属性（attribute）<br /> (2)方法（method）<br /> 创建对象，我们需要定义构造函数__init__()方法。构造方法用于执行“实例对象的初始化工作”，即对象创建后，初始化当前对象的相关属性，无返回值。<br /><strong>init</strong>()的要点如下：<br /> 1.名称固定，必须为：<strong>init</strong>()<br /> 2.第一个参数固定，必须为：self。self指的就是刚刚创建好的实例对象。<br /> 3.构造函数通常用来初始化实例对象的实例属性，如下代码就是初始化实例属性：name和score。<br /> 4.通过“类名(参数列表)”来调用构造函数。调用后，将创建好的对象返回给相应的变量。比如：s1=Student(‘张三’,80)<br /> 5.<strong>init</strong>()方法：初始化创建好的对象，初始化指的是：“给实例属性赋值”<br /> 6.<strong>new</strong>()方法:用于创建对象，但我们一般无需重定义该方法。<br /> 7.如果我们不定义__init__方法，系统会提供一个默认的__init__方法。如果我们定义了带参的__init__方法，系统不创建默认的__init__方法。</p> <h2><a id="_100" rel="nofollow"></a>实例属性和实例方法</h2> <h3><a id="_101" rel="nofollow"></a>实例属性</h3> <p>实例属性是从属于实例对象的属性，也称为“实例变量”。他的使用有如下几个要点：<br /> 1.实例属性一般在__init__()方法中通过如下代码定义：<br /> self.实例属性名=初始值<br /> 2.在本类的其他实例方法中，也是通过self进行访问：<br /> self.实例属性名<br /> 3.创建实例对象后，通过实例对象访问：<br /> obj01=类名()#创建对象，调用__init__()初始化属性<br /> obj01.实例属性名=值#可以给已有属性赋值，也可以新加属性</p> <h3><a id="_110" rel="nofollow"></a>实例方法</h3> <p>实例方法是从属于实例对象的方法。实例方法的定义格式如下：<br /> def 方法名 (self[,形参列表])：<br /> 函数体<br /> 方法的调用格式如下：<br /> 对象.方法名([实参列表])</p> <p>要点：<br /> 1.定义实例方法时，第一个参数必须为self。和前面一样，self指当前的实例对象。<br /> 2.调用实例方法时，不需要也不能给self传参。self由解释器自动传参。<br /> ·其他操作：<br /> 1.dir(obj)可以获得对象的所有属性、方法<br /> 2.obj.<strong>dict</strong> 对象的属性字典<br /> 3.pass 空语句<br /> 4.isinstance（对象,类型）判断“对象”是不是“指定类型”</p> <h2><a id="_125" rel="nofollow"></a>类对象、类属性、类方法、静态方法</h2> <h3><a id="_126" rel="nofollow"></a>类对象</h3> <p>“class类名：”。实际上，当解释器执行class语句时，就会创建一个类对象。<br /> 注】pass为空语句。就是表示什么都不做，只是作为一个占位符存在。当你写代码时，遇到暂时不知道往方法或者类中加入什么时，可以先用pass占位，后期再补上。</p> <h3><a id="_129" rel="nofollow"></a>类属性</h3> <p>类属性是从属于“类对象”的属性，也称为“类变量”。由于，类属性从属于类对象，可以被所有实例对象共享。<br /><strong>类属性</strong>的定义方式：<br /> class 类名：<br /> 类变量名=初始值</p> <h3><a id="_134" rel="nofollow"></a>类方法</h3> <p>类方法是从属于“类对象”的方法。类方法通过装饰器@classmethod来定义，格式如下：</p> <pre><code class="prism language-python"><span class="token decorator annotation punctuation">@classmethod</span><span class="token keyword">def</span> 类方法名<span class="token punctuation">(</span>cls<span class="token punctuation">[</span>，形参列表<span class="token punctuation">]</span><span class="token punctuation">)</span>： 	函数体</code></pre> <pre><code class="prism language-python"><span class="token keyword">class</span><span class="token class-name">Student</span><span class="token punctuation">;</span> 	company<span class="token operator">=</span><span class="token string">'SXT'</span><span class="token decorator annotation punctuation">@classmethod</span><span class="token keyword">def</span><span class="token function">printCompany</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>company<span class="token punctuation">)</span>  Student<span class="token punctuation">.</span>printCompany<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> <p>要点如下：<br /> 1.@classmethod必须位于方法上面一行<br /> 2.第一个cls必须有；cls指的就是“类对象”本身；<br /> 3.调用类方法格式：“类名.类方法名(参数列表)”。参数列表中，不需要也不能给cls传值。<br /> 4.类方法中访问实例属性和实例方法会导致错误<br /> 5.子类继承父类方法时，传入cls是子类对象，而非父类对象</p> <h2><a id="_162" rel="nofollow"></a>静态方法</h2> <p>静态方法通过装饰器@staticmethod来定义，格式如下：</p> <pre><code class="prism language-python"><span class="token decorator annotation punctuation">@staticmethod</span><span class="token keyword">def</span> 静态方法名<span class="token punctuation">(</span><span class="token punctuation">[</span>形参列表<span class="token punctuation">]</span><span class="token punctuation">)</span>： 	函数体</code></pre> <pre><code class="prism language-python"><span class="token keyword">class</span><span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 	company<span class="token operator">=</span><span class="token string">'sxt'</span><span class="token decorator annotation punctuation">@staticmethod</span><span class="token keyword">def</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0}+{1}={2}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token operator">+</span>b Student<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span></code></pre> <p>要点如下：<br /> 1.@staticmethod必须位于方法上面一行<br /> 2.调用静态方法格式：“类名.静态方法名(参数列表)”。<br /> 3.静态方法中访问实例属性和实例方法会导致错误</p> <h2><a id="__del___187" rel="nofollow"></a>__del__方法(析构函数)和垃圾回收机制</h2> <pre><code class="prism language-python"><span class="token keyword">class</span><span class="token class-name">Person</span><span class="token punctuation">:</span><span class="token keyword">def</span><span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"销毁对象：{0}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span> p1<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token punctuation">)</span> p2<span class="token operator">=</span>Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">del</span> p2<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"程序结束"</span><span class="token punctuation">)</span></code></pre> <p>运算结果：<br /> 销毁对象：&lt;<strong>main</strong>.Personobjectat0x02175610&gt;<br /> 程序结束<br /> 销毁对象：&lt;<strong>main</strong>.Personobjectat0x021755D0&gt;</p> <h2><a id="__call___202" rel="nofollow"></a>__call__方法和可调用对象</h2> <p>定义了__call__方法的对象，称为“可调用对象”，即该对象可以像函数一样被调用。</p> <pre><code class="prism language-python"><span class="token keyword">class</span><span class="token class-name">SalaryAccount</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">'''工资计算类'''</span><span class="token keyword">def</span><span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>salary<span class="token punctuation">)</span><span class="token punctuation">:</span> 		yearSalary<span class="token operator">=</span>salary<span class="token operator">*</span><span class="token number">12</span> 		daySalary<span class="token operator">=</span>salary<span class="token operator">//</span><span class="token number">30</span> 		hourSalary<span class="token operator">=</span>daySalary<span class="token operator">//</span><span class="token number">8</span><span class="token keyword">return</span><span class="token builtin">dict</span><span class="token punctuation">(</span>monthSalary<span class="token operator">=</span>salary<span class="token punctuation">,</span>yearSalary<span class="token operator">=</span>yearSalary<span class="token punctuation">,</span>daySalary<span class="token operator">=</span>daySalary<span class="token punctuation">,</span>hourSalary<span class="token operator">=</span>hourSalary<span class="token punctuation">)</span>  s<span class="token operator">=</span>SalaryAccount<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <p>运行结果：<br /> {‘monthSalary’:5000,‘yearSalary’:60000,‘daySalary’:166,‘hourSalary’:20}</p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-94.htm">计算机网络 | TCP 连接的建立 和 TCP 连接的断开</a></p>
                                        <p>下一个：<a href="/html/category/article-96.htm">SQL SERVER使用表分区优化性能_MsSql</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-242.htm">SpringSecurity核心服务详解</a></h4>
                <p>现在我们对 Spring Security 体系结构及其核心类有了一个高层次的概述，让我们更仔细地看一两个核心接口及其实现，特别是AuthenticationManager&nbsp;、UserDet</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-232.htm">使用JSR-303 Validation后端验证</a></h4>
                <p>&nbsp; 一、JSR-303简介：官网  JSR-303 是 JAVA EE 6 中的一项子规范，叫做 Bean Validation，官方参考实现是Hibernate Validator。 此实</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-250.htm">Springboot 设置过滤器以及重复读取request里的body</a></h4>
                <p>需求：request的content-type为applciation/json，进入controller之前需要把body中的参数取出来做一次处理，然后和hearder中的另一个参数做对比。 思路：</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-227.htm">企业应用架构研究系列十九：Docker开发环境</a></h4>
                <p>　　软件行业流行这样一个说法，由于Docker 技术的成熟和该技术被广大厂商的普遍应用，成就了微服务领域的快速成长，衍生了云原生技术和公有云的进一步推广。我个人认为Dockers 技术、微服务技术、云</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-225.htm">@Scheduled 动态配置cron</a></h4>
                <p>一、在application.yml中添加cron scheduled:   cron:     test:"*/10 * * * * ?" 二、在启动类添加@EnableScheduling @Sp</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-210.htm">Code For Better 谷歌开发者之声—— 在 Windows 10 上对 Google Chrome 进行故障排除</a></h4>
                <p>???? 个人网站:【 海拥】【小霸王游戏机】 ???? 风趣幽默的前端学习课程：????28个案例趣学前端 ???? 想寻找共同学习交流、摸鱼划水的小伙伴，请点击【摸鱼学习交流群】 ???? 免费且</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-213.htm">springboot读取resources下文件方式</a></h4>
                <p>项目中很多时候需要读取自定义配置文件，本地开发工具怎么写都成功但是部署到服务其上就出现问题， 异常BOOT-INF/classes!/config.xml (文件名、目录名或卷标语法不正确.)路径中带</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-207.htm">MySQL——union(合并结果集)、limit(获取部分数据)、关于MySQL中常用数据类型</a></h4>
                <p>博客目录 1、union(合并结果集) 2、limit(获取一张表中某部分数据) 3、表——创建表、删除表 4、关于MySQL中的数据类型  一、union(合并结果集)  将两个查询结果合并(可以是</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-245.htm">go语言实战&#8212;&#8211;28&#8212;&#8211;Gin、rest full api和mysql实现增删改查</a></h4>
                <p>一 Gin、rest full api和mysql实现增删改查  1 目前架构、含义以及对项目进行go mod gin_restful的项目目录。 每个目录的意思描述： 对gin_restful项目进</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-261.htm">docker存储路径修改</a></h4>
                <p>docker修改对应的存储路径 修改daemon.json的内容不进行复述。 假设你已经编辑好/etc/docker/daemon.json文件的graph配置，要将其从d01修改到d02 {   "</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>