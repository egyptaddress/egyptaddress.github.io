<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-147.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>ASP.NET Core使用EF创建关系模型_实用技巧 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">ASP.NET Core使用EF创建关系模型_实用技巧</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				  			 <div id="log-box">  				<div id="catalog"><ul id="catalog-ul"> <li><i class="be be-arrowright"></i> <a href="#title-0" title="12.1.1数据注释">12.1.1数据注释</a></li> <li><i class="be be-arrowright"></i> <a href="#title-1" title="12.1.2Fluent API">12.1.2Fluent API</a></li> </ul><span class="log-zd"><span class="log-close"><a title="隐藏目录"><i class="be be-cross"></i><strong>目录</strong></a></span></span></div>  			</div> <div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">1.关系</a></li> <li><a href="#_label1" rel="nofollow">2.术语定义</a></li> <li><a href="#_label2" rel="nofollow">3.约定</a></li> <li><a href="#_label3" rel="nofollow">4.完全定义的关系</a></li> <li><a href="#_label4" rel="nofollow">5.无外键属性</a></li> <li><a href="#_label5" rel="nofollow">6.单个导航属性</a></li> <li><a href="#_label6" rel="nofollow">7.数据注释</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_6_0" rel="nofollow">7.1ForeignKey</a></li> <li><a href="#_lab2_6_1" rel="nofollow">7.2InverseProperty</a></li> </ul> <li><a href="#_label7" rel="nofollow">8.Fluent API</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_7_2" rel="nofollow">8.1单个导航属性</a></li> <li><a href="#_lab2_7_3" rel="nofollow">8.2ForeignKey</a></li> <li><a href="#_lab2_7_4" rel="nofollow">8.3无导航属性</a></li> </ul> <li><a href="#_label8" rel="nofollow">9.主体密钥</a></li> <ul class="second_class_ul"></ul> <li><a href="#_label9" rel="nofollow">10.必需和可选的关系</a></li> <ul class="second_class_ul"></ul> <li><a href="#_label10" rel="nofollow">11.级联删除</a></li> <ul class="second_class_ul"></ul> <li><a href="#_label11" rel="nofollow">12.其他关系模式</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_11_5" rel="nofollow">12.1一对一</a></li> <ul class="third_class_ul"> <li><a href="#_label3_11_5_0" rel="nofollow">12.1.1数据注释</a></li> <li><a href="#_label3_11_5_1" rel="nofollow">12.1.2Fluent API</a></li> </ul> <li><a href="#_lab2_11_6" rel="nofollow">12.2多对多</a></li> <ul class="third_class_ul"></ul> </ul> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>1.关系</h2> <p>关系定义两个实体之间的关系。在关系型数据库中，这由外键约束表示。</p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>2.术语定义</h2> <p>有许多术语用于描述关系：</p> <ul> <li>相关实体：这是包含外键属性的实体。有时称为关系的"子级"。</li> <li>主体实体：这是包含主/备用键属性的实体。有时称为关系的 "父项"。</li> <li>外键：依赖实体中的属性，用于存储与实体相关的主体键属性的值。</li> <li>主体密钥：唯一标识主体实体的属性。这可能是主键或备用密钥。</li> <li>导航属性：在主体和/或从属实体上定义的属性，该属性包含对相关实体的引用。</li> <li>集合导航属性：一个导航属性，其中包含对多个相关实体的引用。</li> <li>引用导航属性：保存对单个相关实体的引用的导航属性。</li> <li>反向导航属性：讨论特定导航属性时，此术语是指关系另一端的导航属性。</li> </ul> <p>下面的代码列表显示了与之间Blog的一对多关系Post</p> <ul> <li>Post是依赖实体</li> <li>Blog是主体实体</li> <li>Post.BlogId为外键</li> <li>Blog.BlogId是主体键（在这种情况下是主键，而不是备用键）</li> <li>Post.Blog是一个引用导航属性</li> <li>Blog.Posts是集合导航属性</li> <li>Post.Blog是的Blog.Posts反向导航属性（反之亦然）</li> </ul> <div class="ay1code"> <pre class="brush:csharp;">public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }      public List&lt;Post&gt; Posts { get; set; }  }  public class Post  {      public int PostId { get; set; }      public string Title { get; set; }      public string Content { get; set; }      public int BlogId { get; set; }      public Blog Blog { get; set; }  }</pre> </div> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>3.约定</h2> <p>按照约定，当发现类型上有导航属性时，将创建关系。如果属性指向的类型不能由当前的数据库提供程序映射为标量类型，则该属性视为一个导航属性。</p> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>4.完全定义的关系</h2> <p>关系最常见的模式是在关系两端定义导航属性，在依赖实体类中定义外键属性。<br />如果在两个类型之间找到一对导航属性，则这些属性将配置为同一关系的反向导航属性。<br />如果依赖实体包含名为&lt;primary key property name&gt;、&lt;navigation property name&gt;&lt;primary key property name&gt;或&lt;principal entity name&gt;&lt;primary key property name&gt;的属性，则该属性将被配置为外键。</p> <div class="ay1code"> <pre class="brush:csharp;">public class Blog  {      public int BlogId { get; set; }  　public string Url { get; set; }      //导航属性      public List&lt;Post&gt; Posts { get; set; }  }  public class Post  {      public int PostId { get; set; }      public string Title { get; set; }      public string Content { get; set; }      //外键属性      public int BlogId { get; set; }      //反向导航属性      public Blog Blog { get; set; }  }</pre> </div> <p class="maodian"><a name="_label4" rel="nofollow"></a></p> <h2>5.无外键属性</h2> <p>尽管建议在依赖实体类中定义外键属性，但这并不是必需的。如果未找到外键属性，则会以该名称&lt;navigation property name&gt;&lt;principal key property name&gt;引入阴影外键属性。</p> <div class="ay1code"> <pre class="brush:csharp;">public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }      //阴影导航属性      public List&lt;Post&gt; Posts { get; set; }  }  public class Post  {      public int PostId { get; set; }      public string Title { get; set; }      public string Content { get; set; }       //阴影反向导航属性      public Blog Blog { get; set; }  }</pre> </div> <p class="maodian"><a name="_label5" rel="nofollow"></a></p> <h2>6.单个导航属性</h2> <p>只包含一个导航属性（无反向导航，没有外键属性）就足以具有约定定义的关系。 还可以有一个导航属性和一个外键属性。</p> <div class="ay1code"> <pre class="brush:csharp;">public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }      //阴影导航属性      public List&lt;Post&gt; Posts { get; set; }  }  public class Post  {      public int PostId { get; set; }      public string Title { get; set; }      public string Content { get; set; }  }</pre> </div> <p class="maodian"><a name="_label6" rel="nofollow"></a></p> <h2>7.数据注释</h2> <p>可以使用两个数据批注来配置关系[ForeignKey]和[InverseProperty]。System.ComponentModel.DataAnnotations.Schema命名空间中提供了这些项。</p> <p class="maodian"><a name="_lab2_6_0" rel="nofollow"></a></p> <h3>7.1ForeignKey</h3> <p>你可以使用数据批注来配置应用程序作给定关系的外键属性的属性。通常，当不按约定发现外键属性时，会执行此操作。</p> <div class="ay1code"> <pre class="brush:csharp;">namespace EFModeling.DataAnnotations.Relationships.ForeignKey  {      class MyContext : DbContext      {          public DbSet&lt;Blog&gt; Blogs { get; set; }          public DbSet&lt;Post&gt; Posts { get; set; }      }      #region Entities      public class Blog      {          public int BlogId { get; set; }          public string Url { get; set; }          //导航属性          public List&lt;Post&gt; Posts { get; set; }      }      public class Post      {          public int PostId { get; set; }          public string Title { get; set; }          public string Content { get; set; }          //外键          public int BlogForeignKey { get; set; }          //设置反向导航外键          [ForeignKey("BlogForeignKey")]          public Blog Blog { get; set; }      }      #endregion  }</pre> </div> <p class="maodian"><a name="_lab2_6_1" rel="nofollow"></a></p> <h3>7.2InverseProperty</h3> <p>您可以使用数据批注来配置依赖项和主体实体上的导航属性如何配对。这通常在两个实体类型之间存在多个导航属性对时执行。</p> <div class="ay1code"> <pre class="brush:csharp;">namespace EFModeling.DataAnnotations.Relationships.InverseProperty  {      class MyContext : DbContext      {          public DbSet&lt;Post&gt; Posts { get; set; }          public DbSet&lt;User&gt; Users { get; set; }      }      #region Entities      public class Post      {          public int PostId { get; set; }          public string Title { get; set; }          public string Content { get; set; }            public int AuthorUserId { get; set; }          public User Author { get; set; }            public int ContributorUserId { get; set; }          public User Contributor { get; set; }      }      public class User      {          public string UserId { get; set; }          public string FirstName { get; set; }          public string LastName { get; set; }                    [InverseProperty("Author")]          public List&lt;Post&gt; AuthoredPosts { get; set; }                   [InverseProperty("Contributor")]          public List&lt;Post&gt; ContributedToPosts { get; set; }      }      #endregion  }</pre> </div> <p class="maodian"><a name="_label7" rel="nofollow"></a></p> <h2>8.Fluent API</h2> <p>若要在熟知的API中配置关系，请首先标识构成关系的导航属性。HasOne或HasMany标识要开始配置的实体类型上的导航属性。然后，将调用链接到WithOne或WithMany以标识反向导航。HasOne/WithOne用于引用导航属性，HasMany / WithMany用于集合导航属性。</p> <div class="ay1code"> <pre class="brush:csharp;">namespace EFModeling.FluentAPI.Relationships.NoForeignKey  {      #region Model      class MyContext : DbContext      {          public DbSet&lt;Blog&gt; Blogs { get; set; }          public DbSet&lt;Post&gt; Posts { get; set; }          protected override void OnModelCreating(ModelBuilder modelBuilder)          {              modelBuilder.Entity&lt;Post&gt;()                  //配置一对多关系                  .HasOne(p =&gt; p.Blog)                  .WithMany(b =&gt; b.Posts);          }      }      public class Blog      {          public int BlogId { get; set; }          public string Url { get; set; }          public List&lt;Post&gt; Posts { get; set; }      }      public class Post      {          public int PostId { get; set; }          public string Title { get; set; }          public string Content { get; set; }          public Blog Blog { get; set; }      }      #endregion  }</pre> </div> <p class="maodian"><a name="_lab2_7_2" rel="nofollow"></a></p> <h3>8.1单个导航属性</h3> <p>如果只有一个导航属性，则用WithOne、WithMany的无参数重载。这表示在概念上，关系的另一端有一个引用或集合，但实体类中不包含导航属性。</p> <div class="ay1code"> <pre class="brush:csharp;">namespace EFModeling.FluentAPI.Relationships.OneNavigation  {      #region Model      class MyContext : DbContext      {          public DbSet&lt;Blog&gt; Blogs { get; set; }          public DbSet&lt;Post&gt; Posts { get; set; }          protected override void OnModelCreating(ModelBuilder modelBuilder)          {              modelBuilder.Entity&lt;Blog&gt;()                  //配置多对一关系                  .HasMany(b =&gt; b.Posts)                  .WithOne();          }      }      public class Blog      {          public int BlogId { get; set; }          public string Url { get; set; }          //导航属性          public List&lt;Post&gt; Posts { get; set; }      }      public class Post      {          public int PostId { get; set; }          public string Title { get; set; }          public string Content { get; set; }      }      #endregion  }</pre> </div> <p class="maodian"><a name="_lab2_7_3" rel="nofollow"></a></p> <h3>8.2ForeignKey</h3> <p>你可以使用API来配置应用程序的外键属性。</p> <div class="ay1code"> <pre class="brush:csharp;">namespace EFModeling.Configuring.DataAnnotations.Samples.Relationships.ForeignKey  {      #region Model      class MyContext : DbContext      {          public DbSet&lt;Blog&gt; Blogs { get; set; }          public DbSet&lt;Post&gt; Posts { get; set; }          protected override void OnModelCreating(ModelBuilder modelBuilder)          {              modelBuilder.Entity&lt;Post&gt;()                  //配置一对多关系                  .HasOne(p =&gt; p.Blog)                  .WithMany(b =&gt; b.Posts)                  //配置外键                  .HasForeignKey(p =&gt; p.BlogForeignKey);          }      }      public class Blog      {          public int BlogId { get; set; }          public string Url { get; set; }          //导航属性          public List&lt;Post&gt; Posts { get; set; }      }      public class Post      {          public int PostId { get; set; }          public string Title { get; set; }          public string Content { get; set; }          //外键          public int BlogForeignKey { get; set; }          public Blog Blog { get; set; }      }      #endregion  }</pre> </div> <p>下面的代码列表演示如何配置复合外键：</p> <div class="ay1code"> <pre class="brush:csharp;">namespace EFModeling.Configuring.DataAnnotations.Samples.Relationships.CompositeForeignKey  {      #region Model      class MyContext : DbContext      {          public DbSet&lt;Car&gt; Cars { get; set; }          protected override void OnModelCreating(ModelBuilder modelBuilder)          {              modelBuilder.Entity&lt;Car&gt;()                  //配置复合主键                  .HasKey(c =&gt; new { c.State, c.LicensePlate });                  modelBuilder.Entity&lt;RecordOfSale&gt;()                  //配置一对多关系                  .HasOne(s =&gt; s.Car)                  .WithMany(c =&gt; c.SaleHistory)                  //配置外键                  .HasForeignKey(s =&gt; new { s.CarState, s.CarLicensePlate });          }      }      public class Car      {          public string State { get; set; }          public string LicensePlate { get; set; }          public string Make { get; set; }          public string Model { get; set; }          //导航属性          public List&lt;RecordOfSale&gt; SaleHistory { get; set; }      }      public class RecordOfSale      {          public int RecordOfSaleId { get; set; }          public DateTime DateSold { get; set; }          public decimal Price { get; set; }          //State对应CarState          public string CarState { get; set; }          //LicensePlate 对应CarLicensePlate          public string CarLicensePlate { get; set; }          public Car Car { get; set; }      }      #endregion  }</pre> </div> <p>您可以使用的HasForeignKey(...)字符串重载将影子属性配置为外键。建议先将影子属性显式添加到模型，然后再将其用作外键：</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Blog&gt; Blogs { get; set; }      public DbSet&lt;Post&gt; Posts { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          // Add the shadow property to the model          modelBuilder.Entity&lt;Post&gt;()               //配置外键              .Property&lt;int&gt;("BlogForeignKey");          // Use the shadow property as a foreign key          modelBuilder.Entity&lt;Post&gt;()              //配置一对多关系              .HasOne(p =&gt; p.Blog)              .WithMany(b =&gt; b.Posts)              //配置外键              .HasForeignKey("BlogForeignKey");      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }      public List&lt;Post&gt; Posts { get; set; }  }  public class Post  {      public int PostId { get; set; }      public string Title { get; set; }      public string Content { get; set; }      public Blog Blog { get; set; }  }</pre> </div> <p class="maodian"><a name="_lab2_7_4" rel="nofollow"></a></p> <h3>8.3无导航属性</h3> <p>不一定需要提供导航属性。你可以直接在关系的一端提供外键。</p> <div class="ay1code"> <pre class="brush:csharp;">namespace EFModeling.FluentAPI.Relationships.NoNavigation  {      #region Model      class MyContext : DbContext      {          public DbSet&lt;Blog&gt; Blogs { get; set; }          public DbSet&lt;Post&gt; Posts { get; set; }          protected override void OnModelCreating(ModelBuilder modelBuilder)          {              modelBuilder.Entity&lt;Post&gt;()                  //配置一对多关系                  .HasOne&lt;Blog&gt;()                  .WithMany()                  //配置外键                  .HasForeignKey(p =&gt; p.BlogId);          }      }      public class Blog      {          public int BlogId { get; set; }          public string Url { get; set; }      }      public class Post      {          public int PostId { get; set; }          public string Title { get; set; }          public string Content { get; set; }          public int BlogId { get; set; }      }      #endregion  }</pre> </div> <p class="maodian"><a name="_label8" rel="nofollow"></a></p> <h2>9.主体密钥</h2> <p>如果你希望外键引用主键之外的属性，则可以使用熟知的API来配置关系的主体键属性。 配置为主体密钥的属性将自动设置为备用密钥。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Car&gt; Cars { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;RecordOfSale&gt;()              .HasOne(s =&gt; s.Car)              .WithMany(c =&gt; c.SaleHistory)              .HasForeignKey(s =&gt; s.CarLicensePlate)              .HasPrincipalKey(c =&gt; c.LicensePlate);      }  }  public class Car  {      public int CarId { get; set; }      public string LicensePlate { get; set; }      public string Make { get; set; }      public string Model { get; set; }        public List&lt;RecordOfSale&gt; SaleHistory { get; set; }  }  public class RecordOfSale  {      public int RecordOfSaleId { get; set; }      public DateTime DateSold { get; set; }      public decimal Price { get; set; }        public string CarLicensePlate { get; set; }      public Car Car { get; set; }  }</pre> </div> <p>下面的代码列表演示如何配置复合主体键：</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Car&gt; Cars { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;RecordOfSale&gt;()              .HasOne(s =&gt; s.Car)              .WithMany(c =&gt; c.SaleHistory)              .HasForeignKey(s =&gt; new { s.CarState, s.CarLicensePlate })              .HasPrincipalKey(c =&gt; new { c.State, c.LicensePlate });      }  }  public class Car  {      public int CarId { get; set; }      public string State { get; set; }      public string LicensePlate { get; set; }      public string Make { get; set; }      public string Model { get; set; }        public List&lt;RecordOfSale&gt; SaleHistory { get; set; }  }  public class RecordOfSale  {      public int RecordOfSaleId { get; set; }      public DateTime DateSold { get; set; }      public decimal Price { get; set; }        public string CarState { get; set; }      public string CarLicensePlate { get; set; }      public Car Car { get; set; }  }</pre> </div> <p class="maodian"><a name="_label9" rel="nofollow"></a></p> <h2>10.必需和可选的关系</h2> <p>您可以使用熟知的API来配置是必需的还是可选的关系。最终，这会控制外键属性是必需的还是可选的。当使用阴影状态外键时，这非常有用。如果实体类中具有外键属性，则关系的requiredness取决于外键属性是必需还是可选。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Blog&gt; Blogs { get; set; }      public DbSet&lt;Post&gt; Posts { get; set; }        protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;Post&gt;()              .HasOne(p =&gt; p.Blog)              .WithMany(b =&gt; b.Posts)              .IsRequired();      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }        public List&lt;Post&gt; Posts { get; set; }  }  public class Post  {      public int PostId { get; set; }      public string Title { get; set; }      public string Content { get; set; }        public Blog Blog { get; set; }  }</pre> </div> <p class="maodian"><a name="_label10" rel="nofollow"></a></p> <h2>11.级联删除</h2> <p>您可以使用熟知的API显式配置给定关系的级联删除行为。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Blog&gt; Blogs { get; set; }      public DbSet&lt;Post&gt; Posts { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;Post&gt;()              .HasOne(p =&gt; p.Blog)              .WithMany(b =&gt; b.Posts)              .OnDelete(DeleteBehavior.Cascade);      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }        public List&lt;Post&gt; Posts { get; set; }  }  public class Post  {      public int PostId { get; set; }      public string Title { get; set; }      public string Content { get; set; }        public int? BlogId { get; set; }      public Blog Blog { get; set; }  }</pre> </div> <p class="maodian"><a name="_label11" rel="nofollow"></a></p> <h2>12.其他关系模式</h2> <p class="maodian"><a name="_lab2_11_5" rel="nofollow"></a></p> <h3>12.1一对一</h3> <p>一对多关系在两侧都有一个引用导航属性。它们遵循与一对多关系相同的约定，但在外键属性上引入了唯一索引，以确保只有一个依赖项与每个主体相关。</p> <p class="maodian"><a name="_label3_11_5_0" rel="nofollow"></a></p> <span class="directory"></span><h4 id="title-0">12.1.1数据注释</h4> <div class="ay1code"> <pre class="brush:csharp;">public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }        public BlogImage BlogImage { get; set; }  }  public class BlogImage  {      public int BlogImageId { get; set; }      public byte[] Image { get; set; }      public string Caption { get; set; }        public int BlogId { get; set; }      public Blog Blog { get; set; }  }</pre> </div> <p class="maodian"><a name="_label3_11_5_1" rel="nofollow"></a></p> <span class="directory"></span><h4 id="title-1">12.1.2Fluent API</h4> <p>使用API 配置关系时，请使用HasOne和WithOne方法。配置外键时，需要指定依赖实体类型，请注意以下列表HasForeignKey中提供的泛型参数。在一对多关系中，可以清楚地表明具有引用导航的实体是依赖项，并且具有集合的实体是主体。但这并不是一对一的关系，因此需要显式定义它。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Blog&gt; Blogs { get; set; }      public DbSet&lt;BlogImage&gt; BlogImages { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;Blog&gt;()              .HasOne(p =&gt; p.BlogImage)              .WithOne(i =&gt; i.Blog)              .HasForeignKey&lt;BlogImage&gt;(b =&gt; b.BlogForeignKey);      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }        public BlogImage BlogImage { get; set; }  }  public class BlogImage  {      public int BlogImageId { get; set; }      public byte[] Image { get; set; }      public string Caption { get; set; }        public int BlogForeignKey { get; set; }      public Blog Blog { get; set; }  }</pre> </div> <p class="maodian"><a name="_lab2_11_6" rel="nofollow"></a></p> <h3>12.2多对多</h3> <p>目前尚不支持多对多关系，没有实体类来表示联接表。但是，您可以通过包含联接表的实体类并映射两个不同的一对多关系，来表示多对多关系。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Post&gt; Posts { get; set; }      public DbSet&lt;Tag&gt; Tags { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;PostTag&gt;()              .HasKey(pt =&gt; new { pt.PostId, pt.TagId });          modelBuilder.Entity&lt;PostTag&gt;()              .HasOne(pt =&gt; pt.Post)              .WithMany(p =&gt; p.PostTags)              .HasForeignKey(pt =&gt; pt.PostId);          modelBuilder.Entity&lt;PostTag&gt;()              .HasOne(pt =&gt; pt.Tag)              .WithMany(t =&gt; t.PostTags)              .HasForeignKey(pt =&gt; pt.TagId);      }  }  public class Post  {      public int PostId { get; set; }      public string Title { get; set; }      public string Content { get; set; }        public List&lt;PostTag&gt; PostTags { get; set; }  }  public class Tag  {      public string TagId { get; set; }        public List&lt;PostTag&gt; PostTags { get; set; }  }  public class PostTag  {      public int PostId { get; set; }      public Post Post { get; set; }        public string TagId { get; set; }      public Tag Tag { get; set; }  }</pre> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-146.htm">Python学习笔记3.2-python内置函数大全</a></p>
                                        <p>下一个：<a href="/html/category/article-148.htm">mysql 锁 读锁 写锁 共享锁 排它锁 表锁 行锁 悲观锁 乐观锁</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-228.htm"># kubernetes调度之nodeName与NodeSelector</a></h4>
                <p>系列目录  Kubernetes的调度有简单，有复杂，指定NodeName和使用NodeSelector调度是最简单的，可以将Pod调度到期望的节点上。 本文主要介绍kubernetes调度框架中的N</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-207.htm">restTemplate配置及使用</a></h4>
                <p>文章目录      1 场景 2 依赖 3 配置 4 使用   4.1 GET请求   4.1.1 普通访问 4.1.2 返回HTTP状态 4.1.3 映射请求参数   4.2 POST请求   4.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-247.htm">EFI系统分区必须挂载到/boot/efi其中之一</a></h4>
                <p>最近在windows 8.1系统上使用U盘安装centos8双系统，硬盘分区格式是ntfs，mbr引导；选择自动分区时出现如下错误  （Failed to find a suitable stage1</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-259.htm">游戏开发设计模式：单例模式</a></h4>
                <p>一、单例模式  文章目录  一、单例模式     1.1 单例模式总结介绍   1.1.1什么是单例模式 1.1.2单例模式分类 1.1.3单例类特点 1.1.4如何保证线程安全？   1.2 单例模</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-248.htm">SpringBoot中处理的转发与重定向</a></h4>
                <p>转发：一次请求，服务器内部调用另外的组件处理，request和response可以共用，有限制性，只能转发到本应用中的某些资源，页面或者controller请求 课可以访问WEB-INF目录下面的页面</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-257.htm">JavaScript如何将字符串转换为分层对象</a></h4>
                <p>假设我们有一种特殊的字符串，其中包含成对的字符，像这样- const&nbsp;str&nbsp;=&nbsp;"AABBCCDDEE"; 我们需要基于此字符串构造一个对象，该字符串应如下所示： co</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-262.htm">Python 认识列表和元组</a></h4>
                <p>列表和元组，都是一个可以放置任何数据类型的有序集合。   列表的特性 动态的（mutable）：长度大小不固定，可以随意地增加、删减或者改变元素。 会修改原来列表中的元素，而不会创建新的列表。 # 新</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-234.htm">从 jQuery 到 Vue3 的快捷通道_在线工具</a></h4>
                <p>当初使用 jQuery 做了几个简单的项目，算是有一点点了解，现在学习Vue3，发现了一个可以快速转换思维的通道 —— 使用CDN的方式模拟 Vite 建立的项目！  CDN方式 jQuery的使用非</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-249.htm">element树形数据与懒加载失效</a></h4>
                <p>这个bug 卡了我好久 我以为是我的代码有问题 但是 发现我的版本没有这个功能 table树形数据设置，不显示下拉箭头 将官网相关demo复制到本地仍不能正常工作，没有报错 后面百度了好久才发现 版本</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-224.htm">jackson   json对象、实体类相互转换</a></h4>
                <p>json对象转换为实体类，使用jackson 进行jsonObject、实体类对象转换。 首先导入依赖 &lt;dependency&gt;     &lt;groupId&gt;com.faster</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">22</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>