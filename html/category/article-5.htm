<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-5.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>iOS全埋点解决方案-控件点击事件 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">iOS全埋点解决方案-控件点击事件</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<h3 id="前言">前言</h3> <p>	我们主要介绍如何实现控件点击事件（$AppClick）的全埋点。在介绍如何实现之前，我们需要先了解一下，在 UIKit 框架下，处理点击或拖动事件的 Target-Action 设计模式。</p> <h3 id="一-target-action">一、 Target-Action</h3> <p>	Target-Action，也叫目标-动作模式，即当某个事件发生的时候，调用特定对象的特定方法。</p> <p>	比如，在 LoginViewController 页面，有一个按钮，点击按钮时，会调用 LoginViewController 里的 - loginBtnOnClick 方法，“特定对象”就是 Target，“特定方法”就是 Action。也即 Target 是 LoginViewController， Action 是 - loginBtnOnClick 方法。</p> <p>Target-Action 设计模式主要包含两个部分：</p> <ul> <li>Target 对象：接收消息的对象</li> <li>Action 方法：用于表示需要调用的方法</li> </ul> <p>    Target 对象可以是任意类型的对象。但是在 iOS 应用程序中，通常情况下会是一个控制器，而触发事件的对象和 Target 对象一样，也可以是任意对象。例如，手势识别器 UIGestureRecognizer 就可以在识别到手势后，将消息发送给另一个对象。Target-Action 设计模式，最常见的应用场景还是在控件中。iOS 中的控件都是 UIControl 类或者其子类，当用户在操作这些控件时，会将消息发送到指定的对象（Target），而对应的 Action 方法必须符合以下几种形式之一 ：</p> <pre><code>- (void)doSomething; - (void)doSomething:(id)sender; - (void)doSomething:(id)sender forEvent:(UIEvent *)event; - (IBAction)doSomething; - (IBAction)doSomething:(id)sender; - (IBAction)doSomething:(id)sender forEvent:(UIEvent *)event;</code></pre> <p>    其中以 IBAction 作为返回值类型的形式，是为了让该方法能在 Interface Builder 中被看到；sender 参数就是触发事件的控件本身；第二个参数 event 是 UIEvent 的对象，封装了触摸事件的相关信息。我们可以通过代码或者 Interface Builder 为一个控件添加一个 Target 对象以及相对应的 Action 方法。</p> <p>	若想使用代码方式添加 Target-Action（我们也会用 Target-Action 表示：一个 Target 对象以及相对应的 Action 方法），可以直接调用控件对象的如下方法：</p> <pre><code>- (void)addTarget:(nullable id)target action:(SEL)action forControlEvents:(UIControlEvents)controlEvents;</code></pre> <p>我们也可以多次调用 - addTarget:action:forControlEvents: 方法给控件添加多个 Target-Action，即使多次调用- addTarget:action:forControlEvents: 添加相同的 Target 但是不同的 Action，也不会出现相互覆盖的问题。另外，在添加 Target-Action 的时候，Target 对象也可以为 nil（默认会先在 self 里查找 Action）。</p> <p>当我们为一个控件添加 Target-Action 后，控件又是如何找到 Target 对象并执行对应的 Action 方法的呢？</p> <p>在 UIControl 类中有一个方法：</p> <pre><code>- (void)sendAction:(SEL)action to:(nullable id)target forEvent:(nullable UIEvent *)event;</code></pre> <p>如果控件被用户操作（比如点击），首先会调用这个方法，并将事件转发给应用程序的 UIApplication 对象。</p> <p>同时，在 UIApplication 类中也有一个类似的实例方法：</p> <pre><code>- (BOOL)sendAction:(SEL)action to:(nullable id)target from:(nullable id)sender forEvent:(nullable UIEvent *)event;</code></pre> <p>如果 Target 对象不为 nil，应用程序会让该 Target 对象调用对应的 Action 方法响应事件；如果 Target 对象为 nil，应用程序会在响应者链中搜索定义了该方法的对象，然后执行 Action 方法。</p> <p>基于 Target-Action 设计模式，我们有两种方案可以实现 $AppClick 事件的全埋点。</p> <h3 id="二实现方案">二、实现方案</h3> <p>	通过 Target-Action 执行模式可知，在执行 Action 方法之前，会先后通过控件和 UIApplication 对象发送事件相关的信息。因此，我们可以通过 Method Swizzling 交换 UIApplication 的 - sendAction:to:from:forEvent: 方法，然后在交换后的方法中触发 $AppClick 事件，并根据 target 和 sender 采集相关的属性，即可实现 $AppClick 事件的全埋点 。</p> <p>	对于 UIApplication 类中的 - sendAction:to:from:forEvent: 方法，我们以给 UIButton 设置 action 为例，详细介绍一下。</p> <pre><code><div class="down"><a class="d-popup" title="下载链接" href="#button_file"><i class="be be-download"></i></a><div class="clear"></div></div>;</code></pre> <p>参数：</p> <ul> <li>action：Action 方法对应的 selector，即示例中的 btnAction。</li> <li>target：Target 对象，即示例中的 person。如果 Target 为 nil，应用程序会将消息发送给第一个响应者，并从第一个响应者沿着响应链向上发送消息，直到消息被处理为止。</li> <li>sender：被用户点击或拖动的控件，即发送 Action 消息的对象，即示例中的 button。</li> <li>event：UIEvent 对象，它封装了触发事件的相关信息。</li> </ul> <p>返回值：</p> <p>如果有 responder 对象处理了此消息，返回 YES，否则返回 NO。</p> <h4 id="21-实现步骤">2.1 实现步骤</h4> <p>	通过 Method Swizzling 交换 UIApplication 类中的 -sendAction:to:from:forEvent: 方法来实现 $AppClick 事件的全埋点。</p> <p>第一步：创建 UIApplication 分类 UIApplication+SensorsData</p> <p>第二步：实现交换方法 -sensorsdata_sendAction:to:from:forEvent:</p> <pre><code>z#import "SensorsAnalyticsSDK.h"  - (BOOL)sensorsdata_sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event{     // 触发 $AppClick 事件     NSMutableDictionary *properties = [NSMutableDictionary dictionary];     [[SensorsAnalyticsSDK sharedInstance] track:@"$AppClick" properties:properties];          // 调用原有的实现 即 sendAction:to:from:forEvent:     return [self sensorsdata_sendAction:action to:target from:sender forEvent:event]; }</code></pre> <p>第三步：实现 load 类方法，并在类方法中实现 - sendAction:to:from:forEvent: 方法交换</p> <pre><code>#import "NSObject+SASwizzler.h"  + (void)load {     [UIApplication sensorsdata_swizzleMethod:@selector(sendAction:to:from:forEvent:) withMethod:@selector(sensorsdata_sendAction:to:from:forEvent:)]; }</code></pre> <p>第四步：测试验证，在Demo 中添加 button 按钮，点击按钮</p> <pre><code>{   "event" : "$AppClick",   "time" : 1648696085563,   "propeerties" : {     "$model" : "x86_64",     "$manufacturer" : "Apple",     "$lib_version" : "1.0.0",     "$os" : "iOS",     "$app_version" : "1.0",     "$os_version" : "15.2",     "$lib" : "iOS"   } }</code></pre> <h4 id="22-优化-appclick-事件">2.2 优化 $AppClick 事件</h4> <p>一般情况下，对于一个控件的点击事件，我们至少还需要采集如下信息（属性）：</p> <ul> <li>控件类型（$element_type）</li> <li>控件上显示的文本（$element_content）</li> <li>控件所属页面，即 UIViewController（$screen_name）</li> </ul> <p>基于目前的方案，我们来看如何实现采集以上三个属性。</p> <p>1、获取控件类型</p> <p>	获取控件类型相对比较简单，我们可以直接使用控件的 class 名称来代表当前控件的类型，比如可通过如下方式获取控件的 class 名称：</p> <pre><code>NSString *elementType = NSStringFromClass([sender class])；</code></pre> <p>2、获取显示属性</p> <p>	需要根据特定的控件调用相应的方法。</p> <p>第一步：在 UIView 的类别 SensorsData 中新增 sensorsdata_elementContent 属性。</p> <pre><code>@interface UIView (SensorsData)  @property (nonatomic, copy, readonly) NSString *sensorsdata_elementType;  @property (nonatomic, copy, readonly) NSString *sensorsdata_elementContent;  @end</code></pre> <pre><code>- (NSString *)sensorsdata_elementContent {     return nil; }</code></pre> <p>第二步：在 UIView+SensorsData 分类中新增 UIButton 的类别 SensorsData，并实现 -sensorsdata_elementContent 方法</p> <pre><code>#pragma mark - UIButton @interface UIButton (SensorsData)  @end</code></pre> <pre><code>@implementation UIButton (SensorsData)  - (NSString *)sensorsdata_elementContent {     return self.titleLabel.text; }  @end</code></pre> <p>第三步：修改 SensorsAnalyticsSDK+Track 中 - trackAppClickWithView: properties: 方法</p> <pre><code>- (void)trackAppClickWithView:(UIView *)view properties:(nullable NSDictionary &lt;NSString*, id&gt; *)properties {     // 触发 $AppClick 事件     NSMutableDictionary *eventProperties = [NSMutableDictionary dictionary];     // 获取控件类型     [eventProperties setValue:view.sensorsdata_elementType forKey:@"$element_type"];     // 获取控件文本     [eventProperties setValue:view.sensorsdata_elementContent forKey:@"$element_content"];     [eventProperties addEntriesFromDictionary:properties];     [[SensorsAnalyticsSDK sharedInstance] track:@"$AppClick" properties:eventProperties];     }</code></pre> <p>第四步：测试验证</p> <pre><code>{   "event" : "$AppClick",   "time" : 1648708284842,   "propeerties" : {     "$model" : "x86_64",     "$manufacturer" : "Apple",     "$element_type" : "UIButton",     "$lib_version" : "1.0.0",     "$os" : "iOS",     "$element_content" : "eeeeeee",     "$app_version" : "1.0",     "$os_version" : "15.2",     "$lib" : "iOS"   } }</code></pre> <p>3、获取控件所属的界面</p> <p>如何知道一个 UIView 所属哪个 UIViewController 呢？</p> <p>这就需要借助 UIResponder 了！</p> <p>大家都知道，UIResponder 类是 iOS 应用程序中专门用来响应用户操作事件的，比如：</p> <ul> <li>Touch Events：即触摸事件</li> <li>Motion Events：即运动事件</li> <li>Remote Control Events：即远程控制事件</li> </ul> <p>    UIApplication、UIViewController、UIView 类都是 UIResponder 的子类，所以它们都具有响应以上事件的能力。另外，自定义的 UIView 和自定义视图控制器也都可以响应以上事件。在 iOS 应用程序中，UIApplication、UIViewController、UIView 类的对象也都是一个个响应者，这些响应者会形成一个响应者链。一个完整的响应者链传递规则（顺序）大概如下：UIView → UIViewController → RootViewController → Window → UIApplication → UIApplicationDelegate，可参考下图所示（此图来源于苹果官方网站） 。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c9c08165bd2e85c7be95b4a1021f673a.jpg" alt="iOS全埋点解决方案-控件点击事件"></p> <p>    注意：对于 iOS 应用程序里实现了 UIApplicationDelegate 协议的类（通常为 AppDelegate），如果它是继承自 UIResponder，那么也会参与响应者链的传递；如果不是继承自 UIResponder（例如 NSObject），那么它就不会参与响应者链的传递。</p> <p>    通过图可以知道，对于任意一个视图来说，都能通过响应者链找到它所在的视图控制器，也就是其所属的页面，从而可以达到获取它所属页面信息的目的。</p> <p>第一步：新增 sensorsdata_viewController 属性</p> <pre><code>@interface UIView (SensorsData)  @property (nonatomic, copy, readonly) NSString *sensorsdata_elementType;  @property (nonatomic, copy, readonly) NSString *sensorsdata_elementContent;  @property (nonatomic, copy, readonly) NSString *sensorsdata_viewController;  @end</code></pre> <p>第二步：实现 实现 -sensorsdata_viewController 方法</p> <pre><code>- (NSString *)sensorsdata_viewController {     UIResponder *responder = self;     while ((responder = [responder nextResponder])) {         if ([responder isKindOfClass:[UIViewController class]]) {             return (UIViewController *)responder.class;         }     }     return nil; }</code></pre> <p>第三步：修改 - trackAppClickWithView: properties: 方法</p> <pre><code>- (void)trackAppClickWithView:(UIView *)view properties:(nullable NSDictionary &lt;NSString*, id&gt; *)properties {     // 触发 $AppClick 事件     NSMutableDictionary *eventProperties = [NSMutableDictionary dictionary];     // 获取控件类型     [eventProperties setValue:view.sensorsdata_elementType forKey:@"$element_type"];     // 获取控件文本     [eventProperties setValue:view.sensorsdata_elementContent forKey:@"$element_content"];     // 获取控件所在的控制器     UIViewController *vc = view.sensorsdata_viewController;     [eventProperties setValue:NSStringFromClass(vc.class) forKey:@"$screen_name"];     [eventProperties addEntriesFromDictionary:properties];     [[SensorsAnalyticsSDK sharedInstance] track:@"$AppClick" properties:eventProperties];     }</code></pre> <p>第四步：测试验证</p> <pre><code>{   "event" : "$AppClick",   "time" : 1648711998403,   "propeerties" : {     "$model" : "x86_64",     "$manufacturer" : "Apple",     "$element_type" : "UIButton",     "$lib_version" : "1.0.0",     "$os" : "iOS",     "$element_content" : "eeeeeee",     "$app_version" : "1.0",     "$screen_name" : "ViewController",     "$os_version" : "15.2",     "$lib" : "iOS"   } }</code></pre> <h3 id="三遗留问题">三、遗留问题</h3> <p>如果，一个控件添加了多个 Target-Action，会导致多次触发 $AppClick 事件。</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-4.htm">大数据之hive Serde序列化/反序列化性能对比</a></p>
                                        <p>下一个：<a href="/html/category/article-6.htm">Java 9中的JShell中的前向参考是什么？</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-207.htm">MySQL——union(合并结果集)、limit(获取部分数据)、关于MySQL中常用数据类型</a></h4>
                <p>博客目录 1、union(合并结果集) 2、limit(获取一张表中某部分数据) 3、表——创建表、删除表 4、关于MySQL中的数据类型  一、union(合并结果集)  将两个查询结果合并(可以是</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-259.htm">C ++程序查找n个数的GCD和LCM</a></h4>
                <p>这是找出n个数字的GCD和LCM的代码。两个或更多不都是零的整数的GCD或最大公除数是将每个整数相除的最大正整数。GCD也被称为最大公因数。 两个数字的最小公倍数(LCM)是两个数字的倍数的最小数字（</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-243.htm">指针的高级运用——指针进阶</a></h4>
                <p>文章目录  学习目标 1.1 动态内存分配   引子 1.1动态分配内存函数 1.2malloc函数 1.3 calloc 函数 1.4 realloc函数 1.5 free函数 1.6 动态内存编程</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-256.htm">Vue3项目中的骨架屏</a></h4>
                <p>实现场景:刚进入页面的时候,需要后端接口回传的数据,还没有回来,为了客户有更好的体验,需要设置骨架屏,效果图如下:  &nbsp;实现步骤: 1.设置通用组件骨架屏(可以设置的属性:高，宽，背景颜色，</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-205.htm">SpringBoot扩展点EnvironmentPostProcessor_在线工具</a></h4>
                <p>一、背景 之前项目中用到了Apollo配置中心，对接Apollo配置中心后，配置中心的属性就可以在程序中使用了，那么这个是怎么实现的呢？配置中心的属性又是何时加载到程序中的呢？那么我们如果找到了这个是</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-210.htm">Code For Better 谷歌开发者之声—— 在 Windows 10 上对 Google Chrome 进行故障排除</a></h4>
                <p>???? 个人网站:【 海拥】【小霸王游戏机】 ???? 风趣幽默的前端学习课程：????28个案例趣学前端 ???? 想寻找共同学习交流、摸鱼划水的小伙伴，请点击【摸鱼学习交流群】 ???? 免费且</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-234.htm">数据传输POST心法分享，做前端的你还解决不了这个bug？</a></h4>
                <p>背景 随时随地给大家提供技术支持的葡萄又来了。这次的事情是这样的，提供demo属于是常规操作，但是前两天客户突然反馈压缩传输模块抛出异常，具体情况是压缩内容传输到服务端后无法解压。 由于代码没有发生任</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-258.htm">vs code编写web项目</a></h4>
                <p>vs code编写web项目 0.小贴士 1.vs和vscode是不一样的是不一样的 2.在已经存在maven的时候，直接在maven的+创建项目，用ctrl+shoeft+p 搜索不到maven的创</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-212.htm">ElasticSearch学习：springboot集成ElasticSearch</a></h4>
                <p>跟其他的菲关系类型数据库一样集成springboot，在生成代码时，勾选web和非关系数据库里面的ElasticSearch就可以。 demo的git地址我放在下面：git es demo 代码 这里</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-224.htm">Asp.Net在线预览Word文档的解决方案与思路</a></h4>
                <p>前几天有个老项目找到我，有多老呢？比我工作年限都长，见到这个项目我还得叫一声前辈。 这个项目目前使用非常稳定，十多年了没怎么更新过，现在客户想加一个小功能：在线预览Word文档。 首先想到的是用第三方</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>