<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-134.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>node.js &#8212; 身份认证 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">node.js &#8212; 身份认证</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<p>请问昨天结束的早是对堆积在了今天吗，今天还来加个班更博，看在这个毅力的份上能否给亿点点推荐。</p> <p>有个好消息有个坏消息，先说坏消息吧，就是在这么学下去我急需急支糖浆，来回顾回顾前面的知识，这几天学的太急了，搞得有点推着走的意思，好消息就是今天的内容是最后最后node的基础内容了，果然天不负我，整完然后有两个大案例，做完我就从上次复习那里开始一直复习过来，然后全部不欠账，就昂首挺胸的走进vue了，等等，这个学完可以进去了吧。</p> <p>1.</p> <p>今天的第一个内容说一下web开发模式，今天基本就是讲一个身份认证的内容，我们的web开发模式呢分为两种，一种是服务器渲染模式，就是通过服务器进行一个字符串拼接，将html页面拼接出来，然后直接返回给客户端，这样一来就不需要我们的ajax了，直接给客户端就可以了，他的优点呢就是前端耗时少，毕竟都给服务器做了还有前端什么事，还有他也有利于seo优化，他的缺点就是占用服务器资源，而且不利于前后端分离开发效率低。</p> <p>第二个模式：前后端分离的模式，它是依赖于ajax的一个广泛应用，后端负责编写api接口，前端就负责调用接口就完事了。他的一个优点就是开发体验好、毕竟前后端分离，用户体验也好，也减轻了服务器的压力。</p> <p>但是缺点就是不利于seo的优化。</p> <p>2</p> <p>然后我们进入身份认证、</p> <p>什么事身份认证？</p> <p>通过一定的手段对用户身份进行确认的方式。</p> <p>服务器渲染开发用的就是session认证，而我们的前后端分离用的就是jwt认证，两者都各有各的优点谁也不让谁。</p> <p>3.</p> <p>先来说下session吧</p> <p>首先了解一下http无状态性，就是指客户端每次的http请求都是独立的，连续多个请求间没有直接关系，服务器也不会主动保留每次http请求状态（就像收银员他能记住每个来的客户是会员吗？）</p> <p>突破无状态限制。</p> <p>超市突破这种限制的方式就是给每个会员发会员卡是吧，在我们web领域这种方式就是cookie。</p> <p>cookie，是存储在用户浏览器一段不超过4kb的字符串，它是由name、value以及有效期。安全性，适用范围的可选属性组成，在不同的域名下，我们的cookie是各自独立的，每当客户端发起请求，会自动把当前域名下的所有cookie发给服务器，注意只是当前域名下。</p> <p>他的特性就是：自动发送、域名独立、过期时限、4kb限制</p> <p>3.1</p> <p>cookie在身份认证中的作用</p> <p>当我们客户端第一次请求服务器的时候，服务器会通过响应头向客户端发送一个身份认证的cookie，我们的浏览器就会把这个cookie存储起来，当我们下一次 请求的时候，就会直接发送这个cookie也就是前面说的会自动发送，即可证明身份。</p> <p>要注意我们的cookie是不具有安全性的，浏览器还提供了读写cookie的api，所以cookie很容易被伪造，就像我们的会员卡也有伪造的一样。所以不要用cookie存储重要数据，包括我们jwt也不能存后面会说到。</p> <p>3.2</p> <p>那么有没有方法来提高我们cookie的安全性呢？</p> <p>那就是session认证，就好比我们的会员卡➕刷卡的机制就能破除伪造卡了。</p> <p>session认证机制：</p> <p>首先我们的客户端登录账号密码发送了登录请求，服务器会开始验证，当验证成功后，会将其存储在服务器的内存中，同时通过响应头返回一个对应的cookie字符串，我们的浏览器就会把这个字符串保存在当前域名下，当我们再次请求的时候，就会把域名下所有cookie一起发送服务器，服务器就会去找对只对应的cookie匹配成功就能找到你信息了，然后就认证成功了</p> <p>3.3</p> <p>说了这么多怎么来再服务器端使用我们的sesson，首先安装导入两部曲然后还需要配置，注意配置是固定写法，secret是可以为任意字符串的。</p> <p>配置过后就可以用req.session来访问session对象了，将我们的一些数据用sessin存储起来，然后登陆成功又可以通过session取出来，当我们退出登录还可以。destroy方法清空session，注意只是清空这个账户信息，不会清空别人的信息，具体代码如下：</p> <p>注意看todo也就是我们要做的</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 导入 express 模块</span> const express = require('express'<span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建 express 的服务器实例</span> const app =<span style="color: rgba(0, 0, 0, 1)"> express()</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_01：请配置 Session 中间件</span> const session = require('express-session'<span style="color: rgba(0, 0, 0, 1)">) app.use(session({   secret :</span>'mySession'<span style="color: rgba(0, 0, 0, 1)">,   resave :</span>'false'<span style="color: rgba(0, 0, 0, 1)">,   saveUninitiallized:</span>'ture'<span style="color: rgba(0, 0, 0, 1)"> }))</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 托管静态页面</span> app.use(express.static('./pages'<span style="color: rgba(0, 0, 0, 1)">))</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 解析 POST 提交过来的表单数据</span> app.use(express.urlencoded({ extended:<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)"> }))</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 登录的 API 接口</span> app.post('/api/login', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 判断用户提交的登录信息是否正确</span><span style="color: rgba(0, 0, 255, 1)">if</span> (req.body.username !== 'admin' || req.body.password !== '000000'<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 0, 255, 1)">return</span> res.send({ status: 1, msg: '登录失败'<span style="color: rgba(0, 0, 0, 1)"> })   }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_02：请将登录成功后的用户信息，保存到 Session 中</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 注意只有当上面配置了session之后才能够使用req.session这个对象</span>   req.session.user = req.body<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 用户信息</span>   req.session.islogin =<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 用户的登录状态</span><span style="color: rgba(0, 0, 0, 1)">    res.send({ status:</span>0, msg: '登录成功'<span style="color: rgba(0, 0, 0, 1)"> }) })</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取用户姓名的接口</span> app.get('/api/username', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_03：请从 Session 中获取用户的名称，响应给客户端</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 判断是否登录成功</span><span style="color: rgba(0, 0, 255, 1)">if</span>(!<span style="color: rgba(0, 0, 0, 1)">req.session.islogin) {</span><span style="color: rgba(0, 0, 255, 1)">return</span> res.send({status:1, msg:'fail'<span style="color: rgba(0, 0, 0, 1)">})   }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 登录成功即可响应数据</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> res.send({     status :</span>0<span style="color: rgba(0, 0, 0, 1)">,     msg :</span>'success'<span style="color: rgba(0, 0, 0, 1)">,     username : [req.session.user.username]   }) })</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 退出登录的接口</span> app.post('/api/logout', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_04：清空 Session 信息</span><span style="color: rgba(0, 0, 0, 1)">  req.session.destroy()   res.send({     status :</span>0<span style="color: rgba(0, 0, 0, 1)">,     msg :</span>'退出登录成功'<span style="color: rgba(0, 0, 0, 1)">   }) })</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 调用 app.listen 方法，指定端口号并启动web服务器</span> app.listen(80,<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {   console.log(</span>'Express server running at http://127.0.0.1:80'<span style="color: rgba(0, 0, 0, 1)">) })</span></pre> </div> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/276f4ebc0e5a939b0376a1745e6cd288.jpg" alt="node.js -- 身份认证"></p> <p>3.</p> <p>这就是session，然后我们看到下一个认证机制jwt，session需要cookie才能够实现是吧，但我们的cookie有一个致命问题，不支持跨域，如果涉及到跨域需要配置很大一堆步骤。</p> <p>JWT目前最流行跨域认证解决方案。</p> <p>实现原理：首先还是客户端发起一个请求头发送账号密码，服务器验证，验证成功后会经过加密生辰一个token字符串然后会给你返回一个token字符串，我们拿到这个token字符串会将其存储在localstorage或者sessionStorage中，当我们再次请求就会通过一个authorization的请求头将token发送给服务器，服务器拿到token就会将他还原成用户的信息对象，然后身份也就认证成功了。</p> <p>JWT的组成部分是有三部分组成：header。patyload。signature，这个。只是分割作用，我们的真正信息重在中间的payload前后两个只是保证token的安全性。</p> <p>怎么在express中来使用我们的token？</p> <p>需要安装两个包，还需要定义密匙是自己自定义的</p> <p>第四步生成JWT字符串的时候在sign这个方法里面，这个配置有效期是token在规定期限之内能够拿来验证的期限；</p> <p>第五步将jwt转换为json这个语句当中，unless这个语句的意思是不需要身份验证的接口</p> <p>配置完第五步转换为json文件后我们就可以用req.user来获取信息了，而这个信息就是我们第四步把什么转换为jwt字符串的信息，</p> <p>最后当我们的token过期或者不合法就会出现错误，这个时候要需要一个错误中间件</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 导入 express 模块</span> const express = require('express'<span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建 express 的服务器实例</span> const app =<span style="color: rgba(0, 0, 0, 1)"> express()</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_01：安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt</span> const jwt = require('jsonwebtoken'<span style="color: rgba(0, 0, 0, 1)">) const expressJwt</span>= require('express-jwt'<span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 允许跨域资源共享</span> const cors = require('cors'<span style="color: rgba(0, 0, 0, 1)">) app.use(cors())</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 解析 post 表单数据的中间件</span> const bodyParser = require('body-parser'<span style="color: rgba(0, 0, 0, 1)">) const { UnauthorizedError }</span>= require('express-jwt'<span style="color: rgba(0, 0, 0, 1)">) const { response }</span>= require('express'<span style="color: rgba(0, 0, 0, 1)">) app.use(bodyParser.urlencoded({ extended:</span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)"> }))</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_02：定义 secret 密钥，建议将密钥命名为 secretKey</span> const secretKey = 'hard hard study day day up'<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_04：注册将 JWT 字符串解析还原成 JSON 对象的中间件</span> app.use(expressJwt({secret : secretKey, algorithms : ['HS256']}).unless({path : [/^\/api\//<span style="color: rgba(0, 0, 0, 1)">]}))</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 登录接口</span> app.post('/api/login',<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (req, res) {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 将 req.body 请求体中的数据，转存为 userinfo 常量</span>   const userinfo =<span style="color: rgba(0, 0, 0, 1)"> req.body</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 登录失败</span><span style="color: rgba(0, 0, 255, 1)">if</span> (userinfo.username !== 'admin' || userinfo.password !== '000000'<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> res.send({       status:</span>400<span style="color: rgba(0, 0, 0, 1)">,       message:</span>'登录失败！'<span style="color: rgba(0, 0, 0, 1)">     })   }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 登录成功</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 转化成token加密文件</span>   const tokenStr = jwt.sign({username : userinfo.username, algorithms : ['HS256']}, secretKey, {expiresIn : '1h'<span style="color: rgba(0, 0, 0, 1)">})   res.send({     status:</span>200<span style="color: rgba(0, 0, 0, 1)">,     message:</span>'登录成功！'<span style="color: rgba(0, 0, 0, 1)">,     token: tokenStr</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 要发送给客户端的 token 字符串</span><span style="color: rgba(0, 0, 0, 1)">  }) })</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 这是一个有权限的 API 接口</span> app.get('/admin/getinfo',<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (req, res) {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span><span style="color: rgba(0, 0, 0, 1)">     res.send({     status:</span>200<span style="color: rgba(0, 0, 0, 1)">,     message:</span>'获取用户信息成功！'<span style="color: rgba(0, 0, 0, 1)">,     data: {username : req.user}</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 要发送给客户端的用户信息</span><span style="color: rgba(0, 0, 0, 1)">  }) })</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_06：使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误</span> app.use((err, req, res, next) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 0, 255, 1)">if</span> (err.name === 'UnauthorizedError'<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 这次错误是由token解析失败导致的</span><span style="color: rgba(0, 0, 255, 1)">return</span> res.send({status : 401, msg : '无效的token'<span style="color: rgba(0, 0, 0, 1)">})   }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 其他错误</span><span style="color: rgba(0, 0, 255, 1)">return</span> res.send({status: 500, msg : '未知的错误'<span style="color: rgba(0, 0, 0, 1)">})   } })</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 调用 app.listen 方法，指定端口号并启动web服务器</span> app.listen(8888,<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {   console.log(</span>'Express server running at http://127.0.0.1:8888'<span style="color: rgba(0, 0, 0, 1)">) })</span></pre> </div> <p>然后后面会有两个项目，会把之前所学的node综合起来，我到时候单独开个博来说一下吧，还是有一些注意事项的</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-133.htm">vue中watch监听器的触发时机(watch的坑及解决)_vue.js_</a></p>
                                        <p>下一个：<a href="/html/category/article-135.htm">vue3跨层级通信</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4068.htm">Typora + EasyBlogImageForTypora直接上传图片到博客园_在线工具</a></h4>
                <p>1.描述问题 Gitee外链访问失效后一直在寻找有效措施，因为本人使用惯了typora，故使用typora + EasyBlogImageForTypora+Snipaste进行博客编写以及图片上传 </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-526.htm">SpringBoot生成docx文件并返回其Base64编码</a></h4>
                <p>直接上源码，      @ResponseBody     @RequestMapping(value = "/getDocx", method = RequestMethod.GET)     pu</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4067.htm">lambda表达式之allMatch、anyMatch、noneMatch</a></h4>
                <p>　　allMatch：Stream中全部元素符合传入的predicate返回 true 　　anyMatch：Stream中只要有一个元素符合传入的predicate返回 true 　　noneMat</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4095.htm">Docker基础 — 36、CMD指令和ENTRYPOINT指令的区别</a></h4>
                <p>目录  1、CMD指令和ENTRYPOINT指令说明 2、CMD指令只有最后一条生效的原因 3、CMD指令演示 4、ENTRYPOINT指令演示 5、总结   CMD指令和ENTRYPOINT指令作用</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3756.htm">接口隔离原则（Interface Segregation Principle，ISP）</a></h4>
                <p>接口隔离原则（Interface Segregation Principle，ISP）要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法。  定义  客户端不应该</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1341.htm">FreeRTOS进阶之队列示例完全解析_操作系统</a></h4>
                <p>目录  前言 1.队列创建函数 2.入队  2.1 xQueueGenericSend() 2.2 xQueueGenericSendFromISR ()  3.出队     前言 FreeRTOS提</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4096.htm">什么是Python高阶函数</a></h4>
                <p>高阶函数 什么是高阶函数 高阶函数就是能够把函数当成参数传递的函数就是高阶函数，换句话说如果一个函数的参数是函数，那么这个函数就是一个高阶函数。 高阶函数可以是你使用def关键字自定义的函数，也有Py</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3122.htm">什么是https和http（https和http的区别）_在线工具</a></h4>
                <p>前言 因为工作需要，需要用到大量的关于 HTTP 协议的知识，目前掌握的关于 HTTP 请求以及协议的知识都是零散的，打算针对知识盲区系统的学习一些，理清概念。 为什么会出现 HTTPS 因为 HTT</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2240.htm">webpack 执行npm run 时，因为版本依赖报的那些错</a></h4>
                <p>环境介绍 webpack 4.34.0 webpack-dev-server 3.7.0 报错 Error: invalid "instanceof" keyword value Promise   </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-789.htm">vue 实现简单表格分页功能</a></h4>
                <p>使用框架实现表格展示和跳转功能，一直不懂原理。所以自己写一个简单的，加深理解。  布局分为2块，上面是表格展示数据，下面是点击按钮跳转。效果图：代码： &lt;!DOCTYPE html&gt; &l</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">6</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>