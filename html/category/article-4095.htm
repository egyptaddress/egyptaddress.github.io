<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-4095.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Docker基础 — 36、CMD指令和ENTRYPOINT指令的区别 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Docker基础 — 36、CMD指令和ENTRYPOINT指令的区别</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div class="toc"> <div class="toc-container-header">目录</div> <ul> <li><a href="#1cmd%E6%8C%87%E4%BB%A4%E5%92%8Centrypoint%E6%8C%87%E4%BB%A4%E8%AF%B4%E6%98%8E" rel="nofollow">1、CMD指令和ENTRYPOINT指令说明</a></li> <li><a href="#2cmd%E6%8C%87%E4%BB%A4%E5%8F%AA%E6%9C%89%E6%9C%80%E5%90%8E%E4%B8%80%E6%9D%A1%E7%94%9F%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0" rel="nofollow">2、CMD指令只有最后一条生效的原因</a></li> <li><a href="#3cmd%E6%8C%87%E4%BB%A4%E6%BC%94%E7%A4%BA" rel="nofollow">3、CMD指令演示</a></li> <li><a href="#4entrypoint%E6%8C%87%E4%BB%A4%E6%BC%94%E7%A4%BA" rel="nofollow">4、ENTRYPOINT指令演示</a></li> <li><a href="#5%E6%80%BB%E7%BB%93" rel="nofollow">5、总结</a></li> </ul> </div> <p>CMD指令和ENTRYPOINT指令作用都是指定一个容器启动时要运行的命令。</p> <h2 id="1cmd指令和entrypoint指令说明">1、CMD指令和ENTRYPOINT指令说明</h2> <p><strong>CMD指令， 支持三种格式：</strong></p> <pre><code>CMD ["executable","param1","param2"] ：使用 exec 执行，推荐方式；  CMD command param1 param2 ：在 /bin/sh 中执行，提供给需要交互的应用；  CMD ["param1","param2"] ：提供给 ENTRYPOINT 的默认参数；</code></pre> <p>每个Dockerfile只能生效一条CMD指令。如果指定了多条CMD指令，只有最后一条生效。</p> <p>如果用户启动容器时候指定了运行的命令，则会覆盖掉CMD指定的命令。</p> <p><strong>ENTRYPOINT指令，支持两种格式：</strong></p> <pre><code>ENTRYPOINT ["executable", "param1", "param2"]  ENTRYPOINT command param1 param2 ：shell中执行</code></pre> <p>每个Dockerfile中只能生效一个ENTRYPOINT指令，当有多个ENTRYPOINT指令时，只有最后一个起效。</p> <p>如果用户启动容器时候指定了运行的命令，不会被<code>docker run</code>执行的命令参数覆盖。（追加效果：<code>docker run</code>命令之后的参数，会被当做参数传递给ENTRYPOINT，之后形成新的命令组合）</p> <h2 id="2cmd指令只有最后一条生效的原因">2、CMD指令只有最后一条生效的原因</h2> <p>CMD指令是一个容器中默认的可执行命令。也就是容器启动以后，默认执行的命令。（默认是重点）</p> <p>换句话说，给出了CMD指令的一个角色定位，它主要作用是<strong>定义默认的容器启动后执行的命令</strong>。</p> <blockquote> <p>提示：</p> <p>这也就是网上所说，只有最后一条CMD指令会生效，之前的都会被覆盖掉。</p> <p>就是因为CMD指令的角色定位就是默认，如果你不进行额外指定，那么就执行CMD指令。否则，你要自己指定了命令，那么就不会执行CMD指令，这也就是相当于CMD指令会被覆盖。</p> </blockquote> <p>而ENTRYPOINT指令，才是正统地用于定义容器启动以后的执行体，从名字上我们也可以看出，<code>entrypoint</code> 入口点的意思，一个容器的“入口”。</p> <h2 id="3cmd指令演示">3、CMD指令演示</h2> <p>我们以ContOS镜像为基础，对该镜像进行修改。</p> <p><strong>（1）准备测试环境</strong></p> <p>进入宿主机<code>/home/mydockerfile</code>目录中，创建Dockerfil文件<code>Dockerfile_cmd</code>。</p> <pre><code class="language-shell"># mydockerfile目录中创建Dockerfile_cmd文件 [root@192 mydockerfile]# pwd /home/mydockerfile [root@192 mydockerfile]# touch Dockerfile_cmd</code></pre> <p>编辑<code>Dockerfile_cmd</code>文件，内容如下：</p> <pre><code class="language-dockerfile">FROM centos # 继承了本地的centos镜像 CMD ["ls","-a"] # 执行ls -a 命令</code></pre> <blockquote> <p>说明：我们之前CMD执行都是<code>/bin/bash</code>，这回改成<code>ls -a</code>命令是一样的，就是启动容器后执行<code>ls -a</code>命令。</p> </blockquote> <p>根据<code>Dockerfile_cmd</code>生成<code>cmd</code>镜像。</p> <pre><code class="language-shell">[root@192 mydockerfile]# docker build -f /home/mydockerfile/Dockerfile_cmd -t wukong/cmd:1.0 . Sending build context to Docker daemon  3.072kB Step 1/2 : FROM centos  ---&gt; 300e315adb2f Step 2/2 : CMD ["ls","-a"]  ---&gt; Running in e34a0fc14329 Removing intermediate container e34a0fc14329  ---&gt; de211d4ca7f3 Successfully built de211d4ca7f3 Successfully tagged wukong/cmd:1.0</code></pre> <p><strong>（2）进行验证</strong></p> <p>运行<code>wukong/cmd</code>镜像，查看结果。</p> <pre><code class="language-shell"># 查看本地Docker镜像 [root@192 mydockerfile]# docker images REPOSITORY      TAG       IMAGE ID       CREATED         SIZE wukong/cmd      1.0       de211d4ca7f3   2 minutes ago   209MB wokong_centos   1.6       6441f63090d4   3 hours ago     291MB centos          latest    300e315adb2f   3 months ago    209MB  # 直接运行该容器，查看结果，输出了默认工作目录中的内容。 [root@192 mydockerfile]# docker run wukong/cmd:1.0 . .. .dockerenv bin dev etc home lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr var  # 容器启动，执行完ls -a 命令后，就会停止。 [root@192 mydockerfile]# docker ps CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</code></pre> <p>接下来，我们在<code>docker run</code>命令后，加入<code>-l</code>命令，我们再来查看一下结果。</p> <pre><code class="language-shell">[root@192 mydockerfile]# docker run wukong/cmd:1.0 -l docker: Error response from daemon: OCI runtime create failed: container_linux.go:367: starting container process caused: exec: "-l": executable file not found in $PATH: unknown.</code></pre> <p><strong>说明：</strong></p> <p><strong>我的意思是想追加一个<code>-l</code>参数，让容器启动后，执行<code>ls -al</code>命令。结果我们看到是，可执行文件找不到的报错，<code> exec: "-l":executable file not found</code>。</strong></p> <p><strong>这就是我们之前说过的，跟在镜像名后面的是<code>command</code>（命令），运行时会替换CMD的默认值。也就是<code>-l</code>参数替换了Dockerfile文件中的<code>CMD ["ls","-a"]</code>命令，而不是添加在原来的命令里。</strong></p> <p><strong>而单独的<code>-l</code>参数不是Linux命令，不能单独的命令，自然找不到，所以就报错了。</strong></p> <p><strong>所以综上所述，CMD指令会被<code>docker run</code>之后的参数替换。</strong></p> <p>那么如果我们希望加入<code>-l</code>这个参数，就必须重新完整的输入整个命令，如下：</p> <pre><code class="language-shell">[root@192 mydockerfile]# docker run wukong/cmd:1.0 ls -al total 0 drwxr-xr-x.   1 root root   6 Mar 20 11:13 . drwxr-xr-x.   1 root root   6 Mar 20 11:13 .. -rwxr-xr-x.   1 root root   0 Mar 20 11:13 .dockerenv lrwxrwxrwx.   1 root root   7 Nov  3 15:22 bin -&gt; usr/bin drwxr-xr-x.   5 root root 340 Mar 20 11:13 dev drwxr-xr-x.   1 root root  66 Mar 20 11:13 etc drwxr-xr-x.   2 root root   6 Nov  3 15:22 home lrwxrwxrwx.   1 root root   7 Nov  3 15:22 lib -&gt; usr/lib lrwxrwxrwx.   1 root root   9 Nov  3 15:22 lib64 -&gt; usr/lib64 drwx------.   2 root root   6 Dec  4 17:37 lost+found drwxr-xr-x.   2 root root   6 Nov  3 15:22 media drwxr-xr-x.   2 root root   6 Nov  3 15:22 mnt drwxr-xr-x.   2 root root   6 Nov  3 15:22 opt dr-xr-xr-x. 122 root root   0 Mar 20 11:13 proc dr-xr-x---.   2 root root 162 Dec  4 17:37 root drwxr-xr-x.  11 root root 163 Dec  4 17:37 run lrwxrwxrwx.   1 root root   8 Nov  3 15:22 sbin -&gt; usr/sbin drwxr-xr-x.   2 root root   6 Nov  3 15:22 srv dr-xr-xr-x.  13 root root   0 Mar 20 06:42 sys drwxrwxrwt.   7 root root 145 Dec  4 17:37 tmp drwxr-xr-x.  12 root root 144 Dec  4 17:37 usr drwxr-xr-x.  20 root root 262 Dec  4 17:37 var</code></pre> <h2 id="4entrypoint指令演示">4、ENTRYPOINT指令演示</h2> <p>和上面CMD指令演示相似。</p> <p>我们以ContOS镜像为基础，对该镜像进行修改。</p> <p><strong>（1）准备测试环境</strong></p> <p>进入宿主机<code>/home/mydockerfile</code>目录中，创建Dockerfil文件<code>Dockerfile_entrypoint</code>。</p> <pre><code class="language-shell"># mydockerfile目录中创建Dockerfile_entrypoint文件 [root@192 mydockerfile]# pwd /home/mydockerfile [root@192 mydockerfile]# touch Dockerfile_entrypoint</code></pre> <p>编辑<code>Dockerfile_entrypoint</code>文件，内容如下：</p> <pre><code class="language-dockerfile">FROM centos # 继承了本地的centos镜像 ENTRYPOINT ["ls","-a"] # 执行ls -a 命令</code></pre> <p>根据<code>Dockerfile_entrypoint</code>生成<code>entrypoint</code>镜像。</p> <pre><code class="language-shell">[root@192 mydockerfile]# docker build -f /home/mydockerfile/Dockerfile_entrypoint -t wukong/entrypoint:1.0 . Sending build context to Docker daemon  4.096kB Step 1/2 : FROM centos  ---&gt; 300e315adb2f Step 2/2 : ENTRYPOINT ["ls","-a"]  ---&gt; Running in ecd4a636d8be Removing intermediate container ecd4a636d8be  ---&gt; e641401b4ea5 Successfully built e641401b4ea5 Successfully tagged wukong/entrypoint:1.0</code></pre> <p><strong>（2）进行验证</strong></p> <p>运行<code>wukong/entrypoint</code>镜像，查看结果。</p> <pre><code class="language-shell"># 查看本地Docker镜像 [root@192 mydockerfile]# docker images REPOSITORY          TAG       IMAGE ID       CREATED         SIZE wukong/entrypoint   1.0       e641401b4ea5   2 minutes ago   209MB wukong/cmd          1.0       adda4543a402   3 minutes ago   209MB wokong_centos       1.6       6441f63090d4   4 hours ago     291MB centos              latest    300e315adb2f   3 months ago    209MB  # 直接运行该容器，查看结果，输出了默认工作目录中的内容。 [root@192 mydockerfile]# docker run wukong/entrypoint:1.0 . .. .dockerenv bin dev etc home lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr var</code></pre> <p>接下来，我们在<code>docker run</code>命令后，加入<code>-l</code>命令，我们再来查看一下结果。</p> <pre><code class="language-shell">[root@192 mydockerfile]# docker run wukong/entrypoint:1.0 -l total 0 drwxr-xr-x.   1 root root   6 Mar 20 12:03 . drwxr-xr-x.   1 root root   6 Mar 20 12:03 .. -rwxr-xr-x.   1 root root   0 Mar 20 12:03 .dockerenv lrwxrwxrwx.   1 root root   7 Nov  3 15:22 bin -&gt; usr/bin drwxr-xr-x.   5 root root 340 Mar 20 12:03 dev drwxr-xr-x.   1 root root  66 Mar 20 12:03 etc drwxr-xr-x.   2 root root   6 Nov  3 15:22 home lrwxrwxrwx.   1 root root   7 Nov  3 15:22 lib -&gt; usr/lib lrwxrwxrwx.   1 root root   9 Nov  3 15:22 lib64 -&gt; usr/lib64 drwx------.   2 root root   6 Dec  4 17:37 lost+found drwxr-xr-x.   2 root root   6 Nov  3 15:22 media drwxr-xr-x.   2 root root   6 Nov  3 15:22 mnt drwxr-xr-x.   2 root root   6 Nov  3 15:22 opt dr-xr-xr-x. 124 root root   0 Mar 20 12:03 proc dr-xr-x---.   2 root root 162 Dec  4 17:37 root drwxr-xr-x.  11 root root 163 Dec  4 17:37 run lrwxrwxrwx.   1 root root   8 Nov  3 15:22 sbin -&gt; usr/sbin drwxr-xr-x.   2 root root   6 Nov  3 15:22 srv dr-xr-xr-x.  13 root root   0 Mar 20 06:42 sys drwxrwxrwt.   7 root root 145 Dec  4 17:37 tmp drwxr-xr-x.  12 root root 144 Dec  4 17:37 usr drwxr-xr-x.  20 root root 262 Dec  4 17:37 var</code></pre> <p><strong>说明：想给Dockerfile文件中的<code>ENTRYPOINT ["ls","-a"]</code>命令追加一个<code>-l</code>参数，让容器启动后执行<code>ls -al</code>命令，结果顺利执行。</strong></p> <p><strong>结论：这就说明了，ENTRYPOINT指令是可以在容器启动的时候追加命令。</strong></p> <h2 id="5总结">5、总结</h2> <ul> <li>CMD：CMD设置容器启动后默认执行的命令及其参数。但CMD设置的指令，能够被<code>docker run</code>命令后面的命令行参数替换（也就是可被重写覆盖）。</li> <li>ENTRYPOINT，表示镜像在初始化时需要执行的命令。不会被忽略，一定会被执行，即使运行<code>docker run</code>命令时指定了其他命令（也就是可被重写覆盖）。</li> <li>CMD和ENTRYPOINT都只能在文件中存在一次。如果多个存在，只有最后一个生效，其它无效！</li> <li>对于 CMD 和 ENTRYPOINT 的设计而言，多数情况下它们应该是单独使用的。当然，有一个例外是 CMD 为 ENTRYPOINT 提供默认的可选参数。</li> </ul> <blockquote> <p>说明：</p> <p>对于 Dockerfile 来说，CMD 和 ENTRYPOINT 是非常重要的指令。它们不是在构建镜像的过程中执行，而是在启动容器时执行，所以主要用来指定容器默认执行的命令。</p> <p>Dockerfile中很多命令的功能都十分的相似，我们需要了解它们的区别，我们最好的学习就是对比他们，然后测试效果。</p> <p>以上就是CMD指令和ENTRYPOINT指令的区别。</p> </blockquote> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-4068.htm">Typora + EasyBlogImageForTypora直接上传图片到博客园_在线工具</a></p>
                                        <p>下一个：<a href="/html/category/article-4096.htm">什么是Python高阶函数</a></p>
                                    </div>

                                <div class="panel panel-default mt-5">
                    <div class="panel-heading">
                        <h3 class="m-0">推荐文章</h3>
                    </div>
                    <div class="panel-body">
                        <ul class="p-0 x-0">
                                                        <li class="py-2"><a href="/html/category/article-789.htm">vue 实现简单表格分页功能</a></li>
                                                        <li class="py-2"><a href="/html/category/article-227.htm">Spring Boot四大神器之CLI</a></li>
                                                        <li class="py-2"><a href="/html/category/article-224.htm">jackson   json对象、实体类相互转换</a></li>
                                                        <li class="py-2"><a href="/html/category/article-198.htm">js的二级菜单</a></li>
                                                        <li class="py-2"><a href="/html/category/article-151.htm">ES6 解构赋值详解</a></li>
                                                        <li class="py-2"><a href="/html/category/article-127.htm">ssh之struts2篇拦截器&amp;常用标签</a></li>
                                                        <li class="py-2"><a href="/html/category/article-117.htm">面试题-kafka如何保证消息不丢失</a></li>
                                                        <li class="py-2"><a href="/html/category/article-62.htm">YARN线上动态资源调优</a></li>
                                                        <li class="py-2"><a href="/html/category/article-51.htm">LevelDB 学习笔记2：合并</a></li>
                                                        <li class="py-2"><a href="/html/category/article-37.htm">SpringSecurity核心服务详解</a></li>
                                                    </ul>
                    </div>
                </div>
                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1630.htm">vue的路由组件的引入以及路由组件懒加载和router-link</a></h4>
                <p>App.vue &lt;template&gt;   &lt;div&gt;     &lt;router-link to="/"&gt;首页&lt;/router-link&gt;     &lt;</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3424.htm">用gcc查看c源文件的汇编代码   C++性能优化技术导论</a></h4>
                <p>1  用gcc查看c源文件的汇编代码    &nbsp;      gcc -S -o xx.s 2.c &nbsp; http://blog.csdn.net/heiyeshuwu/article/</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4096.htm">什么是Python高阶函数</a></h4>
                <p>高阶函数 什么是高阶函数 高阶函数就是能够把函数当成参数传递的函数就是高阶函数，换句话说如果一个函数的参数是函数，那么这个函数就是一个高阶函数。 高阶函数可以是你使用def关键字自定义的函数，也有Py</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1953.htm">springboot2+spring-retry配置及使用</a></h4>
                <p>springboot2+spring-retry配置及使用  参考 1 配置依赖 2 启动类开启retry 3 使用   @Retryable和@Backoff @Recover 使用样例     参</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-257.htm">JavaScript如何将字符串转换为分层对象</a></h4>
                <p>假设我们有一种特殊的字符串，其中包含成对的字符，像这样- const&nbsp;str&nbsp;=&nbsp;"AABBCCDDEE"; 我们需要基于此字符串构造一个对象，该字符串应如下所示： co</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1322.htm">@RequestBody接收json对象报415的解决办法</a></h4>
                <p>前端请求： $.ajax({             url: basePath() + "/index/login.do",             type : "post",          </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2823.htm">jQuery实现呼吸灯轮播图</a></h4>
                <p>jQuery实现呼吸灯轮播图  jQuery实现呼吸灯轮播图    jQuery实现呼吸灯轮播图 &lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;he</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2239.htm">【面试普通人VS高手系列】HashMap是怎么解决哈希冲突的？</a></h4>
                <p>常用数据结构基本上是面试必问的问题，比如HashMap、LinkList、ConcurrentHashMap等。 关于HashMap，有个学员私信了我一个面试题说： “HashMap是怎么解决哈希冲突</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-254.htm">图像处理学习笔记——BMP图片详解</a></h4>
                <p>一、位图和调色板的概念  1.位图（Bitmap）： 例如我们常说的屏幕分辨率为 640*480，刷新频率为70Hz，意思是说每行要扫描 640 个象素，一共有 480 行，每秒重复扫描屏幕 70 次</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4293.htm">免费领养宠物的平台小狗有哪些（免费领养宠物的app有哪些）</a></h4>
                <p>摘要：       本篇文章给大家谈谈免费领养宠物的平台小狗有哪些，以及免费领养宠物的app有哪些对应的知识点，希望对各位有所帮助，不要忘了收藏本站喔。本文目录一览：1、家中有一只狗想找新主人上哪..</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">6</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>