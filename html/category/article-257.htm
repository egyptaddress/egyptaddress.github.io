<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-257.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>postman测试@pathvariable,@requestparam,@requestbody发送情况 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">postman测试@pathvariable,@requestparam,@requestbody发送情况</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-dracula"> <h1> <a id="postmanpathvariablerequestparamrequestbody_0" rel="nofollow"></a>postman测试@pathvariable,@requestparam,@requestbody发送情况</h1> <h2> <a id="1_1" rel="nofollow"></a>1、三种方式简单说明</h2> <h3> <a id="11Pathvariable_2" rel="nofollow"></a>1.1、@Pathvariable</h3> <p>通过占位符的方式获取入参，前端示例：url:http://localhost:8080/system/student/${stuSno}<br /> 也即是从路径里面去获取变量<br /> 后端：</p> <pre><code class="prism language-java">    <span class="token comment">/**      * @param stuSno 学号      * @return 学生信息      * @description 根据主键获取学生信息      */</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/selectByPrimaryKey/{stuSno}"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> stuSno<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> studentService<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>stuSno<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></pre> <p>这种情况是方法参数名称和需要绑定的url中变量名称一致时<br /> 若是若方法参数名称和需要绑定的url中变量名称不一致时<br /> 后端：</p> <pre><code class="prism language-java"><span class="token comment">/**  * @param stuSno 学号  * @return 学生信息  * @description 根据主键获取学生信息  */</span> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/selectByPrimaryKey/{stuSno}"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"stuSno"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> sno<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">return</span> studentService<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>stuSno<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <blockquote> <p><strong>注意：前端传参的URL于后端@RequestMapping的URL必须相同且参数位置一一对应，否则前端会找不到后端地址</strong></p> </blockquote> <h3> <a id="12RequestParam_35" rel="nofollow"></a>1.2、@RequestParam</h3> <ol> <li>作用<br /> 将请求参数绑定在控制层（controller）方法参数【springmvc注解】</li> <li>语法</li> </ol> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"参数名"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token string">"true/false"</span><span class="token punctuation">,</span><span class="token keyword">default</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span> </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230112/8521444aecbaf8b6b05a315e35d7682c.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <p><strong>value</strong>:表示前端传过来的值名称，如果你不设置，那就默认使用服务端使用的参数名称（stuSno）<br /> 不设置：<br /> 前端：<img decoding="async" src="http://img.555519.xyz/uploads/20230112/75b722103ecc4a8ee26491260ac82dd4.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <pre><code class="prism language-java">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8081</span><span class="token operator">/</span>student<span class="token operator">/</span>selectByPrimaryKey1<span class="token operator">?</span>stuSno<span class="token operator">=</span><span class="token number">0001</span> </code></pre> <p>后端：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/8b1c2324ef69bd672e6c0df5270c160f.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">selectByPrimaryKey1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> stuSno<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> </code></pre> <p>设置<br /> 前端：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/f0bb0f98f0f08db7eacb20c7d8457969.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <pre><code class="prism language-java">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8081</span><span class="token operator">/</span>student<span class="token operator">/</span>selectByPrimaryKey1<span class="token operator">?</span>sno<span class="token operator">=</span><span class="token number">0001</span> </code></pre> <p>后端：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/5c7a0b232d820ca838f7bb93e6e614e7.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"><br /> 此时@requestParam中value=“sno” value可以省略 直接输入“sno”，类似于@RequestMapping</p> <pre><code class="prism language-java">    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">selectByPrimaryKey1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"sno"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> stuSno<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> </code></pre> <p>这时候前端传sno并非stuSno，需要在@requestParam中value设置sno<br /><strong>required</strong>:是否包含该参数，默认为true,表示该请求路径中必须包含该参数，如果不包含就报错<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/485b405403ae9126d679bba098ba7fba.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <pre><code class="prism language-java"><span class="token number">2021</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">15</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">30.495</span>  WARN <span class="token number">4736</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8081</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">.</span>w<span class="token punctuation">.</span>s<span class="token punctuation">.</span>m<span class="token punctuation">.</span>s<span class="token punctuation">.</span>DefaultHandlerExceptionResolver <span class="token operator">:</span> <span class="token class-name">Resolved</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span>MissingServletRequestParameterException</span><span class="token operator">:</span> <span class="token class-name">Required</span> request parameter <span class="token string">'sno'</span> <span class="token keyword">for</span> method parameter type <span class="token class-name">String</span> is not present<span class="token punctuation">]</span>  </code></pre> <p>defaultValue:默认参数值，如果设置了该值，required=true将失效，自动变为false,如果没有传该参数，使用默认值；比如说此时 后端直接写成 defaultValue=“0001”<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/af6dd54a10e7fa1ca3ef2649c4ff8c03.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"><img decoding="async" src="http://img.555519.xyz/uploads/20230112/d8ced868634306fa6751687019037908.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <ol start="4"> <li>示例说明<br /> 后端controller</li> </ol> <pre><code class="prism language-java">    <span class="token comment">/**      * @param stuSno 学号      * @return 学生信息      * @description 根据主键获取学生信息      */</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/selectByPrimaryKey"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">selectByPrimaryKey1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"sno"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"0001"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> stuSno<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> studentService<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>stuSno<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></pre> <p>前端暂时使用 postman<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/54d8cbf4ecac48239228fcb7551fb757.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <h3> <a id="13RequestBody_103" rel="nofollow"></a>1.3、@RequestBody</h3> <p>@RequestBody主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)</p> <ol> <li>@RequestBody直接以String接收前端传过来的json数据<br /> 后端代码</li> </ol> <pre><code class="prism language-java">    <span class="token comment">/**      * @param stuSno 学号      * @return 学生信息      * @description 根据主键获取学生信息      */</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/selectByPrimaryKey3"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">selectByPrimaryKey2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> jsonString<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">// 使用fastjson解析json格式字符串为json对象</span>         <span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 获取学号</span>         <span class="token class-name">String</span> stuSno <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"stuSno"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> studentService<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>stuSno<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></pre> <p>前端postman<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/4bd59d5712dbfd210b346a247436a736.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"><br /> 需要通过fastjson转换json字符串为json对象从而获取相应的值，否则报错<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/de09b31589d88d71de8f1d867b6c0856.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <ol start="3"> <li>@RequestBody以简单对象接收前端传过来的json数据<br /> 实体类</li> </ol> <pre><code class="prism language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>geekmice<span class="token punctuation">.</span>springbootrequestparam<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>   <span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonFormat</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">private</span> <span class="token class-name">String</span> stuSno<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> stuName<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> stuBorn<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> stuSex<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStuSno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> stuSno<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStuSno</span><span class="token punctuation">(</span><span class="token class-name">String</span> stuSno<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>stuSno <span class="token operator">=</span> stuSno<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStuName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> stuName<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStuName</span><span class="token punctuation">(</span><span class="token class-name">String</span> stuName<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>stuName <span class="token operator">=</span> stuName<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStuBorn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> stuBorn<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStuBorn</span><span class="token punctuation">(</span><span class="token class-name">String</span> stuBorn<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>stuBorn <span class="token operator">=</span> stuBorn<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStuSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> stuSex<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStuSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> stuSex<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>stuSex <span class="token operator">=</span> stuSex<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                 <span class="token string">"stuSno='"</span> <span class="token operator">+</span> stuSno <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                 <span class="token string">", stuName='"</span> <span class="token operator">+</span> stuName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                 <span class="token string">", stuBorn='"</span> <span class="token operator">+</span> stuBorn <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                 <span class="token string">", stuSex='"</span> <span class="token operator">+</span> stuSex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                 <span class="token string">'}'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  </code></pre> <p>dao层</p> <pre><code class="prism language-java">    <span class="token comment">/**      * @param student 学生信息      * @return 返回学生信息      * @description 根据学生对象获取学生信息      */</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <p>xml</p> <pre><code class="prism language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>获取学生信息<span class="token operator">--</span><span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectByPrimaryKeySelective"</span> resultType<span class="token operator">=</span><span class="token string">"student"</span> parameterType<span class="token operator">=</span><span class="token string">"student"</span><span class="token operator">&gt;</span>         select         <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Base_Column_List"</span><span class="token operator">/</span><span class="token operator">&gt;</span>         from student         <span class="token generics"><span class="token punctuation">&lt;</span>where<span class="token punctuation">&gt;</span></span>             <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"stuSno != '' and stuSno != null"</span><span class="token operator">&gt;</span>                 stu_sno <span class="token operator">=</span> #<span class="token punctuation">{<!-- --></span>stuSno<span class="token punctuation">}</span>             <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>             <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"stuName != '' and stuName != null"</span><span class="token operator">&gt;</span>                 and stu_name <span class="token operator">=</span> #<span class="token punctuation">{<!-- --></span>stuName<span class="token punctuation">}</span>             <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>             <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"stuBorn != '' and stuBorn != null"</span><span class="token operator">&gt;</span>                 and stu_born <span class="token operator">=</span> #<span class="token punctuation">{<!-- --></span>stuBorn<span class="token punctuation">}</span>             <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>             <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"stuSex != '' and stuSex != null"</span><span class="token operator">&gt;</span>                 and stu_sex <span class="token operator">=</span> #<span class="token punctuation">{<!-- --></span>stuSex<span class="token punctuation">}</span>             <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>         <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span> </code></pre> <p>service</p> <pre><code class="prism language-java">    <span class="token comment">/**      * @description 根据学生对象获取学生信息      * @param student 学生信息      * @return 返回学生信息      */</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> studentDao<span class="token punctuation">.</span><span class="token function">selectByPrimaryKeySelective</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></pre> <p>controller</p> <pre><code class="prism language-java">    <span class="token comment">/**      * @param student 学生对象      * @return 获取对应学生信息      * @description 用户选择获取对应的学生信息      */</span>     <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/selectByPrimaryKeySelective"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPrimaryKeySelective</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> studentService<span class="token punctuation">.</span><span class="token function">selectByPrimaryKeySelective</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></pre> <p>postman效果<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/87a343aef6770bc15dda483bc60ad6c0.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <ol start="5"> <li>@RequestBody以复杂对象接收前端传过来的json数据<br /> 复杂对象：Tim</li> </ol> <pre><code class="prism language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>geekmice<span class="token punctuation">.</span>springbootrequestparam<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>  <span class="token comment">/**  * @author pmb  * @create 2021-08-15-4:34  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tim</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">// 团队id</span>     <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>      <span class="token comment">// 团队名字</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> timName<span class="token punctuation">;</span>      <span class="token comment">// 获得荣誉</span>     <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> honors<span class="token punctuation">;</span>      <span class="token comment">// 团队成员</span>     <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> studentList<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> id<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTimName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> timName<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTimName</span><span class="token punctuation">(</span><span class="token class-name">String</span> timName<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>timName <span class="token operator">=</span> timName<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getHonors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> honors<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHonors</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> honors<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>honors <span class="token operator">=</span> honors<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">getStudentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> studentList<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStudentList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> studentList<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>studentList <span class="token operator">=</span> studentList<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">StringBuffer</span> stringHonor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"荣誉开始：。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> honors<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             stringHonor<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>             stringHonor<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token class-name">StringBuffer</span> stringTim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"团队成员开始：。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> studentList<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             stringTim<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>             stringTim<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         stringHonor<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stringTim<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> stringHonor<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230112/84186cbce37d385b0fbf6d992a1d5d69.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"><br /> postman<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/f1d667b173a0a458c85d3b588cbf9adb.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <ol start="7"> <li>@RequestBody与简单的@RequestParam()同时使用</li> </ol> <p>controller<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/44c1e6e6fa0ba163d9f8aa6a5b1a3257.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <p>postman<img decoding="async" src="http://img.555519.xyz/uploads/20230112/2de7f6dab46008d2190307cf308401c7.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <ol start="9"> <li>@RequestBody与复杂的@RequestParam()同时使用<br /> controller<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/eaee56bfb1f7ea4807ecbbaadcac1850.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"> </li> </ol> <p>postman<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/153e5f950d2d7570cdbacb4c73b6ba22.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <ol start="11"> <li>@RequestBody接收请求体中的json数据；不加注解接收URL中的数据并组装为对象<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/4164e152198e45e714283e6a4a58e348.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"> </li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230112/49eda6151396d9f048c1e5aec4022397.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> <h2> <a id="3_358" rel="nofollow"></a>3、不同之处&amp;应用场景</h2> <p>我认为在单个参数提交 API 获取信息的时候，直接放在 URL 地址里，也就是使用 URI 模板的方式是非常方便的，而不使用 @PathVariable 还需要从 request 里提取指定参数，多一步操作，所以如果提取的是多个参数，而且是多个不同类型的参数，我觉得应该使用其他方式，也就是 @RequestParam</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230112/b9af90f848c3dac86e222513bd0fbc22.jpg" alt="postman测试@pathvariable,@requestparam,@requestbody发送情况"></p> </p></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-256.htm">2、java mybatis 命名空间</a></p>
                                        <p>下一个：<a href="/html/category/article-258.htm">vue实现自定义全局右键菜单_vue.js</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-210.htm">JAVA8 | 日期时间API（LocalDate、LocalDateTime、LocalTime）</a></h4>
                <p>目录      日期 时间 合并日期和时间 时间戳 时间段   Duration Period   操作日期 日期格式化 时区 日历       Java8 引入全新的日期和时间API，主要包括Loc</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-240.htm">vue写一个简单的文件上传控件</a></h4>
                <p>这篇将介绍如何写一个简单的基于Vue+Element的文件上传控件。 控件将具有 1. 上传队列的列表，显示文件名称，大小等信息，可以显示上传进度实时刷新 2. 取消上传  &nbsp;使用Eleme</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-214.htm">JavaScript找到两个数组之间的差异方法详解</a></h4>
                <p>我们有两个这样的数字数组- const&nbsp;arr1&nbsp;=&nbsp;[12,&nbsp;54,&nbsp;2,&nbsp;4,&nbsp;6,&nbsp;34,&nbsp;3]; co</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-206.htm">眼见不一定为实：调用链HBase倾斜修复</a></h4>
                <p>hello，大家好，我是小楼。 今天给大家分享一个关于HBase数据倾斜的排查案例，不懂调用链？不懂HBase？没关系，看完包懂~ 背景 最近HBase负责人反馈HBase存储的调用链数据偶尔出现极其</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-231.htm">通俗易懂：窗口函数案例详解</a></h4>
                <p>什么是窗口函数 相信很多人都比较熟悉 SQL 聚合函数的语法，比如 count(), sum(), max()等， 窗口函数类似聚合函数，不同的是窗口函数不改变原有的行。 窗口函数是数据分析和数据开发</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-239.htm">vue中watch监听，ajax异步问题解决</a></h4>
                <p>1.组装参数调方法 getResult(){ 	//组装requestParam1和requestParam2参数  	let requestParam1 = {} 	let requestParam</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-254.htm">如何保证Redis缓存和数据库一致性？</a></h4>
                <p>首先我们先了解下缓存是什么？ 缓存就是把低速存储的结果，临时保存在高速存储的技术。 为什么使用redis进行缓存数据？ Redis嘛，就是一种运行速度很快，并发很强的跑在内存上的NoSql数据库，支持</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-253.htm">Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required List parame</a></h4>
                <p>问题：Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required List par</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-228.htm">Android jetpack room+ViewModel+liveData 数据自动更新</a></h4>
                <p>Android jetpack room的使用_安果移不动的博客-CSDN博客 接上篇博客 我们用google推荐的这种方式  &nbsp; 修改： StudentDao package com.an</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-238.htm">js数组删除的方法</a></h4>
                <p>js的数组删除，我建议大家使用splice函数，不要使用slice函数，因为slice是返回一个新数组，并不是从原来的数组中删除。 比如： let a=[111,222,333,444]; a.spl</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>