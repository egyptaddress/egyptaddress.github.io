<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-99.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Spring Boot 2.3.x 分层构建 Docker 镜像实战 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Spring Boot 2.3.x 分层构建 Docker 镜像实战</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h1><strong>目录</strong></h1> <p>一、什么是镜像分层</p> <p>二、SpringBoot 2.3.x 新增对分层的支持</p> <p>三、创建测试的 SpringBoot 应用</p> <ul> <li>1、Maven 中引入相关依赖和插件</li> <li>2、创建测试的 Controller 类</li> <li>3、创建 SpringBoot 启动类</li> </ul> <p>四、创建两种构建镜像的 Dockerfile 脚本</p> <ul> <li>1、普通镜像构建脚本文件 dockerfile-normal</li> <li>2、分层镜像构建脚本文件 dockerfile-layer</li> </ul> <p>五、使用两种 Dockerfile 构建项目镜像</p> <ul> <li>1、在服务器一构建普通 Docker 镜像</li> <li>2、在服务器二构建分层 Docker 镜像</li> </ul> <p>六、镜像推送到镜像仓库测试</p> <ul> <li>1、推送镜像到镜像仓库测试</li> <li>2、镜像仓库拉取镜像测试</li> </ul> <p>七、镜像构建、推送、拉取时间汇总</p> <ul> <li>1、不使用分层构建镜像</li> <li>2、使用分层构建镜像</li> <li>3、总结</li> </ul> <p><strong>系统环境：</strong></p> <ul> <li>Docker 版本：19.03.13</li> <li>Open JDK 基础镜像版本：openjdk:8u275</li> <li>私有的 Harbor 镜像仓库：自建 Harbor 私库</li> <li>项目 Github：SpringBoot 2.3.x 分层构建 Docker 镜像示例</li> </ul> <p>作者：超级小豆丁，链接：www.mydlq.club/article/98/</p> <h2><strong>一、什么是镜像分层</strong></h2> <p><strong>镜像的构成</strong></p> <p>现在一谈起镜像大部分都是指 Docker 引擎构建的镜像，一般 Docker 镜像是由很多层组成，底层是操作系统，然后在其之上是基础镜像或者用户自定义 Dockerfile 脚本中定义的中间层。其中镜像在构建完成后，用户只能对镜像进行读操作，而不能进行写操作，只有镜像启动后变为容器，才能进行读写操作。镜像整体结构，可以观看下图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/4910a98c39c86eb6eaad8f08e9500141.jpg" alt="Spring Boot 2.3.x 分层构建 Docker 镜像实战"></p> <p>该图中展示了镜像的基本组成，但是图中这一个个中间层是什么呢？要想了解这些层具体是什么，那得知道如何构建 Docker 镜像了。平时我们构建 Docker 镜像时候，都是编写 Dockerfile 脚本，然后使用 Docker 镜像构建命令，按照脚本一行行执行构建。</p> <p>PS：更多 Docker 和 Spring Boot 的文章可以关注微信公众号「Java后端」回复「666」下载技术栈手册。</p> <p>如下就是一个 Dockerfile 脚本，脚本内容就构建 Java 项目镜像常用的 Dockerfile 命令：</p> <pre><code class="prism language-go">FROM openjdk<span class="token punctuation">:</span><span class="token number">8</span>u275 VOLUME<span class="token operator">/</span>tmp ADD target<span class="token comment">/*.jar app.jar ENV TZ="Asia/Shanghai" ENV JAVA_OPTS="" ENV JVM_OPTS="-XX:MaxRAMPercentage=80.0" ENTRYPOINT ["sh","-c","java $JVM_OPTS $JAVA_OPTS -jar /app.jar"]</span></code></pre> <p>有了 Dockerfile 脚本，我们需要执行 Docker 的构建镜像命令对执行 Dockerfile 脚本构建镜像，其中构建镜像的过程如下：</p> <pre><code class="prism language-go">## 构建镜像的命令 $ docker build<span class="token operator">-</span>t java<span class="token operator">-</span>test<span class="token punctuation">:</span>latest<span class="token punctuation">.</span>    ## 命令执行的过程 Step<span class="token number">1</span><span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">:</span> FROM openjdk<span class="token punctuation">:</span><span class="token number">8</span>u275<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">82</span>f24ce79de6 Step<span class="token number">2</span><span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">:</span> VOLUME<span class="token operator">/</span>tmp<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> Running in a6361fdfc193 Removing intermediate container a6361fdfc193<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> a43948bf1b98 Step<span class="token number">3</span><span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">:</span> ADD target<span class="token comment">/*.jar app.jar  ---> 18f4bc60818f Step 4/7 : ENV TZ="Asia/Shanghai"  ---> Running in cc738aa5865b Removing intermediate container cc738aa5865b  ---> 538adb85609e Step 5/7 : ENV JAVA_OPTS=""  ---> Running in f8b635d32b2b Removing intermediate container f8b635d32b2b  ---> 34e7a8cd7b6e Step 6/7 : ENV JVM_OPTS="-XX:MaxRAMPercentage=80.0"  ---> Running in 9331cb6e443e Removing intermediate container 9331cb6e443e  ---> 232b9c6c1d29 Step 7/7 : ENTRYPOINT ["sh","-c","java $JVM_OPTS $JAVA_OPTS -jar /app.jar" ]  ---> Running in c3a24fba3a10 Removing intermediate container c3a24fba3a10  ---> a41974d5f0e3</span></code></pre> <p>可以看到总共存在 7 个构建步骤，每步都与 Dockerfile 里面一行指令对应。样子和下图相似：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/6e545de04105eb3f2164a3dce2ae8aa5.jpg" alt="Spring Boot 2.3.x 分层构建 Docker 镜像实战"></p> <p>如果这时候，我们改变原来 Dockerfile 内容，创建一个新的镜像，其 Dockerfile 如下：</p> <pre><code class="prism language-go">FROM openjdk<span class="token punctuation">:</span><span class="token number">8</span>u275 VOLUME<span class="token operator">/</span>tmp ADD target<span class="token comment">/*.jar app.jar ENV TZ="Asia/Macao"                  #与原来 Dockerfile 不同 ENV JVM_OPTS="-Xmx512m -Xss256k"     #与原来 Dockerfile 不同 ENTRYPOINT ["sh","-c","java $JVM_OPTS $JAVA_OPTS -jar /app.jar" ]</span></code></pre> <p>执行 Docker 命令构建镜像：</p> <pre><code class="prism language-go">$ docker build<span class="token operator">-</span>t java<span class="token operator">-</span>test2<span class="token punctuation">:</span>latest<span class="token punctuation">.</span>   Step<span class="token number">1</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">:</span> FROM openjdk<span class="token punctuation">:</span><span class="token number">8</span>u275<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">82</span>f24ce79de6 Step<span class="token number">2</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">:</span> VOLUME<span class="token operator">/</span>tmp<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> Using cache<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> a43948bf1b98 Step<span class="token number">3</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">:</span> ADD target<span class="token comment">/*.jar app.jar  ---> Using cache  ---> 18f4bc60818f Step 4/6 : ENV TZ="Asia/Macao"  ---> Running in fd98b90a5485 Removing intermediate container fd98b90a5485  ---> afab3fcdab07 Step 5/6 : ENV JVM_OPTS="-Xmx512m -Xss256k"  ---> Running in 19a99576fba9 Removing intermediate container 19a99576fba9  ---> 4eeab7d7c720 Step 6/6 : ENTRYPOINT ["sh","-c","java $JVM_OPTS $JAVA_OPTS -jar /app.jar" ]  ---> Running in 2dba72e1eef4 Removing intermediate container 2dba72e1eef4  ---> 7c706ecf7698</span></code></pre> <p>可以观察到执行过程中，从一开始执行的构建步骤中显示，并没有生成新的中间层镜像，而是直接使用了已经存在的缓存镜像。直至 4⁄6这部中，由于新的 Dockerfile 与原来 Dockerfile 发生变动，所以这部中间层镜像直接是新创建的，并没有使用缓存中间层镜像。</p> <p>然后往下观察，发现之后的全部构建都是新创建的中间层镜像，即是脚本最后的一行和原来相同，也没有使用缓存中间层镜像。</p> <p>上面现象说明，Docker 镜像在构建过程中按照 Dockerfile 自上往下的执行顺序中，如果从最上层开始，其脚本内容和已有的缓存中间层镜像内容一致，就会引入缓存中的中间层镜像（并不是直接复制缓存镜像，而是引入镜像文件地址，多个镜像共享这些中间层镜像）。但是，如果执行过程中中间任意一行镜像构建的内容发生变化，那么当前行和之后的全部行在执行时就不会使用缓存中的中间层镜像，而是全部创建新的镜像。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/015aa74c842a9809268089a26957e779.jpg" alt="Spring Boot 2.3.x 分层构建 Docker 镜像实战"></p> <p>这就是 Docker 镜像中缓存中间层镜像的复用，学会使用缓存构建镜像将大大减少存储空间的占用以及镜像的构建的构建速度，镜像的缓存不仅仅体现在镜像的构建上，在执行”镜像推送”、”镜像拉取”操作时都能观察到其的好处。</p> <ul> <li><strong>镜像缓在镜像推送的体现：</strong> 如镜像推送时候，也是将镜像整体构成的中间层镜像并行推送到镜像仓库，如果镜像仓库中已经存某个中间层镜像，那么推送过程就不会再次将该层镜像推送到镜像仓库，而是将仓库中并不存在中间层镜像推送到其中。</li> <li><strong>镜像缓存在镜像拉取的体现：</strong> 在拉取镜像时候，如果本地某个大镜像的中间层镜像的组成中，已经包含新拉取镜像的中间层部分镜像，那么将直接复用本地已经镜像的中间层镜像，不必再将其进行拉取，而本地不存在的中间层镜像将会被继续拉取。</li> </ul> <p>说了这么多，相信大家已经对镜像缓存的使用有了初步了解，那么再谈及为什么需要镜像分层就很好解释，其原因就是 Docker 想提高资源的复用率，将一个大镜像拆分成很多层小镜像组成，以达到镜像中间层的复用的目的。</p> <h2><strong>二、SpringBoot 2.3.x 新增对分层的支持</strong></h2> <p>SpringBoot 2.3.x 以后支持分层打包应用，需要 Pom.xml 中引入 SpringBoot 2.3.x 后的父依赖和使用 SpringBoot 打包插件<code>spring-boot-maven-plugin</code>，并且开启<code>layers</code> 功能，然后执行 Maven 编译源码构建 Jar 包，使用该 Jar 包就可以构建基于分层模式的 Docker 镜像：</p> <p>项目 pom.xml 中引入 SpringBoot 2.3.x 依赖：</p> <pre><code class="prism language-go"><span class="token operator"><</span>parent<span class="token operator">></span><span class="token operator"><</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator"><</span><span class="token operator">/</span>groupId<span class="token operator">></span><span class="token operator"><</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator"><</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator"><</span>version<span class="token operator">></span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">.</span>RELEASE<span class="token operator"><</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator"><</span>relativePath<span class="token operator">/</span><span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>parent<span class="token operator">></span></code></pre> <p>项目 pom.xml 中引入 spring-boot-maven-plugin 打包插件，并且开启分层功能：</p> <pre><code class="prism language-go"><span class="token operator"><</span>build<span class="token operator">></span><span class="token operator"><</span>plugins<span class="token operator">></span><span class="token operator"><</span>plugin<span class="token operator">></span><span class="token operator"><</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator"><</span><span class="token operator">/</span>groupId<span class="token operator">></span><span class="token operator"><</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token operator"><</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator"><</span>configuration<span class="token operator">></span><span class="token operator"><</span><span class="token operator">!</span><span class="token operator">--</span>开启分层编译支持<span class="token operator">--</span><span class="token operator">></span><span class="token operator"><</span>layers<span class="token operator">></span><span class="token operator"><</span>enabled<span class="token operator">></span><span class="token boolean">true</span><span class="token operator"><</span><span class="token operator">/</span>enabled<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>layers<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>configuration<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>plugin<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>plugins<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>build<span class="token operator">></span></code></pre> <p>执行 Maven 命令，构建分层的 JAR 包，命令和平时的 Maven 构建命令相同：</p> <pre><code class="prism language-go">$ mvn install</code></pre> <p>观察 Jar 结构，可以看到里面多了<code>classpath.idx</code> 与<code>layers.idx</code> 两个文件：</p> <ul> <li><strong>classpath.idx：</strong> 文件列出了依赖的 jar 包列表，到时候会按照这个顺序载入。</li> <li><strong>layers.idx：</strong> 文件清单，记录了所有要被复制到 Dokcer 镜像中的文件信息。</li> </ul> <p>根据官方介绍，在构建 Docker 镜像前需要从 Jar 中提起出对应的分层文件到 Jar 外面，可用使用下面命令列出可以从分层 Jar 中提取出的文件夹信息：</p> <pre><code class="prism language-go">$ java<span class="token operator">-</span>Djarmode<span class="token operator">=</span>layertools<span class="token operator">-</span>jar target<span class="token operator">/</span>springboot<span class="token operator">-</span>layer<span class="token operator">-</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token punctuation">.</span>jar list</code></pre> <p>可用该看到以下输出，下面的内容就是接下来使用分层构建后，生成的 Jar 提取出对应资源后的结构：</p> <pre><code class="prism language-go">dependencies spring<span class="token operator">-</span>boot<span class="token operator">-</span>loader snapshot<span class="token operator">-</span>dependencies application</code></pre> <p>上面即是使用分层工具提取 Jar 的内容后生成的文件夹，其中各个文件夹作用是：</p> <ul> <li><strong>dependencies：</strong> 存储项目正常依赖 Jar 的文件夹。</li> <li><strong>snapshot-dependencies：</strong> 存储项目快照依赖 Jar 的文件夹。</li> <li><strong>resources：</strong> 用于存储静态资源的文件夹。</li> <li><strong>application：</strong> 用于存储应用程序类相关文件的文件夹。</li> </ul> <h2><strong>三、创建测试的 SpringBoot 应用</strong></h2> <p>创建测试的 SpringBoot 项目，并且在 pom.xml 中开启镜像分层。</p> <h3>1、Maven 中引入相关依赖和插件</h3> <pre><code class="prism language-go"><span class="token operator"><</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator"><</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span>          xmlns<span class="token punctuation">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>          xsi<span class="token punctuation">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">></span><span class="token operator"><</span>modelVersion<span class="token operator">></span><span class="token number">4.0</span><span class="token number">.0</span><span class="token operator"><</span><span class="token operator">/</span>modelVersion<span class="token operator">></span><span class="token operator"><</span>parent<span class="token operator">></span><span class="token operator"><</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator"><</span><span class="token operator">/</span>groupId<span class="token operator">></span><span class="token operator"><</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator"><</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator"><</span>version<span class="token operator">></span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">.</span>RELEASE<span class="token operator"><</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>parent<span class="token operator">></span><span class="token operator"><</span>artifactId<span class="token operator">></span>springboot<span class="token operator">-</span>dockerfile<span class="token operator">-</span>layer<span class="token operator"><</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator"><</span>packaging<span class="token operator">></span>jar<span class="token operator"><</span><span class="token operator">/</span>packaging<span class="token operator">></span><span class="token operator"><</span>name<span class="token operator">></span>springboot<span class="token operator">-</span>dockerfile<span class="token operator">-</span>layer<span class="token operator"><</span><span class="token operator">/</span>name<span class="token operator">></span><span class="token operator"><</span>description<span class="token operator">></span>springboot build layer example<span class="token operator"><</span><span class="token operator">/</span>description<span class="token operator">></span><span class="token operator"><</span>dependencies<span class="token operator">></span><span class="token operator"><</span>dependency<span class="token operator">></span><span class="token operator"><</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator"><</span><span class="token operator">/</span>groupId<span class="token operator">></span><span class="token operator"><</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator"><</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>dependencies<span class="token operator">></span><span class="token operator"><</span>build<span class="token operator">></span><span class="token operator"><</span>plugins<span class="token operator">></span><span class="token operator"><</span>plugin<span class="token operator">></span><span class="token operator"><</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator"><</span><span class="token operator">/</span>groupId<span class="token operator">></span><span class="token operator"><</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token operator"><</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator"><</span>configuration<span class="token operator">></span><span class="token operator"><</span>layers<span class="token operator">></span><span class="token operator"><</span>enabled<span class="token operator">></span><span class="token boolean">true</span><span class="token operator"><</span><span class="token operator">/</span>enabled<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>layers<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>configuration<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>plugin<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>plugins<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>build<span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>project<span class="token operator">></span></code></pre> <h3>2、创建测试的 Controller 类</h3> <pre><code class="prism language-go"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>   @RestController public class TestController<span class="token punctuation">{<!-- --></span>       @<span class="token function">GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>     public String<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"hello world!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h3>3、创建 SpringBoot 启动类</h3> <pre><code class="prism language-go"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>   @SpringBootApplication public class Application<span class="token punctuation">{<!-- --></span>       public static void<span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>class<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2><strong>四、创建两种构建镜像的 Dockerfile 脚本</strong></h2> <p>为了方便体现出 SpringBoot 2.3.x 支持的分层构建 Dockerfile 的优点，这里在 Java 源码文件夹下，创建普通与分层两种构建镜像的 Dockerfile 脚本，后续会使用这两种脚本构建 Docker 镜像进行构建速度、推送速度、拉取速度的对比。</p> <h3>1、普通镜像构建脚本文件 dockerfile-normal</h3> <pre><code class="prism language-go">FROM openjdk<span class="token punctuation">:</span><span class="token number">8</span>u275 VOLUME<span class="token operator">/</span>tmp ADD target<span class="token comment">/*.jar app.jar RUN sh -c 'touch /app.jar' ENV TZ="Asia/Shanghai" RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone ENV JVM_OPTS="-XX:MaxRAMPercentage=80.0" ENV JAVA_OPTS="" ENTRYPOINT [ "sh", "-c", "java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar $APP_OPTS" ]</span></code></pre> <p><strong>说明：</strong></p> <ul> <li><strong>TZ：</strong> 时区设置，而 Asia/Shanghai 表示使用中国上海时区。</li> <li><strong>JVM_OPTS：</strong> 指定 JVM 启动时候的参数，-XX:MaxRAMPercentage 参数和 -Xmx 类似，都是限制堆内存大小，只不过 -Xmx 需要手动指定限制大小，而 -XX:MaxRAMPercentage 则是根据虚拟机可用内存百分比限制。</li> <li><strong>JAVA_OPTS：</strong> 在镜像启动时指定的自定义 Java 参数，例如 -Dspring.application.name=xxx。</li> </ul> <h3>2、分层镜像构建脚本文件 dockerfile-layer</h3> <pre><code class="prism language-go">FROM openjdk<span class="token punctuation">:</span><span class="token number">8</span>u275 as builder WORKDIR application COPY target<span class="token comment">/*.jar application.jar RUN java -Djarmode=layertools -jar application.jar extract FROM openjdk:8u275 WORKDIR application COPY --from=builder application/dependencies/ ./ COPY --from=builder application/snapshot-dependencies/ ./ COPY --from=builder application/spring-boot-loader/ ./ COPY --from=builder application/application/ ./ ENV TZ="Asia/Shanghai" RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone ENV JVM_OPTS="-XX:MaxRAMPercentage=80.0" ENV JAVA_OPTS="" ENTRYPOINT ["sh","-c","java $JVM_OPTS $JAVA_OPTS org.springframework.boot.loader.JarLauncher"]</span></code></pre> <p><strong>说明：</strong></p> <ul> <li><strong>TZ：</strong> 时区设置，而 Asia/Shanghai 表示使用中国上海时区。</li> <li><strong>-Djarmode=layertools：</strong> 指定构建 Jar 的模式。</li> <li><strong>extract：</strong> 从 Jar 包中提取构建镜像所需的内容。</li> <li><strong>-from=builder</strong> 多级镜像构建中，从上一级镜像复制文件到当前镜像中。</li> </ul> <h2><strong>五、使用两种 Dockerfile 构建项目镜像</strong></h2> <h3>1、在服务器一构建普通 Docker 镜像</h3> <p><strong>(1) 第一次构建</strong></p> <pre><code class="prism language-go">## 执行 Maven 命令，将源代码构建 Jar 包 $ mvn clean install   ## 构建 SpringBoot 应用的 Docker 镜像 $ time docker build<span class="token operator">-</span>t hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token punctuation">.</span></code></pre> <p>Docker 镜像构建总共花费 24.98s 时间。</p> <p><strong>(2) 第二次构建（修改依赖 pom.xml 文件）</strong></p> <pre><code class="prism language-go">## 修改 pom<span class="token punctuation">.</span>xml 里面的依赖，随意添加一个新的依赖包，然后再次将源代码构建 Jar 包 $ mvn clean install   ## 构建 SpringBoot 应用的 Docker 镜像 $ time docker build<span class="token operator">-</span>t hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span><span class="token punctuation">.</span></code></pre> <p>Docker 镜像构建总共花费 1.27s 时间。</p> <p><strong>(3) 第三次构建（修改代码内容）</strong></p> <pre><code class="prism language-go">## 修改源代码任意内容后，然后再次将源代码构建 Jar 包 $ mvn clean install   ## 构建 SpringBoot 应用的 Docker 镜像 $ time docker build<span class="token operator">-</span>t hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span><span class="token punctuation">.</span></code></pre> <p>Docker 镜像构建总共花费 1.32s 时间。</p> <h3>2、在服务器二构建分层 Docker 镜像</h3> <p><strong>(1) 第一次构建</strong></p> <pre><code class="prism language-go">## 执行 Maven 命令，将源代码构建 Jar 包 $ mvn clean install   ## 构建 SpringBoot 应用的 Docker 镜像 $ time docker build<span class="token operator">-</span>t hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token punctuation">.</span></code></pre> <p>Docker 镜像构建总共花费 26.12s 时间。</p> <p><strong>(2) 第二次构建（修改依赖 pom.xml 文件）</strong></p> <pre><code class="prism language-go">## 修改 pom<span class="token punctuation">.</span>xml 里面的依赖，随意添加一个新的依赖包，然后再次将源代码构建 Jar 包 $ mvn clean install   ## 构建 SpringBoot 应用的 Docker 镜像 $ time docker build<span class="token operator">-</span>t hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span><span class="token punctuation">.</span></code></pre> <p><strong>(3) 第三次构建（修改代码内容）</strong></p> <pre><code class="prism language-go">## 修改源代码任意内容后，然后再次将源代码构建 Jar 包 $ mvn clean install   ## 构建 SpringBoot 应用的 Docker 镜像 $ time docker build<span class="token operator">-</span>t hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span><span class="token punctuation">.</span></code></pre> <p>Docker 镜像构建总共花费 2.82s 时间。</p> <h2><strong>六、镜像推送到镜像仓库测试</strong></h2> <h3>1、推送镜像到镜像仓库测试</h3> <p>服务器一推送普通镜像到镜像仓库1：</p> <pre><code class="prism language-go">## 第一次推送镜像 $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token builtin">real</span><span class="token number">0</span>m35<span class="token punctuation">.</span><span class="token number">215</span>s   ## 第二次推送镜像 $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span><span class="token builtin">real</span><span class="token number">0</span>m14<span class="token punctuation">.</span><span class="token number">051</span>s   ## 第三次推送镜像 $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span><span class="token builtin">real</span><span class="token number">0</span>m14<span class="token punctuation">.</span><span class="token number">183</span>s</code></pre> <p>服务器二推送分层镜像到镜像仓库2：</p> <pre><code class="prism language-go">## 第一次推送镜像 $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token builtin">real</span><span class="token number">0</span>m34<span class="token punctuation">.</span><span class="token number">121</span>s   ## 第二次推送镜像 $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span><span class="token builtin">real</span><span class="token number">0</span>m13<span class="token punctuation">.</span><span class="token number">605</span>s   ## 第三次推送镜像 $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span><span class="token builtin">real</span><span class="token number">0</span>m4<span class="token punctuation">.</span><span class="token number">805</span>s</code></pre> <h3>2、镜像仓库拉取镜像测试</h3> <p>服务器一推送从镜像仓库1拉取镜像：</p> <pre><code class="prism language-go">## 清理全部镜像 $ docker rm<span class="token operator">--</span>force $<span class="token punctuation">(</span>docker images<span class="token operator">-</span>qa<span class="token punctuation">)</span>   ## 拉取镜像 springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span> $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token builtin">real</span><span class="token number">0</span>m35<span class="token punctuation">.</span><span class="token number">395</span>s   ## 拉取镜像 springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span> $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span><span class="token builtin">real</span><span class="token number">0</span>m6<span class="token punctuation">.</span><span class="token number">501</span>s   ## 拉取镜像 springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span> $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span><span class="token builtin">real</span><span class="token number">0</span>m6<span class="token punctuation">.</span><span class="token number">993</span>s</code></pre> <p>服务器二推送从镜像仓库2拉取镜像：</p> <pre><code class="prism language-go">## 清理全部镜像 $ docker rm<span class="token operator">--</span>force $<span class="token punctuation">(</span>docker images<span class="token operator">-</span>qa<span class="token punctuation">)</span>   ## 拉取镜像 springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span> $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token builtin">real</span><span class="token number">0</span>m30<span class="token punctuation">.</span><span class="token number">615</span>s   ## 拉取镜像 springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span> $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span><span class="token builtin">real</span><span class="token number">0</span>m4<span class="token punctuation">.</span><span class="token number">811</span>s   ## 拉取镜像 springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span> $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span><span class="token builtin">real</span><span class="token number">0</span>m1<span class="token punctuation">.</span><span class="token number">293</span>s</code></pre> <h2><strong>七、镜像构建、推送、拉取时间汇总</strong></h2> <h3>1、不使用分层构建镜像</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/a56f3ede5d0bd5cb68ef29b6be605285.jpg" alt="Spring Boot 2.3.x 分层构建 Docker 镜像实战"></p> <h3></h3> <p><strong>如下图：</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/869d996f245da6846259ee2bab0c3389.jpg" alt="Spring Boot 2.3.x 分层构建 Docker 镜像实战"></p> <h3>2、使用分层构建镜像</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/71e0db0d91b79679aca13468fc8f8571.jpg" alt="Spring Boot 2.3.x 分层构建 Docker 镜像实战"></p> <p><strong>如下图：</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/f58842ef6d234de369359c10caf3e1d6.jpg" alt="Spring Boot 2.3.x 分层构建 Docker 镜像实战"></p> <h3><strong>3、总结</strong></h3> <p>上面进行了使用 SpringBoot2.3.x 分层的方式构建镜像与普通的方式构建镜像，在镜像的构建、推送、拉取方面进行了执行速度对比，总结出如下结论：</p> <ul> <li><strong>镜像构建：</strong> 在构建上，使用分层 Jar 构建镜像可能比普通方式构建镜像更繁琐，所以也更耗时，故而在构建上分层 Jar 构建镜像没有太多优势。</li> <li><strong>镜像推送：</strong> 在推送上，如果每次构建镜像都只是修改构建镜像项目的源码，使用分层 Jar 构建镜像，可以大大加快镜像推送速度。</li> <li>如果是修改构建镜像项目中的依赖包，则和普通构建一样速度很慢。</li> <li><strong>镜像拉取：</strong> 拉取和推送类似，如果只修改构建镜像项目的源码，只会拉取源码相关的中间层镜像，该层非常小（一般几百KB），拉取速度自然非常快。</li> </ul> <p>而对构建镜像项目的依赖包进行变动（增加依赖、删除依赖、修改依赖版本等），则会和普通方式构建镜像一样，拉取速度很慢，这是因为依赖包层是中间层镜像最大的一层（一般在10MB~200MB之间），如果该层发生变动则整个层会进行重新拉取，这样速度自然会很慢。</p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-98.htm">数据库基础知识详解四：存储过程、视图、游标、SQL语句优化以及索引</a></p>
                                        <p>下一个：<a href="/html/category/article-100.htm">css文本垂直居中详解</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-6844.htm">小黄人馒头做法视频大全</a></h4>
                <p>宝宝馒头の小黄人馒头，是一款非常适合宝宝的美食。它不仅可口，而且色彩鲜艳，充满了童趣。这里，我们将为大家介绍制作这款小黄人馒头的具体方法。 材料：  低筋面粉 200克 白糖 15克 酵母 5克 水 </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-6983.htm">动物医院诊室的岗位职责是什么 动物医院诊室的岗位职责是什么呢</a></h4>
                <p>摘要：       大家好，今天小编关注到一个比较有意思的话题，就是关于动物医院诊室的岗位职责是什么的问题，于是小编就整理了5个相关介绍动物医院诊室的岗位职责是什么的解答，让我们一起看看吧。动物诊所助</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-6105.htm">动物医院取什么名字形容敬业的（动物医院是干嘛的）</a></h4>
                <p>摘要：       本篇文章给大家谈谈动物医院取什么名字形容敬业的，以及动物医院是干嘛的对应的知识点，希望对各位有所帮助，不要忘了收藏本站喔。本文目录一览：1、医院起名大全2、...        本</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-6845.htm">我所在的城市有一家动物医院的英语怎么说 我所在的城市有一家动物医院的英语怎么说</a></h4>
                <p>摘要：       大家好，今天小编关注到一个比较有意思的话题，就是关于我所在的城市有一家动物医院的英语怎么说的问题，于是小编就整理了2个相关介绍我所在的城市有一家动物医院的英语怎么说的解答，让我们一</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4322.htm">宠物粮食品牌前十排名榜单 宠物粮食品牌前十排名榜单图片</a></h4>
                <p>摘要：       大家好，今天小编关注到一个比较有意思的话题，就是关于宠物粮食品牌前十排名榜单的问题，于是小编就整理了4个相关介绍宠物粮食品牌前十排名榜单的解答，让我们一起看看吧。什么品牌鸽粮性价比</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4323.htm">四川红烧鱼的做法 最正宗的做法(四川红烧鱼怎么做好吃又简单视频教程)</a></h4>
                <p>各位同学好，相信还有很多人对于正宗四川怎么做的相关问题不太了解，今天给各位分享一下关于正宗四川红烧鱼怎么做的解答，希望可以帮助到大家，下面一起来看看吧！！本文目录导读：正宗四川红烧鱼怎么做正宗四川红烧</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-5928.htm">米加小镇狗粮在哪里买（米加小镇养宠物）</a></h4>
                <p>摘要：       今天给各位分享米加小镇狗粮在哪里买的知识，其中也会对米加小镇养宠物进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、米加小镇商店在哪里... </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-5929.htm">领养宠物狗狗免费（领养宠物狗免费的平台）</a></h4>
                <p>摘要：       今天给各位分享领养宠物狗狗免费的知识，其中也会对领养宠物狗免费的平台进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、网上免费领养狗狗都是坑.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4293.htm">免费领养宠物的平台小狗有哪些（免费领养宠物的app有哪些）</a></h4>
                <p>摘要：       本篇文章给大家谈谈免费领养宠物的平台小狗有哪些，以及免费领养宠物的app有哪些对应的知识点，希望对各位有所帮助，不要忘了收藏本站喔。本文目录一览：1、家中有一只狗想找新主人上哪..</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-6192.htm">中国吊扇十大电风扇品牌(吊扇品牌有哪些)</a></h4>
                <p>排行相关内容，小编在这里做了整理，希望能对大家有所帮助，关于吊扇品牌排行信息，一起来了解一下吧！ 吊扇10大品牌       吊扇10大品牌有美的Midea、钻石、艾美特、华生wahson、格力GRE</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>