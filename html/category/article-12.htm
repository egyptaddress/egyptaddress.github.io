<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-12.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>FP-growth算法以及代码实现 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">FP-growth算法以及代码实现</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2><a id="FPgrowth_0" rel="nofollow"></a>FP-growth算法以及代码实现</h2> <p><strong>FP-growth算法介绍</strong><br /> FP-growth算法，它被用于挖掘频繁项集，它把数据集存储为一个叫FP树的数据结构里，这样可以更高效地发现频繁项集或频繁项对。</p> <p><strong>FP树</strong><br /> FP即Frequent Pattern，FP树看上去就是一棵前缀树，根节点是空集，结点上是单个元素，保存了它在数据集中的出现次数，出现次数越多的元素越接近根。此外，结点之间通过链接（link）相连，只有相似元素会被连起来，连起来的元素又可以看成链表。同一个元素可以在FP树中多次出现，根据位置不同，对应着不同的频繁项集。可以为FP树设置最小支持度，过滤掉出现次数太少的元素。<br /> FP树每个结点上都是一个单独的元素，及其在路径中的出现次数。</p> <p><strong>构建FP树</strong><br /> 1.遍历一次数据集，统计每个元素出现的次数，然后把出现次数较小的滤掉，然后对每个样本按照元素出现次数重排序<br /> 2.构造FP树。从根节点∅开始，将过滤并排序后的样本一个个加入树中，若FP树不存在现有元素则添加分支，若存在则增加相应的值。</p> <p>每个样本都是排序过的，频数高的频繁项集在前面，它总是更接近根结点，所以也可以把每个样本看成一棵子树，而我们要做的就是把子树添加到FP树里</p> <p><strong>FP树构建实例</strong><br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads3/20220723/8997a38616092cdcadd727bd2b7cc8b2.jpg"><br /> 根据此数据集构造的FP树为：<br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads3/20220723/c5b95874b7b6b51c5983459c22b72f16.jpg"><br /><strong>从FP树挖掘频繁项集</strong><br /> 步骤如下：<br /> 1.从FP树提取条件模式基<br /> 2.用条件模式基构造FP树<br /> 3.重复1和2直到树只包含一个元素<br /><strong>提取条件模式基</strong><br /> 条件模式基（conditional pattern base）定义为以所查找元素为结尾的所有前缀路径（prefix path）的集合。我们要做的就是从header列表开始，针对每一个频繁项，都查找其对应的条件模式基。<br /> 上述实例路径：<br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads3/20220723/87284c4fd6432b801db05ca6f49b05ae.jpg"><br /> 频繁项集：<br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads3/20220723/9238b527667e5c1550aba0db8430a56a.jpg"><br /><strong>代码实现</strong></p> <pre><code class="prism language-python"><span class="token keyword">class</span><span class="token class-name">treeNode</span><span class="token punctuation">:</span><span class="token keyword">def</span><span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nameValue<span class="token punctuation">,</span> numOccur<span class="token punctuation">,</span> parentNode<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>name<span class="token operator">=</span> nameValue         self<span class="token punctuation">.</span>count<span class="token operator">=</span> numOccur         self<span class="token punctuation">.</span>nodeLink<span class="token operator">=</span><span class="token boolean">None</span>         self<span class="token punctuation">.</span>parent<span class="token operator">=</span> parentNode         self<span class="token punctuation">.</span>children<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">def</span><span class="token function">inc</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numOccur<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>count<span class="token operator">+=</span> numOccur<span class="token keyword">def</span><span class="token function">disp</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ind<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'  '</span><span class="token operator">*</span> ind<span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token keyword">for</span> child<span class="token keyword">in</span> self<span class="token punctuation">.</span>children<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             child<span class="token punctuation">.</span>disp<span class="token punctuation">(</span>ind<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 当出现两个或两个以上的相似项时，找到最后一个相似项的实例，让该实例的self.nodeLink属性保存新出现的相似项</span><span class="token comment"># 效果如同是在一条链的最后一个节点后再接入一个节点，这些链就是self.nodeLink</span><span class="token keyword">def</span><span class="token function">updateHeader</span><span class="token punctuation">(</span>nodeToTest<span class="token punctuation">,</span> targetNode<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">while</span> nodeToTest<span class="token punctuation">.</span>nodeLink<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>         nodeToTest<span class="token operator">=</span> nodeToTest<span class="token punctuation">.</span>nodeLink     nodeToTest<span class="token punctuation">.</span>nodeLink<span class="token operator">=</span> targetNode<span class="token comment"># 接收处理好的事务列表，画出FP树</span><span class="token keyword">def</span><span class="token function">updateFPtree</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> inTree<span class="token punctuation">,</span> headerTable<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">in</span> inTree<span class="token punctuation">.</span>children<span class="token punctuation">:</span><span class="token comment"># 判断items的第一个结点是否已作为子结点</span>         inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>inc<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment"># 创建新的分支</span>         inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span> treeNode<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> inTree<span class="token punctuation">)</span><span class="token comment"># 更新相应频繁项集的链表，往后添加</span><span class="token keyword">if</span> headerTable<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">:</span>             headerTable<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">else</span><span class="token punctuation">:</span>             updateHeader<span class="token punctuation">(</span>headerTable<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 递归</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">:</span>         updateFPtree<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> headerTable<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token comment"># 输入字典格式的事务和最小支持度，返回FP树和项头表</span><span class="token keyword">def</span><span class="token function">createFPtree</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span> minSup<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     headerTable<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">for</span> trans<span class="token keyword">in</span> dataSet<span class="token punctuation">:</span><span class="token keyword">for</span> item<span class="token keyword">in</span> trans<span class="token punctuation">:</span>             headerTable<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">=</span> headerTable<span class="token punctuation">.</span>get<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span> dataSet<span class="token punctuation">[</span>trans<span class="token punctuation">]</span><span class="token keyword">for</span> k<span class="token keyword">in</span><span class="token builtin">list</span><span class="token punctuation">(</span>headerTable<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> headerTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&lt;</span> minSup<span class="token punctuation">:</span><span class="token keyword">del</span><span class="token punctuation">(</span>headerTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 删除不满足最小支持度的元素</span>     freqItemSet<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span>headerTable<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 满足最小支持度的频繁项集</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>freqItemSet<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token keyword">for</span> k<span class="token keyword">in</span> headerTable<span class="token punctuation">:</span>         headerTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>headerTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token comment"># element: [count, node]</span>     retTree<span class="token operator">=</span> treeNode<span class="token punctuation">(</span><span class="token string">'Null Set'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token keyword">for</span> tranSet<span class="token punctuation">,</span> count<span class="token keyword">in</span> dataSet<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         localD<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">for</span> item<span class="token keyword">in</span> tranSet<span class="token punctuation">:</span><span class="token keyword">if</span> item<span class="token keyword">in</span> freqItemSet<span class="token punctuation">:</span><span class="token comment"># 过滤，只取该样本中满足最小支持度的频繁项</span>                 localD<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">=</span> headerTable<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># element : count</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>localD<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token comment"># 根据全局频数从大到小对单样本排序</span>             orderedItem<span class="token operator">=</span><span class="token punctuation">[</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> v<span class="token keyword">in</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>localD<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> p<span class="token punctuation">:</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#print('orderItems=', orderedItem)</span><span class="token comment"># 用过滤且排序后的样本更新树</span>             updateFPtree<span class="token punctuation">(</span>orderedItem<span class="token punctuation">,</span> retTree<span class="token punctuation">,</span> headerTable<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token keyword">return</span> retTree<span class="token punctuation">,</span> headerTable<span class="token comment"># 构造成 element : count 的形式，以字典形式输出</span><span class="token keyword">def</span><span class="token function">createInitSet</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span>     retDict<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">for</span> trans<span class="token keyword">in</span> dataSet<span class="token punctuation">:</span>         trans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'，'</span><span class="token punctuation">)</span>         key<span class="token operator">=</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token keyword">if</span> key<span class="token keyword">in</span> retDict<span class="token punctuation">:</span>             retDict<span class="token punctuation">[</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>             retDict<span class="token punctuation">[</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">return</span> retDict<span class="token comment"># 递归回溯，找到给定节点往上回溯到根节点的路径，并把路径存到列表中</span><span class="token keyword">def</span><span class="token function">ascendFPtree</span><span class="token punctuation">(</span>leafNode<span class="token punctuation">,</span> prefixPath<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> leafNode<span class="token punctuation">.</span>parent<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>         prefixPath<span class="token punctuation">.</span>append<span class="token punctuation">(</span>leafNode<span class="token punctuation">.</span>name<span class="token punctuation">)</span>         ascendFPtree<span class="token punctuation">(</span>leafNode<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> prefixPath<span class="token punctuation">)</span><span class="token comment"># 找到给定元素名称的条件模式基，以字典格式存贮</span><span class="token keyword">def</span><span class="token function">findPrefixPath</span><span class="token punctuation">(</span>basePat<span class="token punctuation">,</span> myHeaderTab<span class="token punctuation">)</span><span class="token punctuation">:</span>     treeNode<span class="token operator">=</span> myHeaderTab<span class="token punctuation">[</span>basePat<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># basePat在FP树中的第一个结点</span>     condPats<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">while</span> treeNode<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>         prefixPath<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>         ascendFPtree<span class="token punctuation">(</span>treeNode<span class="token punctuation">,</span> prefixPath<span class="token punctuation">)</span><span class="token comment"># prefixPath是倒过来的，从treeNode开始到根</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>prefixPath<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">:</span>             condPats<span class="token punctuation">[</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>prefixPath<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span> treeNode<span class="token punctuation">.</span>count<span class="token comment"># 关联treeNode的计数</span>         treeNode<span class="token operator">=</span> treeNode<span class="token punctuation">.</span>nodeLink<span class="token comment"># 下一个basePat结点</span><span class="token keyword">return</span> condPats<span class="token keyword">def</span><span class="token function">mineFPtree</span><span class="token punctuation">(</span>inTree<span class="token punctuation">,</span> headerTable<span class="token punctuation">,</span> minSup<span class="token punctuation">,</span> preFix<span class="token punctuation">,</span> freqItemList<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 最开始的频繁项集是headerTable中的各元素</span>     bigL<span class="token operator">=</span><span class="token punctuation">[</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> v<span class="token keyword">in</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>headerTable<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> p<span class="token punctuation">:</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 根据频繁项的总频次排序</span><span class="token comment">#print("bigL:  ",bigL)</span><span class="token keyword">for</span> basePat<span class="token keyword">in</span> bigL<span class="token punctuation">:</span><span class="token comment"># 对每个频繁项</span>         newFreqSet<span class="token operator">=</span> preFix<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>         newFreqSet<span class="token punctuation">.</span>add<span class="token punctuation">(</span>basePat<span class="token punctuation">)</span>         freqItemList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>newFreqSet<span class="token punctuation">)</span>         condPattBases<span class="token operator">=</span> findPrefixPath<span class="token punctuation">(</span>basePat<span class="token punctuation">,</span> headerTable<span class="token punctuation">)</span><span class="token comment"># 当前频繁项集的条件模式基</span>         myCondTree<span class="token punctuation">,</span> myHead<span class="token operator">=</span> createFPtree<span class="token punctuation">(</span>condPattBases<span class="token punctuation">,</span> minSup<span class="token punctuation">)</span><span class="token comment"># 构造当前频繁项的条件FP树</span><span class="token keyword">if</span> myHead<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>             mineFPtree<span class="token punctuation">(</span>myCondTree<span class="token punctuation">,</span> myHead<span class="token punctuation">,</span> minSup<span class="token punctuation">,</span> newFreqSet<span class="token punctuation">,</span> freqItemList<span class="token punctuation">)</span><span class="token comment"># 递归挖掘条件FP树</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>     parsedDat<span class="token operator">=</span><span class="token punctuation">[</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line<span class="token keyword">in</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'FPGrowth_datasets/shopping_cart.csv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>     initSet<span class="token operator">=</span> createInitSet<span class="token punctuation">(</span>parsedDat<span class="token punctuation">)</span>     myFPtree<span class="token punctuation">,</span> myHeaderTab<span class="token operator">=</span> createFPtree<span class="token punctuation">(</span>initSet<span class="token punctuation">)</span>     myFPtree<span class="token punctuation">.</span>disp<span class="token punctuation">(</span><span class="token punctuation">)</span>     myFreqList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>     mineFPtree<span class="token punctuation">(</span>myFPtree<span class="token punctuation">,</span> myHeaderTab<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> myFreqList<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"频繁项集的数量是: %s"</span><span class="token operator">%</span><span class="token builtin">len</span><span class="token punctuation">(</span>myFreqList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> item<span class="token keyword">in</span> myFreqList<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-11.htm">自定义指令拖拽el-dialog</a></p>
                                        <p>下一个：<a href="/html/category/article-13.htm">Java 语言实现简易版扫码登录_在线工具</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-216.htm">Java String.equals()与==。</a></h4>
                <p>equals()方法将此字符串与指定的对象进行比较。当且仅当参数不为null并且是一个String对象，表示与此对象相同的字符序列时，结果为true。 示例 public&nbsp;class&nbs</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-205.htm">Ribbon（一）远程调用RestTemplate</a></h4>
                <p>目录 一、RestTemplate介绍 二、需求说明 1、业务结构及说明 三、模块搭建 1、新建一个maven项目 2、添加ribbon依赖 3、编辑yml 4、主程序 5、编辑RibbonContr</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-211.htm">谨慎使用Arrays.asList()</a></h4>
                <p>经过了两个月的【深入学习Java编程方法】课程学习，对Java的一些新特性有了更多的了解。依旧，坑洼遍地。 Java中的Collection类是一个很好用、很常用的类，省去了当年C语言手动链表的麻烦之</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-210.htm">JAVA8 | 日期时间API（LocalDate、LocalDateTime、LocalTime）</a></h4>
                <p>目录      日期 时间 合并日期和时间 时间戳 时间段   Duration Period   操作日期 日期格式化 时区 日历       Java8 引入全新的日期和时间API，主要包括Loc</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-209.htm">Java基础知识 29（同步代码块，同步方法，静态同步方法，Lock锁，死锁问题）</a></h4>
                <p>Java基础知识 29  先回顾一下上节课讲的多个窗口共同卖票的问题，首先我们设置三个不同的线程来同步进行卖票，我们把所有的票数全部设置成静态变量，让这三个线程可以共享这些票。通过设置这个静态变量我们</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-212.htm">从查询重写角度理解elasticsearch的高亮原理</a></h4>
                <p>一、高亮的一些问题 elasticsearch提供了三种高亮方式，前面我们已经简单的了解了elasticsearch的高亮原理; 高亮处理跟实际使用查询类型有十分紧密的关系，其中主要的一点就是muti</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-240.htm">vue写一个简单的文件上传控件</a></h4>
                <p>这篇将介绍如何写一个简单的基于Vue+Element的文件上传控件。 控件将具有 1. 上传队列的列表，显示文件名称，大小等信息，可以显示上传进度实时刷新 2. 取消上传  &nbsp;使用Eleme</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-222.htm">vue 配置全局模块、SASS（自动引入模块）</a></h4>
                <p>ProvidePlugin Automatically load modules instead of having to import or require them everywhere 自动引入</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-237.htm">Vue3实现跑马灯效果_vue.js</a></h4>
                <p>本文实例为大家分享了Vue3实现跑马灯效果的具体代码，供大家参考，具体内容如下 先看效果：  html部分代码  &lt;div class="app"&gt;              &lt;p </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-258.htm">vue实现自定义全局右键菜单_vue.js</a></h4>
                <p>前段时间公司在做一个webIDE项目，其中有对文件树的各种操作，主要通过右键菜单实现，今天就来记录一下怎么在vue项目中实现全局的自定义右键菜单。效果如图所示：  注意： 需要在项目中找到页面整体布局</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>