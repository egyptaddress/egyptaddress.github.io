<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-38.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>分布式一致性协议：Raft算法详解 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">分布式一致性协议：Raft算法详解</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <blockquote> <p>在分布式系统中，有很多复杂的理论，从CAP理论到BASE理论，我们不断的在可用性以及一致性之间做出抉择，每一部分都相当复杂，就分布式一致性而言，又有许多协议，从2PC到3PC再到paxos算法，到ZAB协议，再到Raft算法。本篇文章主要介绍Raft算法的实现过程，最近有空看了下国外的论文，这里做个简单的总结，本人水平有限，如有问题，欢迎批评指正。</p> </blockquote> <p>在介绍Raft算法之前，你肯定听说过Paxos算法，它是<code>Leslie Lamport</code>大师提出的，解决了很大一部分分布式领域一致性问题，但是由于其算法理解复杂，细节描述不够详细，现有的所有解决方案都是基于该算法自己实现具体的细节。这也被Raft算法的作者一直所诟病，所以它一直希望能有一种算法能够更加便于理解，所以在2014年，由斯坦福大学提出的一种全新的一致性协议。在原算法论文中，作者还有意的吐糟了Paxos算法：</p> <ol> <li>Paxos算法设计复杂，难以理解，主要原因是它的整个过程杂糅在一起，也就是他没有明确的选主与写入的阶段，刚开始不需要<code>leader</code>，将所有server分为两种主要的角色<code>Proposer</code>以及<code>Accepter</code>，每一个<code>Proposer</code>可以提出一个propose，然后进行投票选举，提交propose，造成整个过程比较复杂。</li> <li>它的许多实现细节并没有描述清楚，不能应用到实际的项目工程中，即使现有的基于<code>Paxos</code>算法实现方案比如Google的<code>Chubby</code>也是自己实现了一些具体的过程，而且也没有公开。</li> </ol> <p>基于上面的的一系列问题，作者本着简单实用的原则，实现了Raft，它相比<code>Paxos</code>算法有以下几大优点与不同：</p> <ol> <li>它将整个算法的实现分为三个阶段，防止像Paxos算法那样将整个过程杂糅在一起，导致理解困难，主要分为选主阶段、日志复制阶段以及安全状态。</li> <li>Strong leader：通过选举出主节点负责将Log复制到其他服务器，使得Raft算法简单易懂。</li> <li>Leader election：每一个节点通过sleep一个随机的<code>timeout</code>，每一个server有一个id，然后 通过投票选举。</li> <li>Membership changes：有时候，集群可能需要进行升级或者更改配置，它可以通过<code>joint consensus</code>的方式支持在线上更改配置，并且在这个阶段保证整个集群的可用性。</li> <li>snapshot：每一台机器维持着一份副本，这样可以在机器宕机恢复的时候读取<code>lastest commitId</code>进行恢复。</li> </ol> <p>基于以上对于Raft算法的介绍，我们开始介绍它的每一个实现细节。首先，我们了解一下什么是复制状态机，如下图所示：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/08caff8e87470cb5f0b2cba520641904.jpg" alt="分布式一致性协议：Raft算法详解"><br /> 提到分布式一致性，我们不得不提到复制状态机，它结合一致性协议解决了分布式系统中的高可用以及容错性，比如Zookeeper，HDFS等。所谓复制状态机，就是说每一台服务器上维持着一份持久化Log，然后 通过一致性协议算法，保证每一个实例中的Log保持一致，并且顺序存放，这样客户端就可以在每一个实例中读取到相同的数据。如上图所示，有一个<code>Consensus Module</code>就是一致性协议模块，它可以是Paxos算法的实现或者Raft算法，下面，我们重点介绍Raft算法的实现。</p> <p>在这之前，需要理解Raft算法中的几个状态以及它的RPC调用，它主要有两个RPC通信，分别是<code>RequestVote RPC</code>以及<code>AppendEntries RPC</code>，分别负责选举以及数据的交互。</p> <p>这里需要着重理解<code>Term</code>，对于每一个leader，都会有一个<code>Term</code>，它会将这个term带到log日志中的entry中，代表当前entry是在哪一个term时期写入。具体过程下文会详细解释。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/6a6b2fcf9cf571716c0f890dba1d3f43.jpg" alt="分布式一致性协议：Raft算法详解"><br /> 如上图，当前节点的term为4，state为leader，commitIndex为0，总共有五个实例。</p> <p><strong>选主阶段</strong></p> <p>Raft算法的选举算法比较简单理解，对于每一个实例都有一个<code>server id</code>以及<code>timeout</code>，每一个实例会随机sleep一个timeout，然后开始投票，都去选举那个最大的<code>serverid</code>,如果有超过半数以上的实例同意，那么将其选举为leader。之所以随机sleep一个time，是因为这样可以加快选举的流程，在一般情况下，只要网络状态良好，先timeout的实例先进行选举，这样只需要一轮选举就选举出leader，避免了由于相互选举而再次进入选举的情况。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/6121cbba1d08a0712aea56c76995c55f.jpg" alt="分布式一致性协议：Raft算法详解"><br /> 主节点和其他子节点之间通过心跳机制保持联系，如果在一段时间内收不到心跳报告，则将该节点判为故障。</p> <p>如果从节点故障，那么待故障恢复之后，就会去主节点同步日志进行故障恢复。</p> <p>如果主节点故障，那么会重新进入选举阶段，每一个实例会将当前的term加1然后进行投票，如果接收到的投票小于自己的term，那么投反对票，即选举自己。最后统计大于半数的节点选举为leader，如果选举失败，则会将当前term再加1进行选举，直到选举成功。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/d1e21b6e0f918908a5c3a2a0c8a918e4.jpg" alt="分布式一致性协议：Raft算法详解"><br /><strong>数据的同步</strong></p> <p>在选举完成之后，客户端与leader交互写入数据，这时leader会在自己的log的第一个空位index中写入数，接着，通过<code>AppendEntries RPC</code>把当前index的entry以及<code>lastest commiteid</code>发送给每一个follower节点，如果follower接收到的<code>lastest commiteid</code>等于当前实例的，代表&lt;=该ID的所有entry已经被<code>commit</code>，此时follower返回true，否则返回false。如果超过半数的follower向leader返回true，那么代表当前entry写入成功。对于返回false的实例，可能是因为网络原因或者故障恢复的原因，数据没有正确同步，此时leader会从最后一个entry开始向前遍历，知道找到故障实例对应的entry，然后开始恢复数据。以下图为例：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/de7abefaca4567ad11a34b3d3d16529b.jpg" alt="分布式一致性协议：Raft算法详解"><br /> leader的当前index=8，term为3，x=4，开始同步数据，会收到第一个（包括自己），第三个和第五个实例的同意，大于半数的实例返回true，当前entry commit，第二个和第四个实例将会返回false，此时leader会从最后一个entry开始从后向前遍历，将当前index发送给返回false的实例，直到它返回true开始同步数据。比如刚开始leader发送<code>index=8，term=3，x=4</code>的数据给第二个实例，它将会返回false，接着发送前一个entry，也返回false，直到发送<code>index=6，term=3，y=7</code>的数据时返回true，开始正确同步数据，第四个实例也同理。</p> <p>那么，有人会提出，如果在数据同步的时候节点发生宕机该怎么办？它会出现哪些情况呢？<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/3ecddf1c8f8e1a0937165038f5549f12.jpg" alt="分布式一致性协议：Raft算法详解"><br /> 对于a~f的实例，可能是因为某种故障而展现出的不同情况，它们都有可能成为当前leader的follower节点，以其中的（f）实例为例解释一下故障发生的原因。（f）实例之前可能是term=2是的leader节点，在写入数据的时候，它只写入了自己的log就发生宕机，在一个短暂的时间之后，它故障恢复，并且有再次被选举为leader，并且当前term=3，此时它写入数据，但是又在写入自己的log日志但未发送给其他节点的时候发生故障宕机。所以就造成了上述的现象，对于其他实例的故障也类似。</p> <p>从上面数据同步的过程可以看出，每一个实例都维护这一个最小<code>committed index</code>，代表着小于等于当前index的数据已经全部被commit，那么如果在收到leader的提交的index的时候会进行比较，此时会出现一个有意思的问题呢，之前提交的log日志可能被修改，或者更准确的说被覆盖。具体原因我们下面分情况来讨论一下上面提到的数据同步时宕机的情况。</p> <p><strong>case1</strong></p> <p>当前节点发起写数据的请求，刚写入自己的log，还没有append到其他实例上，发生宕机，如下图所示：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/63a504ad0eadf7647da5c111864617b7.jpg" alt="分布式一致性协议：Raft算法详解"><br /> 接着很短的时间内故障恢复，并且之前的leader又被重新选举为leader，在写数据的时候，之前的数据已经存在，所以这条数据被认定为已经commit，所以不需要其他节点选举，直接将数据同步，如下图所示，S1恢复故障后继承被选举为leader，它直接将之前的数据同步到其他节点。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/1a6883a7c658ed602062ed3f9fc282d9.jpg" alt="分布式一致性协议：Raft算法详解"><br /> 比较有意思，在故障恢复后，它不需要其他节点去投票就直接同步数据，但这并不会造成什么影响，只不过是数据可能会被重复消费，如果需要实现<code>exactly-once</code>语义需要用户自己去实现，比如在客户端缓存一个ID，保存当前消费的offset来达到目的。</p> <p><strong>case 2</strong></p> <p>当前主节点宕机，但是故障恢复后其他节点被选举为主节点。如下图所示，S1之前为leader，发生故障宕机，此时重新选举：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/50f068a0aa0fa17cbd8a51bfe6eccc5e.jpg" alt="分布式一致性协议：Raft算法详解"><br /> 新选举的节点为S2，它写入新数据，当前term=6，那么它会不会覆盖之前主节点写入的数据呢？<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/4138fe7897536ca3d6238dd05984b849.jpg" alt="分布式一致性协议：Raft算法详解"><br /> 答案是肯定的，它会覆盖之前的数据，最终结果如下图所示：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/03ce97ad574940b3b923730d3c3b809c.jpg" alt="分布式一致性协议：Raft算法详解"><br /> 对于整个故障以及恢复的流程通过下图可以清楚的了解，该图描述的情况上面已经介绍过了，不过这里还是要说一下e状态，上面的case 2提到，当前leader宕机之前数据只写入了自己的log，那么数据会被重新选举后的leader覆盖，如d状态，但是e状态，就是说当前leader将数据同步到其他实例后宕机，那么重新选举并不会被S5覆盖，这是因为S5会选举失败。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/fff9842bbb18451bad1009e36be4d672.jpg" alt="分布式一致性协议：Raft算法详解"></p> <p><strong>Cluster membership changes</strong></p> <p>一个集群在运行过程中，有时候我们需要对当前集群进行配置修改或者硬件升级，通常的办法是将集群下线，修改完毕之后，然后上线，但是这会导致这段时间内服务不可用，那么可不可以集群不下线，修改配置后自动更新呢？</p> <p>Raft采用了<code>joint consensus</code>机制将整个更新阶段划分为两个阶段，地一个阶段是之前的旧配置阶段，这个阶段不能处理客户端的请求，当该阶段commit之后，将会过渡到下一个阶段，即支持新配置的阶段。如下图，第一个阶段为Cold配置阶段，代表使用之前的配置，Cold,Cnew阶段是中间状态，它会被保存为一个Log Entry，接着就是Cnew阶段，那表示更新配置后的状态。</p> <p>虚线表当前阶段被成功创建 ，但是未commit，实线代表当前阶段commit，Cold阶段刚开始被提交，急着创建了Cold,new阶段，但是没有被提交，直到Cold阶段完成Cold,new阶段才commit，在Cold,new 阶段完成之后，Cnew阶段才会被提交，如果在Cnew阶段leader宕机，那么就会退回到Cold或者Cold,new阶段进行处理。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/c0ea29723f8557cd482f175f2a6d40d9.jpg" alt="分布式一致性协议：Raft算法详解"><br /><strong>Snapshot</strong></p> <p>最后，简单介绍一下快照机制，对于集群中的每一个实例，都会维护着一个快照，这个快照中保存了最后提交的index，当前term，以及当前数据的最后更新值，如图中保存x,y的最近状态的值x=0，y=9，在发生故障的时候，就会通过读取快照从而快速恢复到之前的状态。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/c520cfd3c79e67bc6f529255538ee761.jpg" alt="分布式一致性协议：Raft算法详解"><br /> 至此，我们介绍完了Raft算法的选主，写入数据、故障恢复以及如何线上修改集群配置，最后介绍了快照机制。从这一系列过程足以看出Raft算法是一个优秀的分布式一致性协议算法，值得我们深入研究。</p> <blockquote> <p>参考资料：<br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://raft.github.io/"  rel="nofollow">https://raft.github.io/</a><br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://raft.github.io/raft.pdf"  rel="nofollow">https://raft.github.io/raft.pdf</a></p> </blockquote> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-37.htm">SpringSecurity核心服务详解</a></p>
                                        <p>下一个：<a href="/html/category/article-39.htm">python数据导入hive_使用 python 批量插入 hive</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-241.htm">如何保证redis和数据库的一致性</a></h4>
                <p>在项目中难免会使用到redis作为缓存，去减轻数据库的访问压力，但是涉及到数据更新时，如果redis和数据库的操作设计出现问题，就会导致redis缓存中和数据库中的数据不一致的情况。那么我们如何去保证</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2529.htm">Python 路径处理(os.path模块)</a></h4>
                <p>dest_file = r'D:\PythonProject\TestPython\test.py' # 实际存在 dest_fake_file = r'X:\PythonProject\TestPy</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1331.htm">为什么我建议需要定期重建数据量大但是性能关键的表_在线工具</a></h4>
                <p>个人创作公约：本人声明创作的所有文章皆为自己原创，如果有参考任何文章的地方，会标注出来，如果有疏漏，欢迎大家批判。如果大家发现网上有抄袭本文章的，欢迎举报，并且积极向这个github 仓库 提交 is</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-254.htm">图像处理学习笔记——BMP图片详解</a></h4>
                <p>一、位图和调色板的概念  1.位图（Bitmap）： 例如我们常说的屏幕分辨率为 640*480，刷新频率为70Hz，意思是说每行要扫描 640 个象素，一共有 480 行，每秒重复扫描屏幕 70 次</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-245.htm">创建型设计模式: 单例模式(Singleton Pattern)</a></h4>
                <p>创建型设计模式: 单例模式(Singleton Pattern)  CSDN专栏: 设计模式(UML/23种模式)  单例模式(Singleton Pattern)保证一个类仅有一个实例，并提供一个访</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1954.htm">FreeRTOS进阶之任务创建完全解析_操作系统</a></h4>
                <p>目录  前言 1.创建任务堆栈和任务TCB 2.初始化任务TCB必要的字段 3.初始化任务堆栈 4.进入临界区 5.当前任务数量增加1 6.为第一次运行做必要的初始化 7.更新当前正在运行的任务TCB</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2239.htm">【面试普通人VS高手系列】HashMap是怎么解决哈希冲突的？</a></h4>
                <p>常用数据结构基本上是面试必问的问题，比如HashMap、LinkList、ConcurrentHashMap等。 关于HashMap，有个学员私信了我一个面试题说： “HashMap是怎么解决哈希冲突</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2824.htm">如何使用线程池执行定时任务？</a></h4>
                <p>在 Java 语言中，有两个线程池可以执行定时任务：ScheduledThreadPool 和 SingleThreadScheduledExecutor，其中 SingleThreadSchedul</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-242.htm">KestrelServer网络连接的创建详解</a></h4>
                <p>《注册监听终结点（Endpoint）》已经详细讲述了如何使用KestrelServer，现在我们来简单聊聊这种处理器的总体设计和实现原理。当KestrelServer启动的时候，注册的每个终结点将转换</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3122.htm">什么是https和http（https和http的区别）_在线工具</a></h4>
                <p>前言 因为工作需要，需要用到大量的关于 HTTP 协议的知识，目前掌握的关于 HTTP 请求以及协议的知识都是零散的，打算针对知识盲区系统的学习一些，理清概念。 为什么会出现 HTTPS 因为 HTT</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">56</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>