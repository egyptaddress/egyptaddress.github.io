<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-242.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>KestrelServer网络连接的创建详解 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">KestrelServer网络连接的创建详解</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<p>《<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/artech/p/inside-asp-net-core-6-29.html"  rel="nofollow">注册监听终结点（Endpoint）</a>》已经详细讲述了如何使用KestrelServer，现在我们来简单聊聊这种处理器的总体设计和实现原理。当KestrelServer启动的时候，注册的每个终结点将转换成对应的“连接监听器”，后者在监听到初始请求时会创建“连接”，请求的接收和响应的回复都在这个连接中完成。本文提供的示例演示已经同步到《<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/artech/p/inside-asp-net-core-6.html"  rel="nofollow">ASP.NET Core 6框架揭秘-实例演示版</a>》）</p> <h1><font size="4">一、连接上下文（ConnectionContext ）</font></h1> <p>监听器创建的连接时一个抽象的概念，我们可以将其视为客户端和服务端完成消息交换而构建的“上下文”，该上下文通过如下这个ConnectionContext类型表示。ConnectionContext派生于抽象基类BaseConnectionContext，后者实现了IAsyncDisposable接口。每个连接具有一个通过ConnectionId属性表示的ID，它的LocalEndPoint和RemoteEndPoint属性返回本地（服务端）和远程（客户端）终结点。服务器提供的特性集合体现在它的Features属性上，另一个Items提供了一个存放任意属性的字典。ConnectionClosed属性提供的CancellationToken可以用来接收连接关闭的通知。Abort方法可以中断当前连接，这两个方法在ConnectionContext被重写。ConnectionContext类型的Transport属性提供的IDuplexPipe对象是用来对请求和响应进行读写的双向管道。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">class</span> ConnectionContext : BaseConnectionContext {<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span> IDuplexPipe Transport {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">override</span><span style="color: rgba(0, 0, 255, 1)">void</span> Abort(ConnectionAbortedException abortReason);<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">override</span><span style="color: rgba(0, 0, 255, 1)">void</span> Abort(); }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">class</span> BaseConnectionContext : IAsyncDisposable {<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span> EndPoint? LocalEndPoint {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span> EndPoint? RemoteEndPoint {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">string</span> ConnectionId {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span> IFeatureCollection Features {<span style="color: rgba(0, 0, 255, 1)">get</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span> IDictionary&lt;<span style="color: rgba(0, 0, 255, 1)">object</span>,<span style="color: rgba(0, 0, 255, 1)">object</span>?&gt; Items {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span> CancellationToken ConnectionClosed {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">void</span> Abort();<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">void</span> Abort(ConnectionAbortedException abortReason);<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">virtual</span> ValueTask DisposeAsync(); }</pre> </div> <p>如果采用HTTP 1.X和HTTP 2协议，KestrelServer会采用TCP套接字（Socket）进行通信，对应的连接体现为一个SocketConnection对象。如果采用的是HTTP 3，会采用基于UDP的QUIC协议进行通信，对应的连接体现为一个QuicStreamContext对象。如下面的代码片段所示，这两个类型都派生于TransportConnection，后者派生于ConnectionContext。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">class</span> TransportConnection : ConnectionContext<span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">sealed</span><span style="color: rgba(0, 0, 255, 1)">class</span> SocketConnection : TransportConnection<span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">sealed</span><span style="color: rgba(0, 0, 255, 1)">class</span> QuicStreamContext : TransportConnection</pre> </div> <h1><font size="4">二、连接监听器（IConnectionListener ）</font></h1> <p>KestrelServer同时支持三个版本的HTTP协议，HTTP 1.X和HTTP 2建立在TCP协议之上，针对这样的终结点会转换成通过如下这个IConnectionListener接口表示的监听器。它的EndPoint属性表示监听器绑定的终结点，当AcceptAsync方法被调用时，监听器便开始了网络监听工作。当来自某个客户端端的初始请求抵达后，它会将创建代表连接的ConnectionContext上下文创建出来。另一个UnbindAsync方法用来解除终结点绑定，并停止监听。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">interface</span> IConnectionListener : IAsyncDisposable {     EndPoint EndPoint {<span style="color: rgba(0, 0, 255, 1)">get</span>; }     ValueTask&lt;ConnectionContext?&gt; AcceptAsync(CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken));     ValueTask UnbindAsync(CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken)); }</pre> </div> <p>QUIC利用传输层的UDP协议实现了真正意义上的“多路复用”，所以它将对应的连接监听器接口命名为IMultiplexedConnectionListener。它的AcceptAsync方法创建的是代表多路复用连接的MultiplexedConnectionContext对象，后者的AcceptAsync会将ConnectionContext上下文创建出来。QuicConnectionContext 类型是对MultiplexedConnectionContext的具体实现，它的AcceptAsync方法创建的就是上述的QuicStreamContext对象，该类型派生于抽象类TransportMultiplexedConnection。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">interface</span> IMultiplexedConnectionListener : IAsyncDisposable {     EndPoint EndPoint {<span style="color: rgba(0, 0, 255, 1)">get</span>; }     ValueTask&lt;MultiplexedConnectionContext?&gt; AcceptAsync(IFeatureCollection? features =<span style="color: rgba(0, 0, 255, 1)">null</span>,CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken));     ValueTask UnbindAsync(CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken)); }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">class</span> MultiplexedConnectionContext : BaseConnectionContext {<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span> ValueTask&lt;ConnectionContext?&gt; AcceptAsync(CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken));<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span> ValueTask&lt;ConnectionContext&gt; ConnectAsync(IFeatureCollection? features =<span style="color: rgba(0, 0, 255, 1)">null</span>,CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken)); }<span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">class</span> TransportMultiplexedConnection : MultiplexedConnectionContext<span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">sealed</span><span style="color: rgba(0, 0, 255, 1)">class</span> QuicConnectionContext : TransportMultiplexedConnection</pre> </div> <p>KestrelServer使用的连接监听器均由对应的工厂来构建。如下所示的IConnectionListenerFactory接口代表用来构建IConnectionListener监听器的工厂，IMultiplexedConnectionListenerFactory工厂则用来构建IMultiplexedConnectionListener监听器。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">interface</span> IConnectionListenerFactory {     ValueTask&lt;IConnectionListener&gt; BindAsync(EndPoint endpoint,CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken)); }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">interface</span> IMultiplexedConnectionListenerFactory {     ValueTask&lt;IMultiplexedConnectionListener&gt; BindAsync(EndPoint endpoint, IFeatureCollection? features =<span style="color: rgba(0, 0, 255, 1)">null</span>,CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>(CancellationToken)); }</pre> </div> <h1><font size="4">三、总体设计</font></h1> <p>上面围绕着“连接”介绍了一系列接口和类型，它们之间的关系体现在如图1所示的UML中。KestrelServer启动时会根据每个终结点支持的HTTP协议利用IConnectionListenerFactory或者IMultiplexedConnectionListenerFactory工厂来创建代表连接监听器的IConnectionListener或者IMultiplexedConnectionListener对象。IConnectionListener监听器会直接将代表连接的ConnectionContext上下文创建出来，IMultiplexedConnectionListener监听器创建的则是一个MultiplexedConnectionContext上下文，代表具体连接的ConnectionContext上下文会进一步由该对象进行创建。</p> <p><a href="https://img2022.cnblogs.com/blog/19327/202203/19327-20220328221751957-1119072478.png" rel="nofollow" class="fancybox" data-fancybox-group="button"><img fetchpriority="high" decoding="async" width="794" height="387" title="image" style="border: 0 currentColor; border-image: none; display: inline; background-image: none" alt="image" src="http://img.555519.xyz/uploads3/20220510/47393bff4c4b89a47436c7e5d9be4b2e.jpg"></a><br />图1 “连接”相关的接口和类型</p> <h1 id="s1803"><font size="4">四、利用连接接收请求和回复响应</font></h1> <p>下面演示的实例直接利用IConnectionListenerFactory工厂创建的IConnectionListener监听器来监听连接请求，并利用建立的连接来接收请求和回复响应。由于表示连接的ConnectionContext上下文直接面向传输层，接受的请求和回复的响应都体现为二进制流，解析二进制数据得到请求信息是一件繁琐的事情。这里我们借用了“HttpMachine”NuGet包提供的HttpParser组件来完成这个任务，为此我们为它定义了如下这个HttpParserHandler类型。如果将这个HttpParserHandler对象传递给HttpParser对象，后者在请求解析过程中会调用前者相应的方法，我们利用这些方法利用读取的内容将描述请求的HttpRequestFeature特性构建出来。源代码可以从<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/jiangjinnan/InsideAspNet6/tree/main/18/S1803"  rel="nofollow">这里</a>查看。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> HttpParserHandler : IHttpParserHandler {<span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">string</span>? headerName =<span style="color: rgba(0, 0, 255, 1)">null</span>;<span style="color: rgba(0, 0, 255, 1)">public</span> HttpRequestFeature Request {<span style="color: rgba(0, 0, 255, 1)">get</span>; } =<span style="color: rgba(0, 0, 255, 1)">new</span> HttpRequestFeature();<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnBody(HttpParser parser, ArraySegment&lt;<span style="color: rgba(0, 0, 255, 1)">byte</span>&gt; data) =&gt; Request.Body =<span style="color: rgba(0, 0, 255, 1)">new</span> MemoryStream(data.Array!, data.Offset, data.Count);<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnFragment(HttpParser parser,<span style="color: rgba(0, 0, 255, 1)">string</span> fragment) { }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnHeaderName(HttpParser parser,<span style="color: rgba(0, 0, 255, 1)">string</span> name) =&gt; headerName = name;<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnHeadersEnd(HttpParser parser) { }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnHeaderValue(HttpParser parser,<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 255, 1)">value</span>) =&gt; Request.Headers[headerName!] =<span style="color: rgba(0, 0, 255, 1)">value</span>;<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnMessageBegin(HttpParser parser) { }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnMessageEnd(HttpParser parser) { }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnMethod(HttpParser parser,<span style="color: rgba(0, 0, 255, 1)">string</span> method) =&gt; Request.Method = method;<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnQueryString(HttpParser parser,<span style="color: rgba(0, 0, 255, 1)">string</span> queryString) =&gt; Request.QueryString = queryString;<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> OnRequestUri(HttpParser parser,<span style="color: rgba(0, 0, 255, 1)">string</span> requestUri) =&gt; Request.Path = requestUri; }</pre> </div> <p>如下所示的演示程序利用WebApplication对象的Services属性提供的IServicePovider对象来提供IConnectionListenerFactory工厂。我们调用该工厂的BindAsync方法创建了一个连接监听器并将其绑定到采用5000端口本地终结点。在一个无限循环中，我们调用监听器的AcceptAsync方法开始监听连接请求，并最终将代表连接的ConnectionContext上下文创建出来。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">using</span> App;<span style="color: rgba(0, 0, 255, 1)">using</span> HttpMachine;<span style="color: rgba(0, 0, 255, 1)">using</span> Microsoft.AspNetCore.Connections;<span style="color: rgba(0, 0, 255, 1)">using</span> Microsoft.AspNetCore.Http.Features;<span style="color: rgba(0, 0, 255, 1)">using</span> System.Buffers;<span style="color: rgba(0, 0, 255, 1)">using</span> System.IO.Pipelines;<span style="color: rgba(0, 0, 255, 1)">using</span> System.Net;<span style="color: rgba(0, 0, 255, 1)">using</span> System.Text;  var factory = WebApplication.Create().Services.GetRequiredService&lt;IConnectionListenerFactory&gt;(); var listener = await factory.BindAsync(<span style="color: rgba(0, 0, 255, 1)">new</span> IPEndPoint(IPAddress.Any, 5000));<span style="color: rgba(0, 0, 255, 1)">while</span> (<span style="color: rgba(0, 0, 255, 1)">true</span>) {     var context = await listener.AcceptAsync();     _ = HandleAsync(context!);<span style="color: rgba(0, 0, 255, 1)">static</span> async Task HandleAsync(ConnectionContext connection)     {         var reader = connection!.Transport.Input;<span style="color: rgba(0, 0, 255, 1)">while</span> (<span style="color: rgba(0, 0, 255, 1)">true</span>)         {             var result = await reader.ReadAsync();             var request = ParseRequest(result);             reader.AdvanceTo(result.Buffer.End);             Console.WriteLine("<span style="color: rgba(139, 0, 0, 1)">[{0}]Receive request: {1} {2} Connection:{3}</span>",connection.ConnectionId, request.Method, request.Path, request.Headers?["<span style="color: rgba(139, 0, 0, 1)">Connection</span>"] ?? "<span style="color: rgba(139, 0, 0, 1)">N/A</span>");              var response = @"<span style="color: rgba(139, 0, 0, 1)">HTTP/1.1 200 OK Content-Type: text/plain; charset=utf-8 Content-Length: 12  Hello World!</span>";             await connection.Transport.Output.WriteAsync(Encoding.UTF8.GetBytes(response));<span style="color: rgba(0, 0, 255, 1)">if</span> (request.Headers.TryGetValue("<span style="color: rgba(139, 0, 0, 1)">Connection</span>",<span style="color: rgba(0, 0, 255, 1)">out</span> var<span style="color: rgba(0, 0, 255, 1)">value</span>) &amp;&amp;<span style="color: rgba(0, 0, 255, 1)">string</span>.Compare(<span style="color: rgba(0, 0, 255, 1)">value</span>, "<span style="color: rgba(139, 0, 0, 1)">close</span>",<span style="color: rgba(0, 0, 255, 1)">true</span>) == 0)             {                 await connection.DisposeAsync();<span style="color: rgba(0, 0, 255, 1)">return</span>;             }<span style="color: rgba(0, 0, 255, 1)">if</span> (result.IsCompleted)             {<span style="color: rgba(0, 0, 255, 1)">break</span>;             }         }     }<span style="color: rgba(0, 0, 255, 1)">static</span>  HttpRequestFeature ParseRequest(ReadResult result)     {         var handler =<span style="color: rgba(0, 0, 255, 1)">new</span> HttpParserHandler();         var parserHandler =<span style="color: rgba(0, 0, 255, 1)">new</span> HttpParser(handler);         parserHandler.Execute(<span style="color: rgba(0, 0, 255, 1)">new</span> ArraySegment&lt;<span style="color: rgba(0, 0, 255, 1)">byte</span>&gt;(result.Buffer.ToArray()));<span style="color: rgba(0, 0, 255, 1)">return</span> handler.Request;     } }</pre> </div> <p>针对连接的处理实现在HandleAsync方法中。HTTP 1.1默认会采用长连接，多个请求会使用同一个连接发送过来，所以针对单个请求的接收和处理会放在一个循环中，直到连接被关闭。请求的接收利用ConnectionContext对象的Transport属性返回的IDuplexPipe对象来完成。简单起见，我们假设每个请求的读取刚好能够一次完成，所以每次读取的二进制刚好是一个完整的请求。读取的二进制内容利用ParseRequest方法借助于HttpParser对象转换成HttpRequestFeature对象后，我们直接生成一个表示响应报文的字符串并采用UTF-8对其编码，编码后的响应利用上述的IDuplexPipe对象发送出去。这份手工生成的“Hello World！”响应将以图18-5的形式呈现在浏览器上。</p> <p><a href="https://img2022.cnblogs.com/blog/19327/202203/19327-20220328221752757-74691511.png" rel="nofollow" class="fancybox" data-fancybox-group="button"><img decoding="async" width="515" height="217" title="image" style="border: 0 currentColor; border-image: none; display: inline; background-image: none" alt="image" src="http://img.555519.xyz/uploads3/20220510/67729ab7437c21b77390fdcb8b0b5f8a.jpg"></a><br />图2 面向“连接”编程</p> <p>按照HTTP 1.1规范的约定，如果客户端希望关闭默认开启的长连接，可以在请求中添加“Connection:Close”报头。HandleAsync方法在处理每个请求时会确定是否携带了此报头，并在需要的时候调用ConnectionContext上下文的 DisposeAsync方法关闭并释放当前连接。该方法在对请求进行处理时会将此报头和连接的ID输出到控制台上。图2所示的控制台输出是先后接收到三次请求的结果，后面两次显式添加了“Connection:Close”，可以看出前两次复用同一个连接。</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-241.htm">如何保证redis和数据库的一致性</a></p>
                                        <p>下一个：<a href="/html/category/article-243.htm">SpringMVC访问静态资源的三种方式</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-260.htm">Vue中 Vue.prototype 详解及使用</a></h4>
                <p>我们可能会在很多组件里用到数据/实用工具，但是不想污染全局作用域。这种情况下，可以通过在原型上定义它们使其在每个 Vue 的实例中可用。 1. 基本示例 在main.js中添加一个变量到 Vue.pr</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-526.htm">SpringBoot生成docx文件并返回其Base64编码</a></h4>
                <p>直接上源码，      @ResponseBody     @RequestMapping(value = "/getDocx", method = RequestMethod.GET)     pu</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-237.htm">Java空指针异常和解决办法</a></h4>
                <p>目录  问题描述：   尝试1： 尝试2：   使用Optional防止出现空指针异常 引用    问题描述： public class Main20220419 {     public stati</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-790.htm">详细分析虚拟DOM与diff算法</a></h4>
                <p>????虚拟DOM与diff算法 在vue、react等技术出现之前，每次修改DOM都需要通过遍历查询DOM树的方式，找到需要更新的DOM，然后修改样式或结构，资源损耗十分严重。而对于虚拟DOM来说，</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1332.htm">Centos7离线安装Nginx亲测版</a></h4>
                <p>Centos7 Nginx编译包制作 找一台可连接互联网的虚拟机来制作编译好的Nginx包，具体操作如下 1、准备一台虚拟机（可访问互联网） 2、安装所需插件 $ yum -y install gcc</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1321.htm">Spring Boot的依赖配置文件的解析</a></h4>
                <p>SpringBoot笔记-day01 在pom.xml中 &lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&l</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-240.htm">SpringBoot配置跨域Cors</a></h4>
                <p>01、同源策略 同源策略[same origin policy]是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。 同源策略是浏览器安全的基石。  什么是源 源[or</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-525.htm">Firefox中的HTML5输入类型“数字”</a></h4>
                <p>Firefox不支持输入类型编号的min属性，但在Google Chrome中可以正常使用。 示例 让我们看一个例子- &lt;!DOCTYPE&nbsp;html&gt; &lt;html&gt; </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1926.htm">分享C++三种类型new类型的运算符使用详情_C 语言_</a></h4>
                <p>目录  1.new操作符 2.::operator new  2.1原始调用 2.2重载1 2.3重载2  3.place new     1.new操作符 new operator，平时用的最多的n</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-254.htm">图像处理学习笔记——BMP图片详解</a></h4>
                <p>一、位图和调色板的概念  1.位图（Bitmap）： 例如我们常说的屏幕分辨率为 640*480，刷新频率为70Hz，意思是说每行要扫描 640 个象素，一共有 480 行，每秒重复扫描屏幕 70 次</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">46</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>