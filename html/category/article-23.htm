<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-23.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>使用 bitnami/postgresql-repmgr 镜像快速设置 PostgreSQL HA - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">使用 bitnami/postgresql-repmgr 镜像快速设置 PostgreSQL HA</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/67802a528f951517940c88dd6dd27f5f.jpg" alt="使用 bitnami/postgresql-repmgr 镜像快速设置 PostgreSQL HA"></p> <h2 id="什么是-postgresql-ha">什么是 PostgreSQL HA？</h2> <p>此 PostgreSQL 集群解决方案包括 PostgreSQL 复制管理器(<code>replication manager</code>)，这是一种用于管理 PostgreSQL 集群上的复制(<code>replication</code>)和故障转移(<code>failover</code>)的开源工具。</p> <h2 id="获取此镜像">获取此镜像</h2> <p>获取 Bitnami PostgreSQL HA Docker 镜像的推荐方法是从<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://hub.docker.com/r/bitnami/postgresql-repmgr"  target="_blank" rel="nofollow">Docker Hub Registry</a> 中提取预构建的镜像。</p> <pre><code class="language-sh">$ docker pull bitnami/postgresql-repmgr:latest</code></pre> <p>要使用特定版本，您可以拉取版本化标签。 您可以在<code>Docker Hub Registry</code> 中查看<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://hub.docker.com/r/bitnami/postgresql-repmgr/tags/"  target="_blank" rel="nofollow">可用版本的列表</a>。</p> <ul> <li><small><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://hub.docker.com/r/bitnami/postgresql-repmgr/tags/"  target="_blank" rel="nofollow">https://hub.docker.com/r/bitnami/postgresql-repmgr/tags/</a></small></li> </ul> <pre><code class="language-sh">$ docker pull bitnami/postgresql-repmgr:[TAG]</code></pre> <p>如果您愿意，您也可以自己构建镜像。</p> <pre><code class="language-sh">$ docker build -t bitnami/postgresql-repmgr:latest 'https://github.com/bitnami/bitnami-docker-postgresql-repmgr.git#master:14/debian-10'</code></pre> <h2 id="持久化您的应用程序">持久化您的应用程序</h2> <p>如果删除容器，所有数据都将丢失，下次运行镜像时，数据库将重新初始化。 为避免这种数据丢失，您应该挂载一个即使在容器被删除后仍将持续存在的卷。</p> <p>对于持久性，您应该在<code>/bitnami/postgresql</code> 路径上挂载一个目录。 如果挂载的目录是空的，它将在第一次运行时被初始化。</p> <pre><code class="language-sh">$ docker run \     -v /path/to/postgresql-repmgr-persistence:/bitnami/postgresql \     bitnami/postgresql-repmgr:latest</code></pre> <p>此存储库中的<code>docker-compose.yml</code> 文件已经配置了持久性。</p> <blockquote> <p>注意：由于这是一个非 root 容器，因此挂载的文件和目录必须具有 UID<code>1001</code> 的适当权限。</p> </blockquote> <h2 id="连接到其他容器">连接到其他容器</h2> <p>使用<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.docker.com/engine/userguide/networking/"  target="_blank" rel="nofollow">Docker 容器网络</a>，您的应用程序容器可以轻松访问在容器内运行的<code>PostgreSQL</code> 服务器，反之亦然。</p> <ul> <li><small><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.docker.com/engine/userguide/networking/"  target="_blank" rel="nofollow">https://docs.docker.com/engine/userguide/networking/</a></small></li> </ul> <p>连接到同一网络的容器可以使用容器名称作为主机名相互通信。</p> <h3 id="使用命令行">使用命令行</h3> <p>在此示例中，我们将创建一个<code>PostgreSQL</code> 客户端实例，该实例将连接到与客户端在同一<code>docker</code> 网络上运行的服务器实例。</p> <h4 id="step-1-创建-network">Step 1: 创建 network</h4> <pre><code class="language-sh">$ docker network create my-network --driver bridge</code></pre> <h4 id="step-2-在您的-network-中启动-postgresql-repmgr-容器">Step 2: 在您的 network 中启动 postgresql-repmgr 容器</h4> <p>使用<code>docker run</code> 命令的<code>--network &lt;NETWORK&gt;</code> 参数将容器附加到<code>my-network</code> 网络。</p> <pre><code class="language-sh">$ docker run --detach --rm --name pg-0 \   --network my-network \   --env REPMGR_PARTNER_NODES=pg-0 \   --env REPMGR_NODE_NAME=pg-0 \   --env REPMGR_NODE_NETWORK_NAME=pg-0 \   --env REPMGR_PRIMARY_HOST=pg-0 \   --env REPMGR_PASSWORD=repmgrpass \   --env POSTGRESQL_PASSWORD=secretpass \   bitnami/postgresql-repmgr:latest</code></pre> <h4 id="step-3-运行你的-postgresql-client-实例">Step 3: 运行你的 PostgreSQL client 实例</h4> <p>最后，我们创建一个新的容器实例来启动<code>PostgreSQL client</code> 并连接到上一步中创建的服务器：</p> <pre><code class="language-sh">$ docker run -it --rm \   --network my-network \   bitnami/postgresql:10 \   psql -h pg-0 -U postgres</code></pre> <h3 id="使用-docker-compose">使用 Docker Compose</h3> <p>如果未指定，<code>Docker Compose</code> 会自动设置一个新网络并将所有已部署的服务附加到该网络。 但是，我们将明确定义一个名为<code>my-network</code> 的新<code>bridge</code> 网络。 在此示例中，我们假设您希望从您自己的自定义应用程序镜像连接到<code>PostgreSQL</code> 服务器，该镜像在以下代码段中由服务名称<code>myapp</code> 标识。</p> <pre><code class="language-yaml">version: '2'  networks:   my-network:     driver: bridge  services:   pg-0:     image: 'bitnami/postgresql-repmgr:latest'     networks:       - my-network     environment:       - POSTGRESQL_PASSWORD=custompassword       - REPMGR_PASSWORD=repmgrpassword       - REPMGR_PRIMARY_HOST=pg-0       - REPMGR_NODE_NETWORK_NAME=pg-0       - REPMGR_NODE_NAME=pg-0       - REPMGR_PARTNER_NODES=pg-0   myapp:     image: 'YOUR_APPLICATION_IMAGE'     networks:       - my-network</code></pre> <blockquote> <p>重要的：</p> <ol> <li>请使用您的应用程序镜像更新上述代码段中的<em>YOUR_APPLICATION_IMAGE</em> 占位符</li> <li>在您的应用程序容器中，使用主机名<code>pg-0</code> 连接到<code>PostgreSQL</code> 服务器</li> </ol> </blockquote> <p>使用以下命令启动容器：</p> <pre><code class="language-sh">$ docker-compose up -d</code></pre> <h2 id="配置">配置</h2> <h3 id="初始化一个新实例">初始化一个新实例</h3> <p>第一次执行容器时，它将执行位于<code>/docker-entrypoint-initdb.d</code> 的扩展名为<code>.sh</code>、<code>.sql</code> 和<code>.sql.gz</code> 的文件。</p> <p>为了将您的自定义文件放入<code>docker</code> 镜像中，您可以将它们挂载为卷。</p> <h3 id="在首次运行时设置-root-和-repmgr-密码">在首次运行时设置 root 和 repmgr 密码</h3> <p>在上述命令中，您可能已经注意到<code>POSTGRESQL_PASSWORD</code> 和<code>REPMGR_PASSWORD</code> 环境变量的使用。 第一次运行镜像时传递<code>POSTGRESQL_PASSWORD</code> 环境变量会将<code>postgres</code> 用户的密码设置为<code>POSTGRESQL_PASSWORD</code> 的值（或<code>POSTGRESQL_PASSWORD_FILE</code> 中指定的文件内容）。同样，传递<code>REPMGR_PASSWORD</code> 环境变量将<code>repmgr</code> 用户的密码设置为<code>REPMGR_PASSWORD</code> 的值（或<code>REPMGR_PASSWORD_FILE</code> 中指定的文件内容）。</p> <pre><code class="language-sh">$ docker run --name pg-0 --env REPMGR_PASSWORD=repmgrpass --env POSTGRESQL_PASSWORD=secretpass bitnami/postgresql-repmgr:latest</code></pre> <p>或通过修改此存储库中存在的<code>docker-compose.yml</code> 文件：</p> <pre><code class="language-yaml">... services:   pg-0:   ...     environment: -      - POSTGRESQL_PASSWORD=adminpassword +      - POSTGRESQL_PASSWORD=password123 -      - REPMGR_PASSWORD=repmgrpassword +      - REPMGR_PASSWORD=password123   ...   pg-1:   ...   environment: -      - POSTGRESQL_PASSWORD=adminpassword +      - POSTGRESQL_PASSWORD=password123 -      - REPMGR_PASSWORD=repmgrpassword +      - REPMGR_PASSWORD=password123 ...</code></pre> <p>Note！<code>postgres</code> 和<code>repmgr</code> 用户都是超级用户，并且对<code>PostgreSQL</code> 数据库具有完全的管理访问权限。</p> <p>如果要为<code>postgres</code> 用户设置非特权用户和密码，请参阅在首次运行时创建数据库用户。</p> <h3 id="首次运行时创建数据库">首次运行时创建数据库</h3> <p>通过在第一次运行镜像时传递<code>POSTGRESQL_DATABASE</code> 环境变量，将创建一个数据库。 如果您的应用程序要求数据库已经存在，这将非常有用，您不必使用<code>PostgreSQL</code> 客户端手动创建数据库。</p> <pre><code class="language-sh">$ docker run --name pg-0 --env POSTGRESQL_DATABASE=my_database bitnami/postgresql-repmgr:latest</code></pre> <h3 id="首次运行时创建数据库用户">首次运行时创建数据库用户</h3> <p>您还可以创建一个受限数据库用户，该用户仅对使用<code>POSTGRESQL_DATABASE</code> 环境变量创建的数据库具有权限。 为此，请提供<code>POSTGRESQL_USERNAME</code> 环境变量。</p> <pre><code class="language-sh">$ docker run --name pg-0 --env POSTGRESQL_USERNAME=my_user --env POSTGRESQL_PASSWORD=password123 --env POSTGRESQL_DATABASE=my_database bitnami/postgresql-repmgr:latest</code></pre> <p>此存储库中的<code>docker-compose.yml</code> 文件已配置此设置。</p> <p>Note！指定<code>POSTGRESQL_USERNAME</code> 时，不会为<code>postgres</code> 用户分配密码，因此您无法以<code>postgres</code> 用户身份远程登录<code>PostgreSQL</code> 服务器。如果您仍想使用用户<code>postgres</code> 访问，请设置<code>POSTGRESQL_POSTGRES_PASSWORD</code> 环境变量（或<code>POSTGRESQL_POSTGRES_PASSWORD_FILE</code> 中指定的文件内容）。</p> <h3 id="使用流复制和-repmgr-设置-ha-postgresql-集群">使用流复制和 repmgr 设置 HA PostgreSQL 集群</h3> <p>使用以下环境变量，可以使用<code>Bitnami PostgreSQL HA Docker</code> 镜像轻松设置具有[流复制](Streaming replication)和<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://repmgr.org/"  target="_blank" rel="nofollow"><code>repmgr</code></a> 的<code>HA PostgreSQL</code> 集群：</p> <ul> <li>POSTGRESQL_PASSWORD：postgres 用户的密码。没有默认值。</li> <li>POSTGRESQL_PASSWORD_FILE：包含 postgres 用户密码的文件的路径。 这将覆盖 POSTGRESQL_PASSWORD 中指定的值。 没有默认值。</li> <li>REPMGR_USERNAME：<code>repmgr</code> 用户的用户名。默认为<code>repmgr</code>。</li> <li>REPMGR_PASSWORD_FILE：包含<code>repmgr</code> 用户密码的文件的路径。这将覆盖<code>REPMGR_PASSWORD</code> 中指定的值。 没有默认值。</li> <li>REPMGR_PASSWORD：<code>repmgr</code> 用户的密码。没有默认值。</li> <li>REPMGR_USE_PASSFILE：配置<code>repmgr</code> 以在其配置中使用<code>passfile</code> 和<code>PGPASSFILE</code> 而不是纯文本密码。</li> <li>REPMGR_PASSFILE_PATH：密码文件的位置，如果它不存在，它将使用<code>REPMGR</code> 凭据创建。</li> <li>REPMGR_PRIMARY_HOST：初始主节点的主机名。没有默认值。</li> <li>REPMGR_PARTNER_NODES：集群中的伙伴节点的逗号分隔列表。没有默认值。</li> <li>REPMGR_NODE_NAME：节点名称。没有默认值。</li> <li>REPMGR_NODE_NETWORK_NAME：节点主机名。没有默认值。</li> <li>REPMGR_PGHBA_TRUST_ALL：这将在生成的<code>pg_hba.conf</code> 中设置<code>auth-method</code>。仅当您使用带有<code>LDAP</code> 身份验证的<code>pgpool</code> 时才将其设置为<code>yes</code>。默认为<code>no</code>。</li> </ul> <p>在<code>HA PostgreSQL</code> 集群中，您可以拥有一个主节点和零个或多个备用节点。主节点处于读写模式，而备用节点处于只读模式。为获得最佳性能，建议将读取限制在备用节点。</p> <blockquote> <p>注意：对于 9.6 版之前的 Postgresql，REPMGR_USE_PASSFILE 和 REPMGR_PASSFILE_PATH 将被忽略。</p> <p>使用 REPMGR_PASSFILE_PATH 挂载外部密码文件时，还需要相应地配置 REPMGR_PASSWORD 和 REPMGR_USERNAME。</p> </blockquote> <h4 id="step-1-创建-network-1">Step 1: 创建 network</h4> <pre><code class="language-sh">$ docker network create my-network --driver bridge</code></pre> <h4 id="step-2-创建初始主节点">Step 2: 创建初始主节点</h4> <p>第一步是启动初始主节点：</p> <pre><code class="language-sh">$ docker run --detach --name pg-0 \   --network my-network \   --env REPMGR_PARTNER_NODES=pg-0,pg-1 \   --env REPMGR_NODE_NAME=pg-0 \   --env REPMGR_NODE_NETWORK_NAME=pg-0 \   --env REPMGR_PRIMARY_HOST=pg-0 \   --env REPMGR_PASSWORD=repmgrpass \   --env POSTGRESQL_PASSWORD=secretpass \   bitnami/postgresql-repmgr:latest</code></pre> <h4 id="step-3-创建备用节点">Step 3: 创建备用节点</h4> <p>接下来我们启动一个备用节点：</p> <pre><code class="language-sh">$ docker run --detach --name pg-1 \   --network my-network \   --env REPMGR_PARTNER_NODES=pg-0,pg-1 \   --env REPMGR_NODE_NAME=pg-1 \   --env REPMGR_NODE_NETWORK_NAME=pg-1 \   --env REPMGR_PRIMARY_HOST=pg-0 \   --env REPMGR_PASSWORD=repmgrpass \   --env POSTGRESQL_PASSWORD=secretpass \   bitnami/postgresql-repmgr:latest</code></pre> <p>使用这三个命令，您现在可以启动并运行一个两节点 PostgreSQL 主备流复制集群。 您可以通过添加/删除备用节点来扩展集群，而不会导致任何停机时间。</p> <blockquote> <p>注意：集群会完整地复制主节点，其中包括所有用户和数据库。</p> </blockquote> <p>如果主节点宕机，<code>repmgr</code> 将确保任何备用节点担任主节点，从而保证高可用性。</p> <blockquote> <p>注意：集群中其他节点的配置需要更新，以便它们知道它们。这将需要重新启动旧节点，以适应 REPMGR_PARTNER_NODES 环境变量。</p> </blockquote> <p>使用<code>Docker Compose</code>，可以使用此存储库中的<code>docker-compose.yml</code> 文件设置<code>HA PostgreSQL</code> 集群：</p> <pre><code class="language-sh">$ curl -sSL https://raw.githubusercontent.com/bitnami/bitnami-docker-postgresql-repmgr/master/docker-compose.yml &gt; docker-compose.yml $ docker-compose up -d</code></pre> <h3 id="保护-postgresql-流量">保护 PostgreSQL 流量</h3> <p><code>PostgreSQL</code> 支持使用<code>SSL/TLS</code> 协议对连接进行加密。如果您希望启用此可选功能，您可以使用以下环境变量来配置应用程序：</p> <ul> <li>POSTGRESQL_ENABLE_TLS：是否为流量启用<code>TLS</code>。默认为<code>no</code>。</li> <li>POSTGRESQL_TLS_CERT_FILE：包含<code>TLS</code> 流量证书文件的文件。没有默认值。</li> <li>POSTGRESQL_TLS_KEY_FILE：包含证书密钥的文件。没有默认值。</li> <li>POSTGRESQL_TLS_CA_FILE：包含证书<code>CA</code> 的文件。如果提供，<code>PostgreSQL</code> 将通过向<code>TLS/SSL</code> 客户端请求证书来对其进行身份验证（请参阅<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.postgresql.org/docs/9.6/auth-methods.html"  target="_blank" rel="nofollow">ref</a>）。没有默认值。</li> <li>POSTGRESQL_TLS_CRL_FILE：包含证书吊销列表的文件。没有默认值。</li> <li>POSTGRESQL_TLS_PREFER_SERVER_CIPHERS：是否使用服务器的<code>TLS</code> 密码首选项而不是客户端的。默认为<code>yes</code>。</li> </ul> <p>启用<code>TLS</code> 时，<code>PostgreSQL</code> 默认支持标准流量和加密流量，但更喜欢后者。下面是一些关于如何快速设置<code>TLS</code> 流量的示例：</p> <ol> <li>使用<code>docker run</code></li> </ol> <pre><code class="language-sh">$ docker run \     -v /path/to/certs:/opt/bitnami/postgresql/certs \     -e POSTGRESQL_ENABLE_TLS=yes \     -e POSTGRESQL_TLS_CERT_FILE=/opt/bitnami/postgresql/certs/postgres.crt \     -e POSTGRESQL_TLS_KEY_FILE=/opt/bitnami/postgresql/certs/postgres.key \     bitnami/postgresql-repmgr:latest</code></pre> <ol start="2"> <li>修改此存储库中存在的<code>docker-compose.yml</code> 文件：</li> </ol> <pre><code class="language-sh">services:   pg-0:   ...     environment:       ...       - POSTGRESQL_ENABLE_TLS=yes       - POSTGRESQL_TLS_CERT_FILE=/opt/bitnami/postgresql/certs/postgres.crt       - POSTGRESQL_TLS_KEY_FILE=/opt/bitnami/postgresql/certs/postgres.key     ...     volumes:       ...       - /path/to/certs:/opt/bitnami/postgresql/certs   ...</code></pre> <p>或者，您也可以在自定义配置文件中提供此配置。</p> <h3 id="配置文件">配置文件</h3> <p>该镜像在<code>/opt/bitnami/repmgr/conf/</code> 和<code>/opt/bitnami/postgresql/conf/</code> 中查找<code>repmgr.conf</code>、<code>postgresql.conf</code> 和<code>pg_hba.conf</code> 文件。您可以在<code>/bitnami/repmgr/conf/</code> 挂载一个卷，并复制/编辑<code>/path/to/custom-conf/</code> 中的配置文件。 如果<code>/bitnami/repmgr/conf/</code> 为空，默认配置将填充到<code>conf/</code> 目录。</p> <pre><code class="language-sh">/path/to/custom-conf/ └── postgresql.conf</code></pre> <p>由于带有<code>Replication manager</code> 镜像的<code>PostgreSQL</code> 是非 root 用户，因此您需要为主机中的挂载目录设置适当的权限：</p> <pre><code class="language-sh">$ sudo chgrp -R root /path/to/custom-conf/ $ sudo chmod -R g+rwX /path/to/custom-conf/</code></pre> <h4 id="step-1-运行-postgresql-镜像">Step 1: 运行 PostgreSQL 镜像</h4> <p>运行 PostgreSQL 镜像，从您的主机挂载一个目录。</p> <pre><code class="language-sh">$ docker run --name pg-0 \     -v /path/to/custom-conf/:/bitnami/repmgr/conf/ \     bitnami/postgresql-repmgr:latest</code></pre> <p>或者使用<code>Docker Compose</code>：</p> <pre><code class="language-yaml">version: '2'  services:   pg-0:     image: bitnami/postgresql-repmgr:latest     ports:       - '5432:5432'     volumes:       - /path/to/custom-conf/:/bitnami/repmgr/conf/   pg-1:     image: bitnami/postgresql-repmgr:latest     ports:       - '5432:5432'     volumes:       - /path/to/custom-conf/:/bitnami/repmgr/conf/</code></pre> <h4 id="step-2-编辑配置">Step 2: 编辑配置</h4> <p>使用您喜欢的编辑器编辑主机上的配置。</p> <pre><code class="language-sh">vi /path/to/custom-conf/postgresql.conf</code></pre> <h4 id="step-3-重启-postgresql">Step 3: 重启 PostgreSQL</h4> <p>更改配置后，重新启动<code>PostgreSQL</code> 容器以使更改生效。</p> <pre><code class="language-sh">$ docker restart pg-0</code></pre> <p>或者使用<code>Docker Compose</code>：</p> <pre><code class="language-sh">$ docker-compose restart pg-0 $ docker-compose restart pg-1</code></pre> <p>有关配置选项的完整列表，请参阅<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.postgresql.org/docs/10/static/runtime-config.html"  target="_blank" rel="nofollow">服务器配置手册</a>。</p> <ul> <li><small><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.postgresql.org/docs/10/static/runtime-config.html"  target="_blank" rel="nofollow">http://www.postgresql.org/docs/10/static/runtime-config.html</a></small></li> </ul> <p>允许从默认<code>postgresql.conf</code> 以外的文件加载设置。</p> <p>除了使用自定义的<code>repmgr.conf</code>、<code>postgresql.conf</code> 或<code>pg_hba.conf</code>，您还可以在<code>/bitnami/postgresql/conf/</code> 的卷中包含<code>conf.d</code> 目录中以<code>.conf</code> 结尾的文件。为此，默认的<code>postgresql.conf</code> 包含以下部分：</p> <pre><code class="language-sh">##------------------------------------------------------------------------------ ## CONFIG FILE INCLUDES ##------------------------------------------------------------------------------  ## These options allow settings to be loaded from files other than the ## default postgresql.conf.  include_dir = 'conf.d'  # Include files ending in '.conf' from directory 'conf.d'</code></pre> <p>如果您使用自定义<code>postgresql.conf</code>，您应该在配置文件中创建（或取消注释）上述部分，在这种情况下，结构应该类似于</p> <pre><code class="language-sh">/path/to/custom-conf/ └── postgresql.conf /path/to/extra-custom-conf/ └── extended.conf</code></pre> <p>请记住为主机中的挂载目录设置适当的权限：</p> <pre><code class="language-sh">$ sudo chgrp -R root /path/to/extra-custom-conf/ $ sudo chmod -R g+rwX /path/to/extra-custom-conf/</code></pre> <h4 id="step-1-运行-postgresql-镜像-1">Step 1: 运行 PostgreSQL 镜像</h4> <p>运行<code>PostgreSQL</code> 镜像，从您的主机挂载一个目录。</p> <pre><code class="language-sh">$ docker run --name pg-0 \     -v /path/to/extra-custom-conf/:/bitnami/postgresql/conf/conf.d/ \     -v /path/to/custom-conf/:/bitnami/repmgr/conf/ \     bitnami/postgresql-repmgr:latest</code></pre> <p>或者使用<code>Docker Compose</code>：</p> <pre><code class="language-yaml">version: '2'  services:   pg-0:     image: bitnami/postgresql-repmgr:latest     ports:       - '5432:5432'     volumes:       - /path/to/extra-custom-conf/:/bitnami/postgresql/conf/conf.d/       - /path/to/custom-conf/:/bitnami/repmgr/conf/   pg-1:     image: bitnami/postgresql-repmgr:latest     ports:       - '5432:5432'     volumes:       - /path/to/extra-custom-conf/:/bitnami/postgresql/conf/conf.d/       - /path/to/custom-conf/:/bitnami/repmgr/conf/</code></pre> <h4 id="step-2-编辑配置-1">Step 2: 编辑配置</h4> <p>使用您喜欢的编辑器编辑主机上的配置。</p> <pre><code class="language-sh">vi /path/to/extra-custom-conf/extended.conf</code></pre> <h4 id="step-3-重启-postgresql-1">Step 3: 重启 PostgreSQL</h4> <p>更改配置后，重新启动<code>PostgreSQL</code> 容器以使更改生效。</p> <pre><code class="language-sh">$ docker restart pg-0</code></pre> <p>或者使用 Docker Compose：</p> <pre><code class="language-sh">$ docker-compose restart pg-0 $ docker-compose restart pg-1</code></pre> <h3 id="环境变量">环境变量</h3> <p>请在下表中查看<code>Bitnami PostgreSQL HA</code> 容器中可用的环境变量列表：</p> <table> <thead> <tr> <th style="text-align: left">Environment Variable</th> <th style="text-align: left">Default value</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">REPMGR_NODE_ID</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">REPMGR_NODE_ID_START_SEED</td> <td style="text-align: left"><code>1000</code></td> </tr> <tr> <td style="text-align: left">REPMGR_NODE_NAME</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">REPMGR_NODE_NETWORK_NAME</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">REPMGR_NODE_PRIORITY</td> <td style="text-align: left"><code>100</code></td> </tr> <tr> <td style="text-align: left">REPMGR_PARTNER_NODES</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">REPMGR_PRIMARY_HOST</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">REPMGR_NODE_LOCATION</td> <td style="text-align: left"><code>default</code></td> </tr> <tr> <td style="text-align: left">REPMGR_PRIMARY_PORT</td> <td style="text-align: left"><code>5432</code></td> </tr> <tr> <td style="text-align: left">REPMGR_PORT_NUMBER</td> <td style="text-align: left"><code>5432</code></td> </tr> <tr> <td style="text-align: left">REPMGR_LOG_LEVEL</td> <td style="text-align: left"><code>NOTICE</code></td> </tr> <tr> <td style="text-align: left">REPMGR_START_OPTIONS</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">REPMGR_CONNECT_TIMEOUT</td> <td style="text-align: left"><code>5</code></td> </tr> <tr> <td style="text-align: left">REPMGR_RECONNECT_ATTEMPTS</td> <td style="text-align: left"><code>3</code></td> </tr> <tr> <td style="text-align: left">REPMGR_RECONNECT_INTERVAL</td> <td style="text-align: left"><code>5</code></td> </tr> <tr> <td style="text-align: left">REPMGR_USE_REPLICATION_SLOTS</td> <td style="text-align: left"><code>1</code></td> </tr> <tr> <td style="text-align: left">REPMGR_MASTER_RESPONSE_TIMEOUT</td> <td style="text-align: left"><code>20</code></td> </tr> <tr> <td style="text-align: left">REPMGR_DEGRADED_MONITORING_TIMEOUT</td> <td style="text-align: left"><code>5</code></td> </tr> <tr> <td style="text-align: left">REPMGR_USERNAME</td> <td style="text-align: left"><code>repmgr</code></td> </tr> <tr> <td style="text-align: left">REPMGR_DATABASE</td> <td style="text-align: left"><code>repmgr</code></td> </tr> <tr> <td style="text-align: left">REPMGR_PASSWORD</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">REPMGR_PASSWORD_FILE</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">REPMGR_FENCE_OLD_PRIMARY</td> <td style="text-align: left"><code>no</code></td> </tr> <tr> <td style="text-align: left">REPMGR_CHILD_NODES_CHECK_INTERVAL</td> <td style="text-align: left"><code>5</code></td> </tr> <tr> <td style="text-align: left">REPMGR_CHILD_NODES_CONNECTED_MIN_COUNT</td> <td style="text-align: left"><code>1</code></td> </tr> <tr> <td style="text-align: left">REPMGR_CHILD_NODES_DISCONNECT_TIMEOUT</td> <td style="text-align: left"><code>30</code></td> </tr> <tr> <td style="text-align: left">REPMGR_USE_PASSFILE</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_USERNAME</td> <td style="text-align: left"><code>postgres</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_DATABASE</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_PASSWORD</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_PASSWORD_FILE</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_POSTGRES_PASSWORD</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_POSTGRES_PASSWORD_FILE</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_PORT_NUMBER</td> <td style="text-align: left"><code>5432</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_INITDB_ARGS</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_PGCTLTIMEOUT</td> <td style="text-align: left"><code>60</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_SHUTDOWN_MODE</td> <td style="text-align: left"><code>fast</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_ENABLE_TLS</td> <td style="text-align: left"><code>no</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_TLS_CERT_FILE</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_TLS_KEY_FILE</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_TLS_CA_FILE</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_TLS_CRL_FILE</td> <td style="text-align: left"><code>nil</code></td> </tr> <tr> <td style="text-align: left">POSTGRESQL_TLS_PREFER_SERVER_CIPHERS</td> <td style="text-align: left"><code>yes</code></td> </tr> </tbody> </table> <h2 id="日志">日志</h2> <p><code>Bitnami PostgreSQL HA Docker</code> 镜像将容器日志发送到<code>stdout</code>。查看日志：</p> <pre><code class="language-console">$ docker logs pg-0</code></pre> <p>如果您希望以不同的方式使用容器日志，则可以使用<code>--log-driver</code> 选项配置容器<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.docker.com/engine/admin/logging/overview/"  target="_blank" rel="nofollow">logging driver</a>。在默认配置中，<code>docker</code> 使用<code>json-file</code> driver。</p> <ul> <li><small><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.docker.com/engine/admin/logging/overview/"  target="_blank" rel="nofollow">https://docs.docker.com/engine/admin/logging/overview/</a></small></li> </ul> <h2 id="维护">维护</h2> <h3 id="升级这个镜像">升级这个镜像</h3> <p><code>Bitnami</code> 提供了<code>PostgreSQL HA</code> 的最新版本，包括安全补丁，这些补丁在上游发布后很快就会发布。我们建议您按照以下步骤升级容器。</p> <h4 id="step-1-获取更新的镜像">Step 1: 获取更新的镜像</h4> <pre><code class="language-console">$ docker pull bitnami/postgresql-repmgr:latest</code></pre> <p>或者，如果您使用的是<code>Docker Compose</code>，请将<code>image</code> 属性的值更新为<code>bitnami/postgresql-repmgr:latest</code>。</p> <h4 id="step-2-停止正在运行的容器">Step 2: 停止正在运行的容器</h4> <p>使用命令停止当前运行的容器</p> <pre><code class="language-console">$ docker stop pg-0</code></pre> <p>或者使用 Docker Compose：</p> <pre><code class="language-console">$ docker-compose stop pg-0 $ docker-compose stop pg-1</code></pre> <p>接下来，使用以下命令对持久卷<code>/path/to/postgresql-persistence</code> 进行快照：</p> <pre><code class="language-console">$ rsync -a /path/to/postgresql-persistence /path/to/postgresql-persistence.bkp.$(date +%Y%m%d-%H.%M.%S)</code></pre> <h4 id="step-3-移除当前运行的容器">Step 3: 移除当前运行的容器</h4> <pre><code class="language-console">$ docker rm -v pg-0</code></pre> <p>或者使用 Docker Compose：</p> <pre><code class="language-console">$ docker-compose rm -v pg-0 $ docker-compose rm -v pg-1</code></pre> <h4 id="step-4-运行新镜像">Step 4: 运行新镜像</h4> <p>从新镜像重新创建容器。</p> <pre><code class="language-console">$ docker run --name pg-0 bitnami/postgresql-repmgr:latest</code></pre> <p>或者使用 Docker Compose：</p> <pre><code class="language-console">$ docker-compose up pg-0 $ docker-compose up pg-1</code></pre> <h2 id="更多">更多</h2> <ul> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://mp.weixin.qq.com/s/Hbs5YQ2oKcnMKHzVWrp4Tw"  target="_blank" rel="nofollow">Pgpool-II 4.3 中文手册-前言</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://mp.weixin.qq.com/s/a1l51jpMR_ObQwmGAdI8-w"  target="_blank" rel="nofollow">pgpool-II 4.3 中文手册 - 入门教程</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://mp.weixin.qq.com/s/1X65AAs8O1qcddf5wqpRRQ"  target="_blank" rel="nofollow">「在 Kubernetes 上运行 Pgpool-Il」实现 PostgreSQL 查询(读)负载均衡和连接池</a></li> </ul> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-22.htm">C语言井字棋游戏</a></p>
                                        <p>下一个：<a href="/html/category/article-24.htm">windows利用kubectl命令和vscode远程操作kubenetes(k8s)</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-243.htm">指针的高级运用——指针进阶</a></h4>
                <p>文章目录  学习目标 1.1 动态内存分配   引子 1.1动态分配内存函数 1.2malloc函数 1.3 calloc 函数 1.4 realloc函数 1.5 free函数 1.6 动态内存编程</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-219.htm">正则表达式-匹配ip及rtsp</a></h4>
                <p>IP地址是指互联网协议地址（英语：Internet Protocol Address，又译为网际协议地址），是IP Address的缩写。IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-252.htm">Azure Virtual Desktop创建配置管理详解</a></h4>
                <p>一，引言 Azure 虚拟创面是一项 Azure 服务，可以让我们管理： 　　1）VDI（虚拟桌面基础架构） 　　2）云端的 RDSH：RDSH 是 RDS（远程桌面服务）中的一个角色。这些类型的服务</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-238.htm">JavaScript中querySelector和getElementByld(getXXXBy XX)的区别</a></h4>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在日常开发中，我学使用原生JavaScript获取元素的时候，最常用的方法就document.getEl</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-226.htm">Vue &#8211; 缓存页面（keepAlive）</a></h4>
                <p>前言  项目主流程缓存优化，主流程页面（组件）切换时保持之前加载的状态，避免反复渲染影响页面性能，同时也可以很大程度上减少接口请求，减小服务器压力。  例如，我们将某个列表类组件内容滑动到第 100 </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-228.htm">Springboot使用@Cacheable注解实现数据缓存</a></h4>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文介绍如何在Springboot中通过@Cacheable注解实现数据缓存。在每次调用添加了@Cach</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-245.htm">go语言实战&#8212;&#8211;28&#8212;&#8211;Gin、rest full api和mysql实现增删改查</a></h4>
                <p>一 Gin、rest full api和mysql实现增删改查  1 目前架构、含义以及对项目进行go mod gin_restful的项目目录。 每个目录的意思描述： 对gin_restful项目进</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-250.htm">Springboot 设置过滤器以及重复读取request里的body</a></h4>
                <p>需求：request的content-type为applciation/json，进入controller之前需要把body中的参数取出来做一次处理，然后和hearder中的另一个参数做对比。 思路：</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-208.htm">vue3.0下如何使用mapState，mapGetters和mapActions</a></h4>
                <p>vue3.0下如何使用mapState，mapGetters和mapActions      1、新建useMapper.js 2、新建useState.js 3、新建useGetters.js 4、</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-217.htm">Java 集合框架ArrayList 储存自定义数组</a></h4>
                <p>package LinkedList;  import java.util.ArrayList; import java.util.Iterator;  import p.bean.Person;  </p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>