<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-15.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>java中通过es搜索数据 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">java中通过es搜索数据</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <ol> <li>例</li> </ol> <pre><code>import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;   @Autowired private ElasticsearchRestTemplate elasticsearchRestTemplate;   //前端传递查询条件，将查询条件封装成map集合，多个条件构成map     //返回的数据类型也是map，需要返回查询的结果，总条数之类的     @Override     public Map&lt;String, Object&gt; search(Map&lt;String, String&gt; searchmap) {         //先读取到查询条件的关键字         String keywords = searchmap.get("keywords");         //判断关键字是否为空，不为空时再处理,为空赋初值         if (StringUtils.isEmpty(keywords)){             keywords = "手机";         }          //然后就是在es中搜索          //1. 创建查询对象的构建对象         NativeSearchQueryBuilder nativeSearchQueryBuilder = new NativeSearchQueryBuilder();         //2. 设置查询条件，设置前端传递的查询条件和当前实体类中的那个属性匹配查询。         nativeSearchQueryBuilder.withQuery(QueryBuilders.matchQuery("title", keywords));          //分组查询    terms("categoryGroup")是设置分组后的名字，相当于map中设置了一个键。         //           .field("category.keyword")是匹配实体类中的要分组的字段。keyword是精确匹配         nativeSearchQueryBuilder.addAggregation(AggregationBuilders.terms("categoryGroup").field("category.keyword"));          //3. 创建查询对象         NativeSearchQuery query = nativeSearchQueryBuilder.build();          //4. 使用es查询,查询到的所有数据都在searchHits对象中         SearchHits&lt;SkuInfo&gt; searchHits = elasticsearchRestTemplate.search(query, SkuInfo.class);          //创建一个集合用于存放分组查询的分组信息的数据         //注：根据电视进行分词查询后可以将所有查询到的结果中的分组的字段获取出来存放进此list，所以就对应所有的数据的分类         List&lt;Object&gt; categoryList = new ArrayList&lt;&gt;();         //获取分组查询结果         Terms terms = searchHits.getAggregations().get("categoryGroup");         for (Terms.Bucket bucket : terms.getBuckets()) {             categoryList.add(bucket.getKey());         }          //遍历查询结果，获取到所有查询到的数据         List&lt;SkuInfo&gt; skuInfoList = new ArrayList&lt;&gt;();         for (SearchHit&lt;SkuInfo&gt; searchHit : searchHits.getSearchHits()) {             SkuInfo skuInfo = searchHit.getContent();             //将查询到的skuInfo对象都存进list数组             skuInfoList.add(skuInfo);         }          //map中存放查到的数据的list和总条数         Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();         map.put("data", skuInfoList);         map.put("dataCount", searchHits.getTotalHits());         map.put("categoryList", categoryList);         return map;     }          //map中存放查到的数据的list和总条数         Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();         map.put("data", skuInfoList);         map.put("dataCount", searchHits.getTotalHits());         return map;     }</code></pre> <ol start="2"> <li>注意<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220603/86e2262d999caf3ce209695457e61090.jpg" alt="java中通过es搜索数据"><br /> 要注意查询条件和要查询的es中的数据中的属性相匹配，具体是要查询对应数据中的那个字段</li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220603/e1386c33bb33d95704a572a7ba8b5e9b.jpg" alt="java中通过es搜索数据"><br /> 在使用es查询两个参数分别是上边查询条件匹配后的查询对象和查询数据对应的实体类的字节码对象</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220603/388b2c35ab9350631fa2b5b8c8631c03.jpg" alt="java中通过es搜索数据"><br /> 这四步就是将查询条件导入进去然后获取查询结果。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220603/d92d48a208384261948220043281b3d5.jpg" alt="java中通过es搜索数据"><br /> 这就是设置了一下，将所有条件搜索查询到的结果的数据的分类查询出来存进一个list</p> <p><strong>总结</strong><br /> es 查询和mybatisplus中的QueryWrapper设置条件的步骤和格式很像。mybatisplus条件查询也是先创建一个QueryWrapper对象，然后eq或like方法设置查询条件和对应要查询的实体类的字段。然后调用持久层的查询方法，将QueryWrapper对象传递进去。</p> <p><strong>补充，添加了排序，分页，条件查询等</strong></p> <pre><code>//前端传递查询条件，将查询条件封装成map集合，多个条件构成map     //返回的数据类型也是map，需要返回查询的结果，总条数之类的     @Override     public Map&lt;String, Object&gt; search(Map&lt;String, String&gt; searchmap) {         //先读取到查询条件的关键字         String keywords = searchmap.get("keywords");         //判断关键字是否为空，不为空时再处理,为空赋初值         if (StringUtils.isEmpty(keywords)) {             keywords = "";         }          //然后就是在es中搜索         //1. 创建查询对象的构建对象         NativeSearchQueryBuilder nativeSearchQueryBuilder = new NativeSearchQueryBuilder();          //2. 设置查询条件，设置前端传递的查询条件和当前实体类中的那个属性匹配查询。         nativeSearchQueryBuilder.withQuery(QueryBuilders.matchQuery("title", keywords));           /*下边的分组查询就是可以获取到搜索出来的数据的一些分类，规格，品牌的统计，并不会按照输入的进行匹配查询*/         //分类的分组查询    terms("categoryGroup")是设置分组后的名字，相当于map中设置了一个键。         //           .field("category.keyword")是匹配实体类中的要分组的字段。keyword是精确匹配         nativeSearchQueryBuilder.addAggregation(AggregationBuilders.terms("categoryGroup").field("category.keyword"));          //品牌的分组查询         nativeSearchQueryBuilder.addAggregation(AggregationBuilders.terms("brandGroup").field("brand.keyword"));          //规格的分组查询         nativeSearchQueryBuilder.addAggregation(AggregationBuilders.terms("specGroup").field("spec.keyword"));           /*多条件查询就是根据用户输入的数据进行匹配查询，和上边的分组查询不同，分组查询是做统计，这个是匹配用户的查询条件输出对应数据*/         //多条件查询，即条件筛选,多条件查询时，matchQuery是自动分词查询的         BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();         //判断条件是否为空         if (!StringUtils.isEmpty(searchmap.get("brand"))) {             //matchQuery的第一个参数是需要匹配的es中存入的数据字段，第二个是传递进来要匹配的字段             boolQueryBuilder.filter(QueryBuilders.matchQuery("brand", searchmap.get("brand")));         }         if (!StringUtils.isEmpty(searchmap.get("category"))) {             boolQueryBuilder.filter(QueryBuilders.matchQuery("category", searchmap.get("category")));         }          //规格的多条件查询,规格因为是"{\"机身内存\":\"16G\",\"网络\":\"联通4G\"}"这种格式，所以需要和其他字段区别开使用的查询方法不同         for (String key : searchmap.keySet()) {   //前端传递进来的规格的键包括前缀spec_所以判断有包含的就是规格的             if (key.startsWith("spec_")){                 //该方法两个参数分别是，第一个是匹配es中存入的数据的键，第二个是要进行查询的值，前端传递的查询条件                 boolQueryBuilder.filter(QueryBuilders.termQuery("specMap."+key.substring(key.indexOf("_")+1)+".keyword", searchmap.get(key)));             }         }          //价格的多条件查询,先判断价格是否为空，不为空再转成double类型         String price = searchmap.get("price");         //价格的格式有￥-price,maxPrice-minPrice,minPrice-maxPrice,price-￥         if (!StringUtils.isEmpty(price)){             //将价格前后两部分切分出来             String[] split = price.split("-");             if ("￥".equals(split[0])) {                 //rangeQuery的方法就是判断区间的                 boolQueryBuilder.filter(QueryBuilders.rangeQuery("price").lte(Double.parseDouble(split[1])));             }else if ("￥".equals(split[1])){                 boolQueryBuilder.filter(QueryBuilders.rangeQuery("price").gte(Double.parseDouble(split[0])));             }else {                 //对大小值进行调换                 double minPrice = Double.parseDouble(split[0]);                 double maxPrice = Double.parseDouble(split[1]);                 if (minPrice &gt;maxPrice){                     double c = maxPrice;                     maxPrice = minPrice;                     minPrice = c;                 }                 //from -- to from是从小的to到大的                 boolQueryBuilder.filter(QueryBuilders.rangeQuery("price").from(minPrice).to(maxPrice));             }         }          //最后还需要把设置的条件查询的条件加入到构建对象中，进行接下来的查询对象的创建才会有结果         nativeSearchQueryBuilder.withQuery(boolQueryBuilder);         //多条件查询结束           //分页查询         String currentPage = searchmap.get("currentPage");         if (StringUtils.isEmpty(currentPage)){             currentPage = "1";         }         int page = Integer.parseInt(currentPage);         //PageRequest.of的两个参数是当前页和每页显示的条数         nativeSearchQueryBuilder.withPageable(PageRequest.of(page, 10));         //分页查询结束           //排序         //sortFild是按照哪个字段进行排序         String sortField = searchmap.get("sortField");         //sortRule是排序规格,转成小写         String sortRule = searchmap.get("sortRule");         System.out.println(sortRule);         if (!StringUtils.isEmpty(sortField) &amp;&amp; !StringUtils.isEmpty(sortRule)) {             sortRule = sortRule.toLowerCase();             //.fieldSorts是判断按照哪个字段进行排序，order是传递一个排序的规则             nativeSearchQueryBuilder.withSort(SortBuilders.fieldSort(sortField).order("asc".equals(sortRule)? SortOrder.ASC:SortOrder.DESC));         }         //排序结束           //3. 创建查询对象         NativeSearchQuery query = nativeSearchQueryBuilder.build();          //4. 使用es查询,查询到的所有数据都在searchHits对象中         SearchHits&lt;SkuInfo&gt; searchHits = elasticsearchRestTemplate.search(query, SkuInfo.class);          //5. 处理分页结果         SearchPage&lt;SkuInfo&gt; pageHits = SearchHitSupport.searchPageFor(searchHits, query.getPageable());           //返回分页的总页数         int pageCount = pageHits.getTotalPages();          //获取分类的分组查询结果,es的查询结果集中放着所有的查询数据         Terms categoryTerms = searchHits.getAggregations().get("categoryGroup");         //创建一个集合用于存放分组查询的分组信息的数据         //注：根据电视进行分词查询后可以将所有查询到的结果中的分组的字段获取出来存放进此list，所以就对应所有的数据的分类         List&lt;Object&gt; categoryList = addGroup(categoryTerms);          //获取品牌的分类结果         Terms brandTerms = searchHits.getAggregations().get("brandGroup");         List&lt;Object&gt; brandList = this.addGroup(brandTerms);          //获取规格的分类结果         Terms specTerms = searchHits.getAggregations().get("specGroup");         List&lt;Object&gt; specList = this.addGroup(specTerms);   //"{\"机身内存\":\"16G\",\"网络\":\"联通4G\"}",         Map&lt;String, Set&lt;String&gt;&gt; specMap = getSpecMap(specList);           //遍历查询结果，获取到所有查询到的数据         List&lt;SkuInfo&gt; skuInfoList = new ArrayList&lt;&gt;();         for (SearchHit&lt;SkuInfo&gt; searchHit : searchHits.getSearchHits()) {             SkuInfo skuInfo = searchHit.getContent();             //将查询到的skuInfo对象都存进list数组             skuInfoList.add(skuInfo);         }            //map中存放查到的数据的list和总条数         Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();         map.put("data", skuInfoList);   //查询到的数据         map.put("dataCount", searchHits.getTotalHits());   //数据总条数         map.put("categoryList", categoryList);  //商品分类         map.put("brandList", brandList);  //品牌         map.put("specMap", specMap);   //规格         map.put("pageCount", pageCount);   //总页数         return map;     }      //此方法是通过传递进来查询到商品的规格，然后将规格处理统计后返回     private Map&lt;String, Set&lt;String&gt;&gt; getSpecMap(List&lt;Object&gt; specList) {         //需要将所有的规格转成map，而且值还要去掉重复         Map&lt;String, Set&lt;String&gt;&gt; specMap = new HashMap&lt;&gt;();         for (Object spec : specList) {             //先将所有的规格信息转成json类型的字符创             //再将每个规格转成map             Map&lt;String, String&gt; map = JSON.parseObject(spec.toString(), Map.class);             //读取到所有键             Set&lt;String&gt; set = map.keySet();             //根据键获取值             for (String o : set) {  //o -&gt; 网络                 //这是map每个键对应的值                 String s = map.get(o);  //  s -&gt; 16G                  //如果specmap中存在o这个键，那么直接加入到o对应的值中，没有就创建set集合                 Set&lt;String&gt; specSet = specMap.get(o);                 //第一次循环的时候，specMap中没有键和值，所以需要创建set集合                 if (CollectionUtils.isEmpty(specSet)) {                     specSet = new HashSet&lt;&gt;();                 }                 specSet.add(s);                 specMap.put(o, specSet);             }         }         return specMap;     }      /**      * @param terms 是传递进来一个分组的查询结果      * @return 将传递进来的结果进行处理后装入list集合返回      */     private List&lt;Object&gt; addGroup(Terms terms) {         List&lt;Object&gt; categoryList = new ArrayList&lt;&gt;();         for (Terms.Bucket bucket : terms.getBuckets()) {             categoryList.add(bucket.getKey());         }         return categoryList;     }</code></pre> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-14.htm">python 中yield的使用</a></p>
                                        <p>下一个：<a href="/html/category/article-16.htm">C++详解多线程中的线程同步与互斥量_C 语言</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-257.htm">JavaScript如何将字符串转换为分层对象</a></h4>
                <p>假设我们有一种特殊的字符串，其中包含成对的字符，像这样- const&nbsp;str&nbsp;=&nbsp;"AABBCCDDEE"; 我们需要基于此字符串构造一个对象，该字符串应如下所示： co</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-254.htm">图像处理学习笔记——BMP图片详解</a></h4>
                <p>一、位图和调色板的概念  1.位图（Bitmap）： 例如我们常说的屏幕分辨率为 640*480，刷新频率为70Hz，意思是说每行要扫描 640 个象素，一共有 480 行，每秒重复扫描屏幕 70 次</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-220.htm">SpringCloud&#8212;-Feign隔离和降级</a></h4>
                <p>限流是一种预防措施，虽然限流可以尽量避免因高并发而引起的服务故障，但服务还会因为其它原因而故障。 而要将这些故障控制在一定范围，避免雪崩，就要靠线程隔离（舱壁模式）和熔断降级手段了。线程隔离：调用者在</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-526.htm">SpringBoot生成docx文件并返回其Base64编码</a></h4>
                <p>直接上源码，      @ResponseBody     @RequestMapping(value = "/getDocx", method = RequestMethod.GET)     pu</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-247.htm">EFI系统分区必须挂载到/boot/efi其中之一</a></h4>
                <p>最近在windows 8.1系统上使用U盘安装centos8双系统，硬盘分区格式是ntfs，mbr引导；选择自动分区时出现如下错误  （Failed to find a suitable stage1</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-249.htm">element树形数据与懒加载失效</a></h4>
                <p>这个bug 卡了我好久 我以为是我的代码有问题 但是 发现我的版本没有这个功能 table树形数据设置，不显示下拉箭头 将官网相关demo复制到本地仍不能正常工作，没有报错 后面百度了好久才发现 版本</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-251.htm">C# 有关List&lt;T&gt;的Contains与Equals方法_在线工具</a></h4>
                <p>【以下内容仅为本人在学习中的所感所想，本人水平有限目前尚处学习阶段，如有错误及不妥之处还请各位大佬指正，请谅解，谢谢！】 #Updated【2022.5.2 修复移动端排版混乱的问题】 ！！！观前提醒</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-240.htm">SpringBoot配置跨域Cors</a></h4>
                <p>01、同源策略 同源策略[same origin policy]是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。 同源策略是浏览器安全的基石。  什么是源 源[or</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1321.htm">Spring Boot的依赖配置文件的解析</a></h4>
                <p>SpringBoot笔记-day01 在pom.xml中 &lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&l</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-789.htm">vue 实现简单表格分页功能</a></h4>
                <p>使用框架实现表格展示和跳转功能，一直不懂原理。所以自己写一个简单的，加深理解。  布局分为2块，上面是表格展示数据，下面是点击按钮跳转。效果图：代码： &lt;!DOCTYPE html&gt; &l</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">36</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>