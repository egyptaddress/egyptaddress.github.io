<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-149.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Hyperledger Fabric无系统通道启动及通道的创建和删除 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Hyperledger Fabric无系统通道启动及通道的创建和删除</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<h2 id="前言">前言</h2> <p>在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://ifantasy.net/2022/04/04/hyperledger_fabric_2_update_org/"  target="_blank" rel="nofollow">Hyperledger Fabric组织的动态添加和删除</a>中，我们已经完成了在运行着的网络中动态添加和删除组织，但目前为止，我们启动 orderer 节点的方式都是通过系统通道的方式，这样自带系统通道的网络很不简洁优雅。好在 Fabric 2.3 以上就开始支持无系统通道创建应用通道的功能，本文将对此功能进行详细解释和介绍，然后通过无系统通道的方式启动联盟链网络并在此基础上完成通道的添加和删除。本实验必要的准备工作和 DNS 配置请参考<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://ifantasy.net/2022/04/01/hyperledger_fabric_1_custom_our_network/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C"  target="_blank" rel="nofollow">准备工作</a>。</p> <h2 id="背景介绍">背景介绍</h2> <h3 id="实验准备">实验准备</h3> <p>本文网络结构直接将<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://ifantasy.net/2022/04/01/hyperledger_fabric_1_custom_our_network/"  target="_blank" rel="nofollow">Hyperledger Fabric定制联盟链网络工程实践</a> 中创建的<code>1_3Org2Peer1Orderer1TLS</code> 复制为<code>3_RunWithNoSystemChannel</code> （建议直接将本案例仓库<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/wefantasy/FabricLearn"  target="_blank" rel="nofollow">FabricLearn</a> 下的<code>3_RunWithNoSystemChannel</code> 目录拷贝到本地运行）。默认情况下，所有命令皆在<code>3_RunWithNoSystemChannel</code> 根目录下执行，在开始后面的实验前按照以下命令启动基础实验网络：</p> <ol> <li>设置环境变量<code>source envpeer1soft</code></li> <li>启动CA网络<code>./0_Restart.sh</code></li> <li>注册用户<code>./1_RegisterUser.sh</code></li> <li>构造证书<code>./2_EnrollUser.sh</code></li> </ol> <p>本实验初始 docker 网络为：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/0c57270956312fc73cc533feba999a4a.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <h3 id="本文工作">本文工作</h3> <p>以无系统通道的方式启动 Hyperledger Fabric 网络，然后先用<code>configtxgen</code> 工具创建新通道<code>mychannel</code> 和<code>testchannel</code> ，并使用<code>osnadmin</code> 工具通过<code>orderer</code> 的<code>admin</code> 服务使<code>orderer</code> 加入这两条通道（实验代码已上传至：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/wefantasy/FabricLearn"  target="_blank" rel="nofollow">https://github.com/wefantasy/FabricLearn</a> 的<code>3_RunWithNoSystemChannel</code> 下）<sup class="footnote-ref"><a href="#fn1" id="fnref1" rel="nofollow">[1]</a></sup>：</p> <table> <thead> <tr> <th style="text-align: center">项</th> <th style="text-align: center">运行端口</th> <th style="text-align: center">说明</th> </tr> </thead> <tbody> <tr> <td style="text-align: center"><code>council.ifantasy.net</code></td> <td style="text-align: center">7050</td> <td style="text-align: center">council 组织的 CA 服务， 为联盟链网络提供 TLS-CA 服务</td> </tr> <tr> <td style="text-align: center"><code>orderer.ifantasy.net</code></td> <td style="text-align: center">7150</td> <td style="text-align: center">orderer 组织的 CA 服务， 为联盟链网络提供排序服务</td> </tr> <tr> <td style="text-align: center"><code>orderer1.orderer.ifantasy.net</code></td> <td style="text-align: center">7151</td> <td style="text-align: center">orderer 组织的排序服务</td> </tr> <tr> <td style="text-align: center"><code>orderer1.orderer.ifantasy.net</code></td> <td style="text-align: center">7152</td> <td style="text-align: center">orderer 组织的 ADMIN 服务</td> </tr> <tr> <td style="text-align: center"><code>soft.ifantasy.net</code></td> <td style="text-align: center">7250</td> <td style="text-align: center">soft 组织的 CA 服务， 包含成员： peer1 、 admin1</td> </tr> <tr> <td style="text-align: center"><code>peer1.soft.ifantasy.net</code></td> <td style="text-align: center">7251</td> <td style="text-align: center">soft 组织的 peer1 成员节点</td> </tr> <tr> <td style="text-align: center"><code>web.ifantasy.net</code></td> <td style="text-align: center">7350</td> <td style="text-align: center">web 组织的 CA 服务， 包含成员： peer1 、 admin1</td> </tr> <tr> <td style="text-align: center"><code>peer1.web.ifantasy.net</code></td> <td style="text-align: center">7351</td> <td style="text-align: center">web 组织的 peer1 成员节点</td> </tr> </tbody> </table> <h2 id="无系统通道启动">无系统通道启动</h2> <ol> <li>修改<code>compose/docker-base.yaml</code> 中<code>orderer-base</code> 内容为：</li> </ol> <pre><code class="language-yaml">  orderer-base:     image: hyperledger/fabric-orderer:${FABRIC_BASE_VERSION}     environment:       - ORDERER_HOME=${DOCKER_CA_PATH}/orderer       - ORDERER_GENERAL_LISTENPORT=7777       - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0       - ORDERER_GENERAL_BOOTSTRAPMETHOD=none       - ORDERER_CHANNELPARTICIPATION_ENABLED=true       # - ORDERER_GENERAL_GENESISMETHOD=file       # - ORDERER_GENERAL_GENESISFILE=${DOCKER_CA_PATH}/orderer/genesis.block       - ORDERER_GENERAL_LOCALMSPDIR=${DOCKER_CA_PATH}/orderer/msp       - ORDERER_GENERAL_LOGLEVEL=debug       - ORDERER_GENERAL_TLS_ENABLED=true       - ORDERER_GENERAL_TLS_CERTIFICATE=${DOCKER_CA_PATH}/orderer/tls-msp/signcerts/cert.pem       - ORDERER_GENERAL_TLS_PRIVATEKEY=${DOCKER_CA_PATH}/orderer/tls-msp/keystore/key.pem       - ORDERER_GENERAL_TLS_ROOTCAS=[${DOCKER_CA_PATH}/orderer/tls-msp/tlscacerts/tls-council-ifantasy-net-7050.pem]       - ORDERER_ADMIN_TLS_ENABLED=true       - ORDERER_ADMIN_TLS_CERTIFICATE=${DOCKER_CA_PATH}/orderer/tls-msp/signcerts/cert.pem       - ORDERER_ADMIN_TLS_PRIVATEKEY=${DOCKER_CA_PATH}/orderer/tls-msp/keystore/key.pem       - ORDERER_ADMIN_TLS_ROOTCAS=[${DOCKER_CA_PATH}/orderer/tls-msp/tlscacerts/tls-council-ifantasy-net-7050.pem]       - ORDERER_ADMIN_TLS_CLIENTROOTCAS=[${DOCKER_CA_PATH}/orderer/tls-msp/tlscacerts/tls-council-ifantasy-net-7050.pem]       - ORDERER_ADMIN_LISTENADDRESS=0.0.0.0:8888       - ORDERER_METRICS_PROVIDER=prometheus       - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:9999       - ORDERER_DEBUG_BROADCASTTRACEDIR=data/logs     networks:       - ${DOCKER_NETWORKS}</code></pre> <p>相比源文件主要修改如下：</p> <ul> <li><code>ORDERER_GENERAL_GENESISMETHOD</code> ：将启动方式改为<code>none</code></li> <li><code>ORDERER_CHANNELPARTICIPATION_ENABLED</code> ：无系统通道启动，该字段必须设置为 true</li> <li>添加<code>ORDERER_ADMIN_TLS_*</code> 相关设置， 后续排序节点使用<code>osnadmin</code> 加入通道依赖于配置， 它的服务和证书与<code>ORDERER</code> 独立，可以选择其他的证书。</li> </ul> <ol start="2"> <li>修改<code>compose/docker-compose.yaml</code> 中<code>orderer-base</code> 内容为：</li> </ol> <pre><code class="language-yaml">  orderer1.orderer.ifantasy.net:     container_name: orderer1.orderer.ifantasy.net     extends:       file: docker-base.yaml       service: orderer-base     environment:       - ORDERER_HOST=orderer1.orderer.ifantasy.net       - ORDERER_GENERAL_LOCALMSPID=ordererMSP     volumes:       - ${LOCAL_CA_PATH}/orderer.ifantasy.net/registers/orderer1:${DOCKER_CA_PATH}/orderer       # - ${LOCAL_ROOT_PATH}/data/genesis.block:${DOCKER_CA_PATH}/orderer/genesis.block     ports:       - 7151:7777       - 7152:8888       - 7153:9999</code></pre> <p>相比源文件，主要添加了<code>ADMIN</code> 、<code>ORDERER_OPERATIONS_LISTENADDRESS</code> 的端口监听。</p> <ol start="3"> <li>在<code>envpeer1soft</code> 中添加<code>ORDERER ADMIN</code> 的环境变量：</li> </ol> <pre><code class="language-yaml">export ORDERER_CA=$LOCAL_CA_PATH/orderer.ifantasy.net/registers/orderer1/tls-msp/tlscacerts/tls-council-ifantasy-net-7050.pem export ORDERER_ADMIN_TLS_SIGN_CERT=$LOCAL_CA_PATH/orderer.ifantasy.net/registers/orderer1/tls-msp/signcerts/cert.pem export ORDERER_ADMIN_TLS_PRIVATE_KEY=$LOCAL_CA_PATH/orderer.ifantasy.net/registers/orderer1/tls-msp/keystore/key.pem</code></pre> <ol start="4"> <li>无系统通道启动<code>orderer</code> 和<code>peer</code> 节点：</li> </ol> <pre><code class="language-bash">docker-compose -f $LOCAL_ROOT_PATH/compose/docker-compose.yaml up -d peer1.soft.ifantasy.net peer1.web.ifantasy.net orderer1.orderer.ifantasy.net</code></pre> <p>无系统通道启动成功后的容器环境：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/14eaef6e1462ea6ed4365a26f7619985.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <h2 id="新建通道">新建通道</h2> <h3 id="新建通道文件">新建通道文件</h3> <p>接下来我们将创建两个通道，它们分别是<code>mychannel</code> 和<code>testchannel</code> ：</p> <pre><code class="language-bash">configtxgen -profile OrgsChannel -outputCreateChannelTx $LOCAL_ROOT_PATH/data/mychannel.tx -channelID mychannel configtxgen -profile OrgsChannel -outputBlock $LOCAL_ROOT_PATH/data/mychannel.block -channelID mychannel configtxgen -profile OrgsChannel -outputCreateChannelTx $LOCAL_ROOT_PATH/data/testchannel.tx -channelID testchannel configtxgen -profile OrgsChannel -outputBlock $LOCAL_ROOT_PATH/data/testchannel.block -channelID testchannel</code></pre> <p>在上面我们同时使用了<code>-outputCreateChannelTx</code> 和<code>-outputBlock</code> 参数创建了两个通道的<code>tx</code> 文件和<code>block</code> 文件，其中<code>block</code> 文件为加入通道时所使用的创世区块文件，可以由对应的<code>tx</code> 文件计算而来。</p> <h3 id="排序节点加入通道">排序节点加入通道</h3> <p>在排序节点加入通道前，我们可以使用以下命令查看当前的通道：</p> <pre><code class="language-bash">source envpeer1soft osnadmin channel list -o orderer1.orderer.ifantasy.net:7152 --ca-file $ORDERER_CA --client-cert $ORDERER_ADMIN_TLS_SIGN_CERT --client-key $ORDERER_ADMIN_TLS_PRIVATE_KEY</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4d6a601910c53e38c387fefcaca01d6f.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <p>这里的参数<code>ORDERER_CA</code> 、<code>ORDERER_ADMIN_TLS_SIGN_CERT</code> 、<code>ORDERER_ADMIN_TLS_PRIVATE_KEY</code> 必须与上面<code>compose/docker-base.yaml</code> 中的<code>ORDERER_ADMIN_TLS_*</code> 相关证书文件一致。<strong>端口必须与<code>ORDERER_ADMIN_LISTENADDRESS</code> 一致</strong>，否则可能会出现以下错误：</p> <pre><code class="language-bash">error: Get "https://orderer1.orderer.ifantasy.net:7151/participation/v1/channels": net/http: HTTP/1.x transport connection broken: malformed HTTP response "\x00\x00\x06\x04\x00\x00\x00\x00\x00\x00\x05\x00\x00@\x00"</code></pre> <p>如果没有报错，可以使用<code>osnadmin channel join</code> 根据创世区块加入通道：</p> <pre><code class="language-bash">osnadmin channel join --channelID mychannel --config-block $LOCAL_ROOT_PATH/data/mychannel.block -o orderer1.orderer.ifantasy.net:7152 --ca-file "$ORDERER_CA" --client-cert "$ORDERER_ADMIN_TLS_SIGN_CERT" --client-key "$ORDERER_ADMIN_TLS_PRIVATE_KEY" osnadmin channel join --channelID testchannel --config-block $LOCAL_ROOT_PATH/data/testchannel.block -o orderer1.orderer.ifantasy.net:7152 --ca-file "$ORDERER_CA" --client-cert "$ORDERER_ADMIN_TLS_SIGN_CERT" --client-key "$ORDERER_ADMIN_TLS_PRIVATE_KEY"</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/131e6e6ebe74b1edd1ade39149c0d854.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <p>这里<code>--config-block</code> 指向的文件必须为<code>block</code> 文件，否则可能会出现错误：</p> <pre><code class="language-bash">osnadmin: error: parsing arguments: failed to retrieve channel id - block is empty. Try --help</code></pre> <p>所有工作完成后，可以再次使用<code>osnadmin channel list</code> 命令查看已加入的通道：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/fe27cd31b020cb4d039b1855ae541a67.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <h3 id="节点加入通道">节点加入通道</h3> <p>节点加入通道只需要能访问通道对应的<code>block</code> 创世区块文件即可，为了方便管理，我们先将创世区块复制到各组织的公共资产目录下：</p> <pre><code class="language-bash">cp $LOCAL_ROOT_PATH/data/mychannel.block $LOCAL_CA_PATH/soft.ifantasy.net/assets/ cp $LOCAL_ROOT_PATH/data/mychannel.block $LOCAL_CA_PATH/web.ifantasy.net/assets/ cp $LOCAL_ROOT_PATH/data/testchannel.block $LOCAL_CA_PATH/soft.ifantasy.net/assets/ cp $LOCAL_ROOT_PATH/data/testchannel.block $LOCAL_CA_PATH/web.ifantasy.net/assets/</code></pre> <p>现在使 soft 组织的 peer 节点加入创建的两个通道：</p> <pre><code class="language-bash">source envpeer1soft peer channel join -b $LOCAL_CA_PATH/soft.ifantasy.net/assets/mychannel.block peer channel join -b $LOCAL_CA_PATH/soft.ifantasy.net/assets/testchannel.block peer channel list</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/27bac80246f0d07c3d3231be42cabb72.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <p>然后使 soft 组织的 peer 节点加入创建的两个通道：</p> <pre><code class="language-bash">source envpeer1web peer channel join -b $LOCAL_CA_PATH/web.ifantasy.net/assets/mychannel.block peer channel join -b $LOCAL_CA_PATH/web.ifantasy.net/assets/testchannel.block peer channel list</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/38529ae7503f2a9665994b038344bc8e.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <h3 id="安装链码到指定通道">安装链码到指定通道</h3> <p>现在我们的网络中有 soft 和 web 两个组织，每个组织有个<code>peer1</code> 节点，每个节点都加入了<code>mychannel</code> 和<code>testchannel</code> 两个通道，如果想将链码安装到<code>testchannel</code> 通道，只需要按以下流程：</p> <ol> <li>两个组织分别安装链码：</li> </ol> <pre><code class="language-bash">source envpeer1soft # peer lifecycle chaincode package basic.tar.gz --path asset-transfer-basic/chaincode-go --label basic_1 peer lifecycle chaincode install basic.tar.gz peer lifecycle chaincode queryinstalled source envpeer1web peer lifecycle chaincode install basic.tar.gz peer lifecycle chaincode queryinstalled  export CHAINCODE_ID=basic_1:06613e463ef6694805dd896ca79634a2de36fdf019fa7976467e6e632104d718</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/6c475095265b379b0ca22711d687836f.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <p>由于本项目是从<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://ifantasy.net/2022/04/01/hyperledger_fabric_1_custom_our_network/"  target="_blank" rel="nofollow">Hyperledger Fabric定制联盟链网络工程实践</a> 中复制而来，所以这里直接安装该实验中打包过的链码<code>basic.tar.gz</code> ，并且设置<code>CHAINCODE_ID</code> 为链码安装后的<code>ID</code> 。在安装时不必指定具体通道，因为安装行为是针对节点而非通道，即 将节点安装到 peer 节点。</p> <ol start="2"> <li>两个组织分别批准链码：</li> </ol> <pre><code class="language-bash">source envpeer1soft peer lifecycle chaincode approveformyorg -o orderer1.orderer.ifantasy.net:7151 --tls --cafile $ORDERER_CA  --channelID testchannel --name basic --version 1.0 --sequence 1 --waitForEvent --init-required --package-id $CHAINCODE_ID peer lifecycle chaincode queryapproved -C testchannel -n basic --sequence 1 source envpeer1web peer lifecycle chaincode approveformyorg -o orderer1.orderer.ifantasy.net:7151 --tls --cafile $ORDERER_CA  --channelID testchannel --name basic --version 1.0 --sequence 1 --waitForEvent --init-required --package-id $CHAINCODE_ID peer lifecycle chaincode queryapproved -C testchannel -n basic --sequence 1</code></pre> <p>若想将链码安装到<code>testchannel</code> 通道上，只需要在批准链码时指定<code>--channelID</code> 为<code>testchannel</code> 即可。此时已可以在<code>testchannel</code> 上查看到链码批准情况：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f61cb66c829012d8b161a8e148d7db82.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <ol start="3"> <li>web 组织提交链码：</li> </ol> <pre><code class="language-bash">source envpeer1web peer lifecycle chaincode commit -o orderer1.orderer.ifantasy.net:7151 --tls --cafile $ORDERER_CA --channelID testchannel --name basic --init-required --version 1.0 --sequence 1 --peerAddresses peer1.soft.ifantasy.net:7251 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --peerAddresses peer1.web.ifantasy.net:7351 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE peer chaincode invoke --isInit -o orderer1.orderer.ifantasy.net:7151 --tls --cafile $ORDERER_CA --channelID testchannel --name basic --peerAddresses peer1.soft.ifantasy.net:7251 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --peerAddresses peer1.web.ifantasy.net:7351 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE -c '{"Args":["InitLedger"]}'</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7d230e5dd22661284e96413c0a030656.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"><br /> 4. 初始化并调用链码：</p> <pre><code class="language-bash">peer chaincode invoke --isInit -o orderer1.orderer.ifantasy.net:7151 --tls --cafile $ORDERER_CA --channelID testchannel --name basic --peerAddresses peer1.soft.ifantasy.net:7251 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --peerAddresses peer1.web.ifantasy.net:7351 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE -c '{"Args":["InitLedger"]}' sleep 5 peer chaincode invoke -o orderer1.orderer.ifantasy.net:7151 --tls --cafile $ORDERER_CA --channelID testchannel --name basic --peerAddresses peer1.soft.ifantasy.net:7251 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --peerAddresses peer1.web.ifantasy.net:7351 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE -c '{"Args":["GetAllAssets"]}'</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/3ae270b3b4120d92e9a2b39f4d98ac48.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <h2 id="删除通道">删除通道</h2> <p>区块链的不可篡改性注定了我们无法从网络上删除通道，只能将新数据（正常事务或配置更新）附加到区块链网络<sup class="footnote-ref"><a href="#fn2" id="fnref2" rel="nofollow">[2]</a></sup>。到现在我们已经讨论过了组织、节点及通道的添加和删除方式，发现 Fabric 联盟链通常对删除操作并没有提供支持。</p> <h2 id="参考">参考</h2> <hr class="footnotes-sep"/> <section class="footnotes"> <ol class="footnotes-list"> <li id="fn1" class="footnote-item"> <p>yuan1028.<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.jianshu.com/p/6d5d3567cd7a"  target="_blank" rel="nofollow">fabric 2.3系统通道</a>. 简书. [2021-01-21]<a href="#fnref1" class="footnote-backref" rel="nofollow">↩︎</a></p> </li> <li id="fn2" class="footnote-item"> <p>JACOB WILSON.<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://it-qa.com/how-do-you-delete-a-channel-on-hyperledger-fabric/"  target="_blank" rel="nofollow">How do you delete a channel on Hyperledger fabric?</a>. it-qa.com. [2019-04-05]<a href="#fnref2" class="footnote-backref" rel="nofollow">↩︎</a></p> </li> </ol> </section> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-148.htm">MySQL如何将没有定界符的数字和字符串解释为日期？</a></p>
                                        <p>下一个：<a href="/html/category/article-150.htm">SpringBoot配置跨域Cors</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-239.htm">vue中watch监听，ajax异步问题解决</a></h4>
                <p>1.组装参数调方法 getResult(){ 	//组装requestParam1和requestParam2参数  	let requestParam1 = {} 	let requestParam</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-242.htm">PyQt5 按钮Button 添加事件(信号/槽)</a></h4>
                <p>本文基于PyQt5 按钮Buttons样式设计，针对按钮添加响应的点击事件触发。 效果截图:  PyQt 模型设计：  &nbsp;PyQt 设计器截图：  *.UI 源码 &lt;?xml vers</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-212.htm">从查询重写角度理解elasticsearch的高亮原理</a></h4>
                <p>一、高亮的一些问题 elasticsearch提供了三种高亮方式，前面我们已经简单的了解了elasticsearch的高亮原理; 高亮处理跟实际使用查询类型有十分紧密的关系，其中主要的一点就是muti</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-235.htm">C#中检查null的语法糖_在线工具</a></h4>
                <p>今天看到已经更新了devblogs，新增的C# 11的!!（用于检查null的语法）经过非常长的讨论，最后取消了。然后我又想起来null检查，这个可以说一说。 函数参数null检查 传统写法 写一个函</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-233.htm">使用Python实现KNN算法解决简单分类问题</a></h4>
                <p>使用Python实现KNN算法解决简单分类问题 KNN分类 KNN算法属于监督学习算法，它可以解决分类问题，也可以解决回归问题。对于一组带标签的数据，当我们使用KNN算法进行分类时，有两种分类方式。K</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-248.htm">vue父组件向子组件传值与传递方法</a></h4>
                <p>vue父组件向子组件传值与传递方法 学习笔记 1、父组件向子组件传值（props）  在子组件中，默认是无法访问到父组件中的data上的数据和methods中的方法 父组件可以在引用子组件的时候，通过</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-240.htm">vue写一个简单的文件上传控件</a></h4>
                <p>这篇将介绍如何写一个简单的基于Vue+Element的文件上传控件。 控件将具有 1. 上传队列的列表，显示文件名称，大小等信息，可以显示上传进度实时刷新 2. 取消上传  &nbsp;使用Eleme</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-213.htm">Redis 如何保证数据库和缓存双写一致性？</a></h4>
                <p>前言  数据库和缓存（比如：redis）双写数据一致性问题，是一个跟开发语言无关的公共问题。尤其在高并发的场景下，这个问题变得更加严重。 我很负责的告诉大家，该问题无论在面试，还是工作中遇到的概率非常</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-204.htm">Kafka启动报错处理：/opt/module/kafka/bin/kafka-run-class.sh: 第 258 行:exec: java: 未找到</a></h4>
                <p>今天在学习Kafka的时候，写了个脚本，用于集群中kafka的群起。发现启动不了。???? 去掉-daemon参数后，继续启动，看到了它报的错误(日志中也有显示)。找不到java？？？ 看了相关资料后</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-203.htm">Python tkinter库图形绘制例子分享_python_</a></h4>
                <p>目录  一、椭圆绘制 二、矩形绘制 三、多边形绘制    一、椭圆绘制 实例代码：  import tkinter as tk                    # 导入tkinter库，并重命名</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>