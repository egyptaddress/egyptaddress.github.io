<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-41.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>ModelSerializer序列化器实战 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">ModelSerializer序列化器实战</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div class="toc"> <div class="toc-container-header">目录</div> <ul> <li>ModelSerializer序列化器实战</li> <li>单表操作 <ul> <li><strong>序列化器类</strong></li> <li><strong>视图类</strong></li> <li><strong>路由</strong></li> <li><strong>模型</strong></li> </ul> </li> <li>多表操作 <ul> <li><strong>models.py</strong></li> <li><strong>serializer.py</strong></li> <li><strong>views.py</strong></li> <li>urls.py</li> <li>优化操作</li> </ul> </li> </ul> </div> <h2 id="modelserializer序列化器实战">ModelSerializer序列化器实战</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/edaa8bf4c6b7d2e0bb64276032be254b.jpg" alt="ModelSerializer序列化器实战"></p> <blockquote> <p>上篇ModelSerializer序列化器做了一个小demo，演示了如何操作单表进行序列化和反序列化来实现五个API的使用，多表大差不差????，这里对四个表写五个API接口</p> </blockquote> <h2 id="单表操作">单表操作</h2> <blockquote> <p>单表操作序列化类demo：</p> </blockquote> <h3 id="序列化器类"><strong>序列化器类</strong></h3> <pre><code class="language-python"># ModelSerializer和表模型有绑定关系 class BookSerializer1(serializers.ModelSerializer):     class Meta:         model = Book  # 指定和哪个表有关系         # 所有字段         # fields = '__all__'         # 这里注意id字段是从表模型映射过来的，auto自增的，不传也可以         # 自定制的字段不传必须注册，在列表中         fields = ['id', 'title', 'price', 'price_info']  # 指定字段         extra_kwargs = {             'title': {'write_only': True, 'max_length': 8, 'min_length': 3}         }     # 指定序列化的字段：两种写法：在序列化类中写；models中写     price_info = serializers.SerializerMethodField()     def get_price_info(self, obj):         return "价格是：" + str(obj.price)     '''     注意：自定制字段如果和表模型获取到的字段是同名，那么自定制返回给前端的字段值就被自定制覆盖了，比如：     title = serializers.SerializerMethodField()     def get_title(self, obj):         return "书名是：" + str(obj.title)     '''      #  局部和全局钩子，跟之前一样，但是要注意写在Meta外</code></pre> <h3 id="视图类"><strong>视图类</strong></h3> <pre><code class="language-python">from rest_framework.views import APIView from .models import Book from rest_framework.response import Response from app01.serializer import  BookSerializer1 class BookView1(APIView):     def get(self, request):         # 从数据库查数据，做序列化         book_list = Book.objects.all()         # 实例化类，传入初始化的参数，instance和many         '''         instance:要序列化的对象  qs，单个对象         many:如果是qs对象，many=True，如果是单个对象many=False         '''         ser = BookSerializer1(instance=book_list, many=True)         # ser.data使用模型类的对象得到序列化后的字典         return Response(ser.data)      def post(self,request):         # 反序列化，保存到数据库使用data参数         deser = BookSerializer1(data=request.data)         # 校验数据         if deser.is_valid():             # 保存需要重写create方法,不然不知道存到哪个表             deser.save()             return Response(deser.data)         return Response({'code':101,'msg':'校验不通过','errors':deser.errors})    # 处理修改再写一个视图类，防止get冲突 class BookDetailView1(APIView):     def get(self,request,pk):         book = Book.objects.filter(pk=pk).first()         ser = BookSerializer1(instance=book)  # 这里设置了主键值，单条记录many不需要写         return Response(ser.data)     def delete(self,request,pk):         res = Book.objects.filter(pk=pk).delete()         print(res) # (1, {'app01.Book': 1})         # res是影响的行数         if res[0]>0:             return Response({'code': 100, 'msg': '删除成功'})         else:             return  Response({'code': 103, 'msg': '要删除的数据不存在'})      # 反序列化修改     def put(self,request,pk):         # 修改处理单条数据用过pk确定求改哪条数据         book = Book.objects.filter(pk=pk).first()         # 序列化器类实例化需要传入instance，data才表示修改         ser = BookSerializer1(instance=book,data=request.data)         if ser.is_valid():             # 重写update方法才能存入             ser.save()             return Response(ser.data)         return Response({'code':101,'msg':'校验未通过','error':ser.errors})</code></pre> <h3 id="路由"><strong>路由</strong></h3> <pre><code class="language-python">path('books1/', views.BookView1.as_view()), path('books1/<int:pk>', views.BookDetailView1.as_view()),</code></pre> <h3 id="模型"><strong>模型</strong></h3> <pre><code class="language-python">from django.db import models class Book(models.Model):     title = models.CharField(max_length=32)     price = models.DecimalField(max_digits=5,decimal_places=2)     authors = models.CharField(max_length=32)</code></pre> <h2 id="多表操作">多表操作</h2> <h3 id="modelspy"><strong>models.py</strong></h3> <pre><code class="language-python">from django.db import models    # build four model tables  class Book(models.Model):     name = models.CharField(max_length=32)     price = models.DecimalField(decimal_places=2, max_digits=5)     publish = models.ForeignKey(to='Publish', on_delete=models.CASCADE)     authors = models.ManyToManyField(to='Author')      def __str__(self):         return self.name      # 自定制字段     @property     def publish_detail(self):         return {'name': self.publish.name, 'addr': self.publish.city}      @property     def author_list(self):         l = []         print(self.authors.all()) # <QuerySet [<Author: Author object (1)>, <Author: Author object (2)>]>         for author in self.authors.all():             print(author.author_detail) # AuthorDetail object (1)             l.append({'name': author.name, 'age': author.age, 'addr': author.author_detail.addr})         return l   class Author(models.Model):     name = models.CharField(max_length=32)     age = models.IntegerField()     author_detail = models.OneToOneField(to='AuthorDetail', on_delete=models.CASCADE)      def __str__(self):         return self.name      @property     def authordetail_info(self):         return {'phone':self.author_detail.telephone,'addr':self.author_detail.addr}   class AuthorDetail(models.Model):     telephone = models.BigIntegerField()     addr = models.CharField(max_length=64)   class Publish(models.Model):     name = models.CharField(max_length=32)     city = models.CharField(max_length=32)     email = models.EmailField()</code></pre> <h3 id="serializerpy"><strong>serializer.py</strong></h3> <pre><code class="language-python">from app01 import models from rest_framework import serializers   # 书序列化器 class BookSerializer(serializers.ModelSerializer):     class Meta:         # 指定和哪个表有关系         model = models.Book         # fields = '__all__'         fields = ['id','name','price','publish','authors','publish_detail','author_list']         # 将关联表的信息全部取出来，不推荐使用         # depth = 1          extra_kwargs = {             'publish':{'write_only':True},             'authors':{'write_only':True}         }  # 作者序列化器 class AuthorSerializer(serializers.ModelSerializer):     class Meta:         # 指定和哪个表有关系         model = models.Author         # fields = '__all__'         fields = ['id', 'name', 'age', 'author_detail', 'authordetail_info']         extra_kwargs = {             'author_detail': {'write_only': True},         }   # 作者详情序列化器 class AuthorDetailSerializer(serializers.ModelSerializer):     class Meta:         # 指定和哪个表有关系         model = models.AuthorDetail         fields = '__all__'  # 出版社序列化器 class PublishSerializer(serializers.ModelSerializer):     class Meta:         # 指定和哪个表有关系         model = models.Publish         fields = '__all__'</code></pre> <h3 id="viewspy"><strong>views.py</strong></h3> <pre><code class="language-python">from rest_framework.response import Response from rest_framework.views import APIView  from app01 import models from app01 import serializer   # 书视图类 class BookView(APIView):     def get(self, requets):         # 序列化         book_list = models.Book.objects.all()         # 序列化多条数据many=True         ser = serializer.BookSerializer(instance=book_list, many=True)         return Response(ser.data)      def post(self, request):         # 获取反序列化数据         ser = serializer.BookSerializer(data=request.data)         if ser.is_valid():             # 校验通过存入数据库，不需要重写create方法了             ser.save()             return Response({'code': 100, 'msg': '新增成功', 'data': ser.data})         # 校验失败         return Response({'code': 101, 'msg': '校验未通过', 'error': ser.errors})   class BookViewDetail(APIView):     def get(self, request, pk):         book = models.Book.objects.filter(pk=pk).first()         ser = serializer.BookSerializer(instance=book)         return Response(ser.data)      def put(self, request, pk):         book = models.Book.objects.filter(pk=pk).first()         # 修改，instance和data都要传         ser = serializer.BookSerializer(instance=book, data=request.data)         if ser.is_valid():             # 校验通过修改，不需要重写update             ser.save()             return Response({'code:': 100, 'msg': '修改成功', 'data': ser.data})         # 校验不通过         return Response({'code:': 102, 'msg': '校验未通过，修改失败', 'error': ser.errors})      def delete(self, request, pk):         models.Book.objects.filter(pk=pk).delete()         return Response({'code': 100, 'msg': '删除成功'})   # 作者视图类 class AuthorView(APIView):     def get(self, requets):         # 序列化         author_list = models.Author.objects.all()         # 序列化多条数据many=True         ser = serializer.AuthorSerializer(instance=author_list, many=True)         return Response(ser.data)      def post(self, request):         # 获取反序列化数据         ser = serializer.AuthorSerializer(data=request.data)         if ser.is_valid():             # 校验通过存入数据库，不需要重写create方法了             ser.save()             return Response({'code': 100, 'msg': '新增成功', 'data': ser.data})         # 校验失败         return Response({'code': 101, 'msg': '校验未通过', 'error': ser.errors})   class AuthorViewDetail(APIView):     def get(self, request, pk):         book = models.Author.objects.filter(pk=pk).first()         ser = serializer.AuthorSerializer(instance=book)         return Response(ser.data)      def put(self, request, pk):         book = models.Author.objects.filter(pk=pk).first()         # 修改，instance和data都要传         ser = serializer.AuthorSerializer(instance=book, data=request.data)         if ser.is_valid():             # 校验通过修改，不需要重写update             ser.save()             return Response({'code:': 100, 'msg': '修改成功', 'data': ser.data})         # 校验不通过         return Response({'code:': 102, 'msg': '校验未通过，修改失败', 'error': ser.errors})      def delete(self, request, pk):         models.Author.objects.filter(pk=pk).delete()         return Response({'code': 100, 'msg': '删除成功'})   # 作者详情视图类 class AuthorDetailView(APIView):     def get(self, requets):         # 序列化         author_list = models.AuthorDetail.objects.all()         # 序列化多条数据many=True         ser = serializer.AuthorDetailSerializer(instance=author_list, many=True)         return Response(ser.data)      def post(self, request):         # 获取反序列化数据         ser = serializer.AuthorDetailSerializer(data=request.data)         if ser.is_valid():             # 校验通过存入数据库，不需要重写create方法了             ser.save()             return Response({'code': 100, 'msg': '新增成功', 'data': ser.data})         # 校验失败         return Response({'code': 101, 'msg': '校验未通过', 'error': ser.errors})   class OneAuthorViewDetail(APIView):     def get(self, request, pk):         book = models.AuthorDetail.objects.filter(pk=pk).first()         ser = serializer.AuthorDetailSerializer(instance=book)         return Response(ser.data)      def put(self, request, pk):         book = models.AuthorDetail.objects.filter(pk=pk).first()         # 修改，instance和data都要传         ser = serializer.AuthorDetailSerializer(instance=book, data=request.data)         if ser.is_valid():             # 校验通过修改，不需要重写update             ser.save()             return Response({'code:': 100, 'msg': '修改成功', 'data': ser.data})         # 校验不通过         return Response({'code:': 102, 'msg': '校验未通过，修改失败', 'error': ser.errors})      def delete(self, request, pk):         models.AuthorDetail.objects.filter(pk=pk).delete()         return Response({'code': 100, 'msg': '删除成功'})  # 出版社视图类 class PublishView(APIView):     def get(self, requets):         # 序列化         author_list = models.Publish.objects.all()         # 序列化多条数据many=True         ser = serializer.PublishSerializer(instance=author_list, many=True)         return Response(ser.data)      def post(self, request):         # 获取反序列化数据         ser = serializer.PublishSerializer(data=request.data)         if ser.is_valid():             # 校验通过存入数据库，不需要重写create方法了             ser.save()             return Response({'code': 100, 'msg': '新增成功', 'data': ser.data})         # 校验失败         return Response({'code': 101, 'msg': '校验未通过', 'error': ser.errors})   class PublishViewDetail(APIView):     def get(self, request, pk):         book = models.Publish.objects.filter(pk=pk).first()         ser = serializer.PublishSerializer(instance=book)         return Response(ser.data)      def put(self, request, pk):         book = models.Publish.objects.filter(pk=pk).first()         # 修改，instance和data都要传         ser = serializer.PublishSerializer(instance=book, data=request.data)         if ser.is_valid():             # 校验通过修改，不需要重写update             ser.save()             return Response({'code:': 100, 'msg': '修改成功', 'data': ser.data})         # 校验不通过         return Response({'code:': 102, 'msg': '校验未通过，修改失败', 'error': ser.errors})      def delete(self, request, pk):         models.Publish.objects.filter(pk=pk).delete()         return Response({'code': 100, 'msg': '删除成功'})</code></pre> <h3 id="urlspy">urls.py</h3> <pre><code class="language-python">from django.contrib import admin from django.urls import path  from app01 import views  urlpatterns = [     path('admin/', admin.site.urls),     # 书     path('books/', views.BookView.as_view()),     path('books/<int:pk>', views.BookViewDetail.as_view()),      # 作者     path('authors/', views.AuthorView.as_view()),     path('authors/<int:pk>', views.AuthorViewDetail.as_view()),      # 作者详情     path('authorsdetail/', views.AuthorDetailView.as_view()),     path('authorsdetail/<int:pk>', views.OneAuthorViewDetail.as_view()),      # 出版社     path('publish/', views.PublishView.as_view()),     path('publishdetail/<int:pk>', views.PublishViewDetail.as_view()), ]</code></pre> <p></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8ade4232e195af60327dbf751d691566.jpg" alt="ModelSerializer序列化器实战"></p> <h3 id="优化操作">优化操作</h3> <blockquote> <p>我们知道作者表和作者详情表的表关系是一对一的关系，那么新增数据的时候，就得先新增作者详情表，再增作者表的数据，但是在实际生活中，用户不知道表关系这码事，为了体验更好，可以重写create方法，同时存两个表的内容，给用户的感觉就是操作了一张表</p> </blockquote> <pre><code class="language-python">'''优化作者表的序列化器''' # 作者序列化器 class AuthorSerializer(serializers.ModelSerializer):     class Meta:         # 指定和哪个表有关系         model = models.Author         # fields = '__all__'         fields = ['id', 'name', 'age', 'telephone', 'addr','authordetail_info']      # 重写字段telephone和addr     telephone = serializers.CharField(write_only=True)     addr = serializers.CharField(write_only=True,max_length=8,required=False)       # 重写create，操作两个表     def create(self, validated_data):         # 先存作者详情         authordetail = models.AuthorDetail.objects.create(telephone=validated_data.get('telephone'),addr=validated_data.get('addr'))         # 存作者表         author = models.Author.objects.create(author_detail=authordetail,name=validated_data.get('name'),age=validated_data.get('age'))         # 这样只返回author对象就行，直接存了两个表,返回反序列化的对象         return author</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/cf315856e7b22211f022e81d0453f841.jpg" alt="ModelSerializer序列化器实战"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/d74dd5235b50e4caefe6218d2cc4ebe2.jpg" alt="ModelSerializer序列化器实战"></p> <p><strong>Postman自行测试，我测了测都能用，有问题望指正~</strong></p> <p><strong>注意</strong><br /> 如果实际项目中不需要操作数据库可以使用APIView，如果操作数据库那么推荐使用GenericAPIView</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-40.htm">分布式应用运行时 Dapr 1.7 发布</a></p>
                                        <p>下一个：<a href="/html/category/article-42.htm">PHP通过引用返回</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1953.htm">springboot2+spring-retry配置及使用</a></h4>
                <p>springboot2+spring-retry配置及使用  参考 1 配置依赖 2 启动类开启retry 3 使用   @Retryable和@Backoff @Recover 使用样例     参</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4323.htm">四川红烧鱼的做法 最正宗的做法(四川红烧鱼怎么做好吃又简单视频教程)</a></h4>
                <p>各位同学好，相信还有很多人对于正宗四川怎么做的相关问题不太了解，今天给各位分享一下关于正宗四川红烧鱼怎么做的解答，希望可以帮助到大家，下面一起来看看吧！！本文目录导读：正宗四川红烧鱼怎么做正宗四川红烧</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4442.htm">动物疫苗价格表图片高清大全集（动物疫苗价格查询）</a></h4>
                <p>摘要：       今天给各位分享动物疫苗价格表图片高清大全集的知识，其中也会对动物疫苗价格查询进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、狗狗打疫苗一般.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4585.htm">宠物疫苗猫咪可以打吗（猫咪打疫苗宠物店可以打吗?）</a></h4>
                <p>摘要：       本篇文章给大家谈谈宠物疫苗猫咪可以打吗，以及猫咪打疫苗宠物店可以打吗?对应的知识点，希望对各位有所帮助，不要忘了收藏本站喔。本文目录一览：1、两个月的小猫能打狂犬疫苗吗?...  </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4514.htm">戴尔vostro不认硬盘（戴尔 不识别硬盘）</a></h4>
                <p>摘要：       本篇文章给大家谈谈戴尔vostro不认硬盘，以及戴尔 不识别硬盘对应的知识点，希望对各位有所帮助，不要忘了收藏本站喔。本文目录一览：1、戴尔笔记本电脑光驱位硬盘有时不能识别... </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4095.htm">Docker基础 — 36、CMD指令和ENTRYPOINT指令的区别</a></h4>
                <p>目录  1、CMD指令和ENTRYPOINT指令说明 2、CMD指令只有最后一条生效的原因 3、CMD指令演示 4、ENTRYPOINT指令演示 5、总结   CMD指令和ENTRYPOINT指令作用</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-5569.htm">襄阳免费领养宠物猫信息 襄阳免费领养宠物猫信息网</a></h4>
                <p>摘要：       大家好，今天小编关注到一个比较有意思的话题，就是关于襄阳免费领养宠物猫信息的问题，于是小编就整理了4个相关介绍襄阳免费领养宠物猫信息的解答，让我们一起看看吧。襄樊有孤儿院吗？正常收</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2530.htm">MySQL中的TEXT数据类型是什么？</a></h4>
                <p>TEXT数据对象对于在MySQL数据库中存储长格式文本字符串很有用。以下是关于TEXT数据类型的一些要点-   TEXT是列类型的族，旨在用作大容量字符存储。   实际的TEXT列类型为四种类型-TI</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-5570.htm">动物疫苗空瓶无害化处理措施（动物疫苗空瓶无害化处理措施有哪些）</a></h4>
                <p>摘要：       本篇文章给大家谈谈动物疫苗空瓶无害化处理措施，以及动物疫苗空瓶无害化处理措施有哪些对应的知识点，希望对各位有所帮助，不要忘了收藏本站喔。本文目录一览：1、无害化处理方式有哪些...</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-3730.htm">vue-v-model 常用修饰符</a></h4>
                <p>&lt;div id="app"&gt;     &lt;h1&gt;懒加载lazy&lt;/h1&gt;     &lt;h3&gt;不让输入框实时同步&lt;/h3&gt;     &lt;inp</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">36</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>