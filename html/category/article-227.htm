<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-227.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Spring Boot四大神器之CLI - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Spring Boot四大神器之CLI</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>目录</h3> <ul> <li><a href="#_2" rel="nofollow"></a></li> <li> <ul> <li><a href="#_3" rel="nofollow"></a></li> <li> <ul> <li><a href="#_4" rel="nofollow"></a></li> </ul> </li> </ul> </li> <li><a href="#1_Spring_Boot_CLI_6" rel="nofollow">1. Spring Boot CLI简介：</a></li> <li><a href="#2_CLI_22" rel="nofollow">2. 安装CLI:</a></li> <li> <ul> <li><a href="#_26" rel="nofollow">手动安装：</a></li> </ul> </li> <li><a href="#3_Groovy_84" rel="nofollow">3. 运行Groovy脚本</a></li> <li><a href="#4_CLICLI_153" rel="nofollow">4. CLI运行原理说明：（CLI帮我们做了什么？）</a></li> </ul> </div> <h1><a id="_2" rel="nofollow"></a></h1> <h2><a id="_3" rel="nofollow"></a></h2> <h3><a id="_4" rel="nofollow"></a></h3> <h1> <a id="1_Spring_Boot_CLI_6" rel="nofollow"></a>1. Spring Boot CLI简介：</h1> <p>官网地址：<br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.spring.io/spring-boot/docs/current/reference/html/cli.html#cli"  rel="nofollow">https://docs.spring.io/spring-boot/docs/current/reference/html/cli.html#cli</a>.</p> <p>安装官网地址: <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started.installing.cli"  rel="nofollow">https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started.installing.cli</a>.</p> <p>Spring Boot CLI 是一个命令行工具，如果您想要快速开发spring应用程序，您可以使用该工具。它可以让你运行Groovy脚本，这意味着你有一个熟悉的java语法，没有这么多的样板代码。您也可以启动一个新项目或为它编写自己的命令。</p> <p>Spring Boot CLI是一种快速开发Spring应用的命令行界面。CLI就是Command Line Interface的简写，CLI利用了Spring Boot的起步依赖和自动配置，可以让人们专注于代码本身，而不用完成繁琐的配置。实际上Spring Boot的本质就是用来简化繁琐的Spring配置，不过CLI的使用真的是让开发Spring程序变得非常快速。</p> <p>CLI可以检测到代码中使用的类，知道需要给Classpath中添加的哪些起步依赖才能让程序运行起来。而且当添加完依赖之后就会完成自动配置，确保启用后DispatcherServlet和Spring MVC，这样就可以响应HTTP请求了。所以说想要用CLI来编写一个Spring的“HelloWorld”是非常快速的。分别介绍一下Windows和Linux的安装。</p> <h1> <a id="2_CLI_22" rel="nofollow"></a>2. 安装CLI:</h1> <p>四种安装方法：这里我们使用通用的手动安装。</p> <h2> <a id="_26" rel="nofollow"></a>手动安装：</h2> <p><mark>手动安装在Windows, Mac, Linux系统都可以使用</mark><br /> 您可以从spring软件存储库下载 Spring CLI 安装包：</p> <p><strong>（1）下载：</strong><br /> widows版本：<br /> spring-boot-cli-2.5.6-bin.zip：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://repo.spring.io/ui/native/release/org/springframework/boot/spring-boot-cli/2.5.6"  rel="nofollow">https://repo.spring.io/ui/native/release/org/springframework/boot/spring-boot-cli/2.5.6</a>.</p> <p>linux版本：<br /> spring-boot-cli-2.5.6-bin.tar.gz：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://repo.spring.io/ui/native/release/org/springframework/boot/spring-boot-cli/2.5.6"  rel="nofollow">https://repo.spring.io/ui/native/release/org/springframework/boot/spring-boot-cli/2.5.6</a>.</p> <p>INSTALL.txt安装文档如下：</p> <pre><code>先决条件 ------------- Spring Boot CLI需要Java JDK v1.8或以上版本才能运行。Groovy v $ {groovy.version}  打包为这个发行版的一部分，因此不需要安装(忽略现有的Groovy安装)。  CLI将使用它在路径上找到的任何JDK，以检查您是否有合适的JDK  你应该运行的版本:  java - version  或者，您可以设置JAVA_HOME环境变量以指向合适的JDK。  环境变量：(下载之后进行解压到一个目录，然后将解压后的bin目录添加到Path环境变量即可。)  检查你的安装 -------------------------- 测试命令行是否安装成功，可以执行以下命令: spring --version </code></pre> <p><strong>（2）解压：</strong></p> <p>当你完成需要的归档文件下载到你本地计算机后，解压到c/d盘的不带中文的目录下。<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/5aa2d57453e76dd15c0cf97c496b65e1.jpg" alt="Spring Boot四大神器之CLI"></p> <p><strong>（3）配置系统环境变量：</strong></p> <p>然后将解压后的bin目录添加到Path环境变量即可:</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/36516ff068d42528861991f10cdeaf83.jpg" alt="Spring Boot四大神器之CLI"></p> <p><strong>（4）测试是否安装成功：</strong><br /> win+r后输入cmd:出现windows控制台，输入：spring --version</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/569e121628a8f31cd46f74d642c6f117.jpg" alt="Spring Boot四大神器之CLI"></p> <h1> <a id="3_Groovy_84" rel="nofollow"></a>3. 运行Groovy脚本</h1> <p>您可以使用命令编译和运行 Groovy 源代码。springboot CLI 是完全自成一体的，因此您不需要任何外部 Groovy 安装。</p> <p>在完成了Spring Boot CLI的安装之后，我们来试试使用它来快速的构建一个Spring Boot应用，方法很简单，只需要如下操作：</p> <p><strong>第一步：新建一个Groovy脚本，hello.groovy，内容如下：</strong></p> <pre><code>@RestController class ThisWillActuallyRun { @RequestMapping("/") String home() { "Hello World!--------" } } </code></pre> <p><strong>或者Java版本，hello.java文件内容如下：</strong></p> <pre><code>@RestController public class Hello {     @RequestMapping("/hello")     public String hello() {         return "Hello World Java!";     } }  </code></pre> <p>如图我的hello.groovy文件存放的位置：（在hello.groovy文件所在目录下输入cmd）<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/ef7a640b40e13c91ffea166fe7c381ef.jpg" alt="Spring Boot四大神器之CLI"></p> <p><strong>第二步：使用spring命令运行该Groovy脚本，具体如下：</strong></p> <p>要编译和运行应用程序，键入以下命令：</p> <pre><code>spring run hello.groovy </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/3aadbccdeecb73a3a8a5fbb2a811af43.jpg" alt="Spring Boot四大神器之CLI"></p> <p>扩展;<br /> 要将命令行参数传递给应用程序，请使用将命令与"spring"命令参数分开，如下示例所示：–</p> <blockquote> <p>spring run hello.groovy – --server.port=9000</p> </blockquote> <p>要设置 JVM 命令行参数，您可以使用环境变量，如下示例所示：JAVA_OPTS:</p> <blockquote> <p>JAVA_OPTS=-Xmx1024m spring run hello.groovy</p> </blockquote> <p>注意：当在Windows上设置时, 请务必引用整个指令，例如 。这样做可以确保将值正确传递到流程中。JAVA_OPTSset “JAVA_OPTS=-Xms256m -Xmx2048m”</p> <p><strong>第三步：网页测试访问：http://localhost:8080/</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/c7791f2522237eb7b738cac409840637.jpg" alt="Spring Boot四大神器之CLI"><br /> 访问controller成功；</p> <p><strong>测试java版本：http://localhost:8080/hello</strong><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/0d0f15efea22945f7af7cf26cc5ddba6.jpg" alt="Spring Boot四大神器之CLI"></p> <p>访问controller成功；</p> <h1> <a id="4_CLICLI_153" rel="nofollow"></a>4. CLI运行原理说明：（CLI帮我们做了什么？）</h1> <p><strong>（1）推断"抓"依赖性：</strong></p> <p>标准 Groovy 包含一个注释，允许您声明对第三方库的依赖性。这种有用的技术允许Groovy下载jar的方式与maven或Gradle一样，但无需您使用构建工具@Grab</p> <p>Spring Boot 进一步扩展了此技术，并尝试根据您的代码推断出哪些库要"抓取"。例如，由于以前显示的代码使用注释，因此springboot可抓取"tomcat"和"spring MVC"。WebApplication@RestController</p> <p><strong>（2）推断"抓取"坐标：</strong></p> <p>springboot扩展 Groovy 的标准支持，允许您指定没有group或版本的依赖（例如）。这样做会查阅 Spring Boot 的默认依赖性元数据，以推断出该产品体的组和版本依赖。@Grab@Grab(‘freemarker’)</p> <p><strong>（3）自动主方法：</strong></p> <p>与等效的 Java 应用程序不同，您不需要在脚本中包含一种方法。主方法是自动创建的，自动帮我们创建了如下代码：</p> <blockquote> <p>public static void main(String[] args)GroovySpringApplicationsource</p> </blockquote> <p><strong>（4）自定义依赖性管理：</strong></p> <p>默认情况下，CLI 在解决依赖关系时使用所申报的依赖管理。额外的依赖管理，覆盖默认依赖管理，可以通过使用注释进行配置。注释值应指定一个或多个 Maven BOM 的坐标:</p> <blockquote> <p>spring-boot-dependencies@Grab@DependencyManagementBomgroupId:artifactId:version</p> </blockquote> <p>例如，请考虑以下声明：</p> <blockquote> <p>@DependencyManagementBom(“com.example.custom-bom:1.0.0”)</p> </blockquote> <p>当您指定多个 BOM 时，它们将按您声明它们的顺序应用，如下示例所示：</p> <pre><code>@DependencyManagementBom([     "com.example.custom-bom:1.0.0",     "com.example.another-bom:1.0.0"]) </code></pre> </p></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-226.htm">Carson带你学设计模式：单例模式（Singleton）</a></p>
                                        <p>下一个：<a href="/html/category/article-228.htm"># kubernetes调度之nodeName与NodeSelector</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-242.htm">KestrelServer网络连接的创建详解</a></h4>
                <p>《注册监听终结点（Endpoint）》已经详细讲述了如何使用KestrelServer，现在我们来简单聊聊这种处理器的总体设计和实现原理。当KestrelServer启动的时候，注册的每个终结点将转换</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-256.htm">feign post 参数对象不加@RequestBody的用法</a></h4>
                <p>最近在做小程序调支付服务接口的一个功能，这个feign接口传参真的太费事。 代码我就改造了下，不直接上真实代码。 比如小程序调支付服务的订单查询接口，支付服务那边的controller的订单查询方法是</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-217.htm">Vuex入门mapState, mapGetters, mapMutations, mapActions详解终结篇带源码</a></h4>
                <p>目录  知识不足的地方赶快点击学习呦~~~  Vuex入门(一)—— state,mapState,…mapState对象展开符详解Vuex入门(二)—— mutations详解Vuex入门(三)——</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-208.htm">PHP字符串运算符详解</a></h4>
                <p>介绍 有两个用于处理字符串数据类型的运算符。在&nbsp;“”（点）运算符是PHP的串联运算符。两个字符串操作数结合在一起（右手字符串附加在左手字符串上），并返回一个新字符串。PHP还具有&nbsp;</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-261.htm">Java 集合框架ArrayList 储存自定义数组</a></h4>
                <p>package LinkedList;  import java.util.ArrayList; import java.util.Iterator;  import p.bean.Person;  </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-260.htm">Vue中 Vue.prototype 详解及使用</a></h4>
                <p>我们可能会在很多组件里用到数据/实用工具，但是不想污染全局作用域。这种情况下，可以通过在原型上定义它们使其在每个 Vue 的实例中可用。 1. 基本示例 在main.js中添加一个变量到 Vue.pr</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-262.htm">Python 认识列表和元组</a></h4>
                <p>列表和元组，都是一个可以放置任何数据类型的有序集合。   列表的特性 动态的（mutable）：长度大小不固定，可以随意地增加、删减或者改变元素。 会修改原来列表中的元素，而不会创建新的列表。 # 新</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-235.htm">lombok和JPA的死递归</a></h4>
                <p>这是一个Bug JPA我觉得是一个封装的很棒的框架，至于说很臃肿这个事，我觉得在需求需要很多复杂查询的时候，不适合用JPA。因为它的封装太棒了，以致于增强了表和实体类之间的耦合。不过在一些简单查询的部</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-248.htm">SpringBoot中处理的转发与重定向</a></h4>
                <p>转发：一次请求，服务器内部调用另外的组件处理，request和response可以共用，有限制性，只能转发到本应用中的某些资源，页面或者controller请求 课可以访问WEB-INF目录下面的页面</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-247.htm">EFI系统分区必须挂载到/boot/efi其中之一</a></h4>
                <p>最近在windows 8.1系统上使用U盘安装centos8双系统，硬盘分区格式是ntfs，mbr引导；选择自动分区时出现如下错误  （Failed to find a suitable stage1</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>