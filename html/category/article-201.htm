<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-201.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>教你在 Java 中实现 Dijkstra 最短路算法的方法_java - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">教你在 Java 中实现 Dijkstra 最短路算法的方法_java</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">定义</a></li> <li><a href="#_label1" rel="nofollow">带权有向图的实现</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_1_0" rel="nofollow">带权有向边</a></li> <li><a href="#_lab2_1_1" rel="nofollow">带权有向图</a></li> </ul> <li><a href="#_label2" rel="nofollow">最短路算法</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_2_2" rel="nofollow">API</a></li> <li><a href="#_lab2_2_3" rel="nofollow">Dijkstra 算法</a></li> </ul> <li><a href="#_label3" rel="nofollow">算法流程</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_3_4" rel="nofollow">最小索引优先队列</a></li> <li><a href="#_lab2_3_5" rel="nofollow">实现算法</a></li> </ul> <li><a href="#_label4" rel="nofollow">后记</a></li> <ul class="second_class_ul"></ul> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>定义</h2> <p>最短路问题的定义为：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/826879e05d6250ecebf02f03c436ebc0.jpg"></p> <p>下图左侧是一幅带权有向图，以顶点 0 为起点到各个顶点的最短路径形成的最短路径树如下图右侧所示：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/5560c928257f28e9aaaa43fc2d0de059.jpg"></p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>带权有向图的实现</h2> <p>在实现最短路算法之前需要先实现带权有向图。在上一篇博客 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.jb51.net/article/243529.htm"  target="_blank" rel="nofollow">《如何在 Java 中实现最小生成树算法》</a> 中我们实现了带权无向图，只需一点修改就能实现带权有向图。</p> <p class="maodian"><a name="_lab2_1_0" rel="nofollow"></a></p> <h3>带权有向边</h3> <p>首先应该实现带权有向图中的边 <code>DirectedEdge</code>，这个类有三个成员变量：指出边的顶点 <code>v</code>、边指向的顶点 <code>w</code> 和边的权重 <code>weight</code>。代码如下所示：</p> <div class="ay1code"> <pre class="brush:java;">package com.zhiyiyo.graph;  /**   * 带权有向边   */  public class DirectedEdge {      int v, w;      double weight;      public DirectedEdge(int v, int w, double weight) {          this.v = v;          this.w = w;          this.weight = weight;      }      public int from() {          return v;      public int to() {          return w;      public double getWeight() {          return weight;      @Override      public String toString() {          return String.format("%d-&gt;%d(%.2f)", v, w, weight);  }  </pre> </div> <p class="maodian"><a name="_lab2_1_1" rel="nofollow"></a></p> <h3>带权有向图</h3> <p>带权有向图的实现非常简单，只需将带权无向图使用的 <code>Edge</code> 类换成 <code>DirectedEdge</code> 类，并作出少许调整即可：</p> <div class="ay1code"> <pre class="brush:java;">package com.zhiyiyo.graph;  import com.zhiyiyo.collection.stack.LinkStack;  import com.zhiyiyo.collection.stack.Stack;  public class WeightedDigraph {      private final int V;      protected int E;      protected LinkStack&lt;DirectedEdge&gt;[] adj;      public WeightedDigraph(int V) {          this.V = V;          adj = (LinkStack&lt;DirectedEdge&gt;[]) new LinkStack[V];          for (int i = 0; i &lt; V; i++) {              adj[i] = new LinkStack&lt;&gt;();          }      }      public int V() {          return V;      }      public int E() {          return E;      }      public void addEdge(DirectedEdge edge) {          adj[edge.from()].push(edge);          E++;      }      public Iterable&lt;DirectedEdge&gt; adj(int v) {          return adj[v];      }      public Iterable&lt;DirectedEdge&gt; edges() {          Stack&lt;DirectedEdge&gt; edges = new LinkStack&lt;&gt;();          for (int v = 0; v &lt; V; ++v) {              for (DirectedEdge edge : adj(v)) {                  edges.push(edge);              }          }          return edges;      }  }  </pre> </div> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>最短路算法</h2> <p class="maodian"><a name="_lab2_2_2" rel="nofollow"></a></p> <h3>API</h3> <p>最短路算法应该支持起始点 \(v_s\) 到任意顶点 \(v_t\) 的最短距离和最短路径的查询：</p> <div class="ay1code"> <pre class="brush:java;">package com.zhiyiyo.graph;  import com.zhiyiyo.collection.stack.LinkStack;  import com.zhiyiyo.collection.stack.Stack;  public class WeightedDigraph {      private final int V;      protected int E;      protected LinkStack&lt;DirectedEdge&gt;[] adj;      public WeightedDigraph(int V) {          this.V = V;          adj = (LinkStack&lt;DirectedEdge&gt;[]) new LinkStack[V];          for (int i = 0; i &lt; V; i++) {              adj[i] = new LinkStack&lt;&gt;();          }      }      public int V() {          return V;      public int E() {          return E;      public void addEdge(DirectedEdge edge) {          adj[edge.from()].push(edge);          E++;      public Iterable&lt;DirectedEdge&gt; adj(int v) {          return adj[v];      public Iterable&lt;DirectedEdge&gt; edges() {          Stack&lt;DirectedEdge&gt; edges = new LinkStack&lt;&gt;();          for (int v = 0; v &lt; V; ++v) {              for (DirectedEdge edge : adj(v)) {                  edges.push(edge);              }          return edges;  }  </pre> </div> <p class="maodian"><a name="_lab2_2_3" rel="nofollow"></a></p> <h3>Dijkstra 算法</h3> <p>我们可以使用一个距离数组 <code>distTo[]</code> 来保存起始点 \(v_s\) 到其余顶点 \(v_t\) 的最短路径，且 <code>distTo[]</code> 数组满足以下条件：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/7d71061681153df25ade354c067cf9e8.jpg"></p> <p>可以使用 <code>Double.POSITIVE_INFINITY</code> 来表示无穷大，有了这个数组之后我们可以实现 <code>ShortestPath</code> 前两个方法：</p> <div class="ay1code"> <pre class="brush:java;">package com.zhiyiyo.graph;  public class DijkstraSP implements ShortestPath {      private double[] distTo;      @Override      public double distTo(int v) {          return distTo[v];      }      public boolean hasPathTo(int v) {          return distTo[v] &lt; Double.POSITIVE_INFINITY;  }  </pre> </div> <p>为了实现保存 \(v_s\) 到 \(v_t\) 的最短路径，可以使用一个边数组 <code>edgeTo[]</code>，其中 <code>edgeTo[v] = e_wv</code> 表示要想到达 \(v_t\)，需要先经过顶点 \(v_w\)，接着从 <code>edgeTo[w]</code>获取到达 \(v_w\) 之前需要到达的上一个节点，重复上述步骤直到发现 <code>edgeTo[i] = null</code>，这时候就说明我们回到了 \(v_s\)。 获取最短路径的代码如下所示：</p> <div class="ay1code"> <pre class="brush:java;">@Override  public Iterable&lt;DirectedEdge&gt; pathTo(int v) {      if (!hasPathTo(v)) return null;      Stack&lt;DirectedEdge&gt; path = new LinkStack&lt;&gt;();      for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) {          path.push(e);      }      return path;  }  </pre> </div> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>算法流程</h2> <p>虽然我们已经实现了上述接口，但是如何得到 <code>distTo[]</code> 和 <code>edgeTo[]</code> 还是个问题，这就需要用到 Dijkstra 算法了。算法的思想是这样的：</p> <ul> <li>初始化 <code>distTo[]</code> 使得除了 <code>distTo<span class="show-more" title="文字折叠"><span><i class="be be-squareplus"></i>展开</span></span> = 0</code> 外，其余的元素都为 <code>Double.POSITIVE_INFINITY</code>。同时初始化 <code>edgeTo[]</code> 的每个元素都是 <code>null</code>；</li> <li>将顶点 s 的所有相邻顶点 \(v_j\) 加入集合 \(V'\) 中，设置 <code>distTo[j] = l_sj</code> 即初始化最短距离为邻边的权重；</li> <li>从 \(V'\) 中取出距离最短即 <code>distTo[m]</code> 最小的顶点 \(v_m\)，遍历 \(v_m\) 的所有邻边 \((v_m, v_w)\)，如果有 \(l_{mw}+l_{sw}&lt;l_{sw}\)，就说明从 \(v_s\) 走到 \(v_m\) 再一步走到 \(v_w\) 距离最短，我们就去更新 <code>distTo[m]</code>，同时将 \(v_w\) 添加到 \(V'\) 中（如果 \(v_w\) 不在的话）；</li> </ul> <p>重复上述过程直到 \(V'\) 变为空，我们就已经找到了所有 \(v_s\) 可达的顶点的最短路径。</p> <p>上述过程中有个地方会影响算法的性能，就是如何从 \(V'\) 中取出最小距离对应的顶点 \(v_m\)。如果直接遍历 \(V'\) 最坏情况下时间复杂度为 \(O(|V|)\)，如果换成最小索引优先队列则可以将时间复杂度降至 \(O(\log|V|)\)。</p> <p class="maodian"><a name="_lab2_3_4" rel="nofollow"></a></p> <h3>最小索引优先队列</h3> <p>上一篇博客<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.jb51.net/article/243529.htm"  target="_blank" rel="nofollow"> 《如何在 Java 中实现最小生成树算法》</a> 中介绍了最小堆的使用，最小堆可以在对数时间内取出数据集合中的最小值，对应到最短路算法中就是最短路径。但是有一个问题，就是我们想要的是最短路径对应的那个顶点 \(v_m\)，只使用最小堆是做不到这一点的。如何能将最小堆中的距离值和顶点进行绑定呢？这就要用到索引优先队列。</p> <p>索引优先队列的 API 如下所示，可以看到每个元素 <code>item</code> 都和一个索引 <code>k</code> 进行绑定，我们可以通过索引 <code>k</code> 读写优先队列中的元素。想象一下堆中的所有元素放在一个数组 <code>pq</code> 中，索引优先队列可以做到在对数时间内取出 <code>pq</code> 的最小值。</p> <div class="ay1code"> <pre class="brush:java;">package com.zhiyiyo.collection.queue;  /**   * 索引优先队列   */  public interface IndexPriorQueue&lt;K extends Comparable&lt;K&gt;&gt; {      /**       * 向堆中插入一个元素       *       * @param k 元素的索引       * @param item 插入的元素       */      void insert(int k, K item);       * 修改堆中指定索引的元素值       * @param item 新的元素值      void change(int k, K item);       * 向堆中插入或修改元素      void set(int k, K item);       * 堆是否包含索引为 k 的元素       * @param k 索引       * @return 是否包含      boolean contains(int k);       * 弹出堆顶的元素并返回其索引       * @return 堆顶元素的索引      int pop();       * 弹出堆中索引为 k 为元素       * @return 索引对应的元素      K delete(int k);       * 获取堆中索引为 k 的元素，如果 k 不存在则返回 null       * @return 索引为 k 的元素      K get(int k);       * 获取堆中的元素个数      int size();       * 堆是否为空      boolean isEmpty();  }  </pre> </div> <p>实现索引优先队列比优先队列麻烦一点，因为需要维护每个元素的索引。之前我们是将元素按照完全二叉树的存放顺序进行存储，现在可以换成索引，而元素只需根据索引值 <code>k</code> 放在数组 <code>keys[k]</code> 处即可。只有索引数组 <code>indexes[]</code> 和元素数组 <code>keys[]</code> 还不够，如果我们想实现 <code>contains(int k)</code> 方法，目前只能遍历一下 <code>indexes[]</code>，看看 <code>k</code> 在不在里面，时间复杂度是 \(O(|V|)\)。何不多维护一个数组 <code>nodeIndexes[]</code>，使得它满足下述关系：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/97e8708450797ea2f543f2af18a2edff.jpg"></p> <p>如果能在 <code>nodeIndexes[k]</code> 不是 -1，就说明索引 \(k\) 对应的元素存在与堆中，且索引 k 在 <code>indexes[]</code> 中的位置为 \(d\)，即有下述等式成立：</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/7ae30cf7f450e31012f77950a8afb904.jpg"></p> <p>有了这三个数组之后我们就可以实现最小索引优先队列了：</p> <div class="ay1code"> <pre class="brush:java;">package com.zhiyiyo.collection.queue;  import java.util.Arrays;  import java.util.NoSuchElementException;  /**   * 最小索引优先队列   */  public class IndexMinPriorQueue&lt;K extends Comparable&lt;K&gt;&gt; implements IndexPriorQueue&lt;K&gt; {      private K[] keys;           // 元素      private int[] indexes;      // 元素的索引，按照最小堆的顺序摆放      private int[] nodeIndexes;  // 元素的索引在完全二叉树中的编号      private int N;      public IndexMinPriorQueue(int maxSize) {          keys = (K[]) new Comparable[maxSize + 1];          indexes = new int[maxSize + 1];          nodeIndexes = new int[maxSize + 1];          Arrays.fill(nodeIndexes, -1);      }      @Override      public void insert(int k, K item) {          keys[k] = item;          indexes[++N] = k;          nodeIndexes[k] = N;          swim(N);      public void change(int k, K item) {          validateIndex(k);          swim(nodeIndexes[k]);          sink(nodeIndexes[k]);      public void set(int k, K item) {          if (!contains(k)) {              insert(k, item);          } else {              change(k, item);          }      public boolean contains(int k) {          return nodeIndexes[k] != -1;      public int pop() {          int k = indexes[1];          delete(k);          return k;      public K delete(int k) {          K item = keys[k];          // 交换之后 nodeIndexes[k] 发生变化，必须先保存为局部变量          int nodeIndex = nodeIndexes[k];          swap(nodeIndex, N--);          // 必须有上浮的操作，交换后的元素可能比上面的元素更小          swim(nodeIndex);          sink(nodeIndex);          keys[k] = null;          nodeIndexes[k] = -1;          return item;      public K get(int k) {          return contains(k) ? keys[k] : null;      public K min() {          return keys[indexes[1]];      /**       * 获取最小的元素对应的索引       */      public int minIndex() {          return indexes[1];      public int size() {          return N;      public boolean isEmpty() {          return N == 0;       * 元素上浮       *       * @param k 元素的索引      private void swim(int k) {          while (k &gt; 1 &amp;&amp; less(k, k / 2)) {              swap(k, k / 2);              k /= 2;       * 元素下沉      private void sink(int k) {          while (2 * k &lt;= N) {              int j = 2 * k;              // 检查是否有两个子节点              if (j &lt; N &amp;&amp; less(j + 1, j)) j++;              if (less(k, j)) break;              swap(k, j);              k = j;       * 交换完全二叉树中编号为 a 和 b 的节点       * @param a 索引 a       * @param b 索引 b      private void swap(int a, int b) {          int k1 = indexes[a], k2 = indexes[b];          nodeIndexes[k2] = a;          nodeIndexes[k1] = b;          indexes[a] = k2;          indexes[b] = k1;      private boolean less(int a, int b) {          return keys[indexes[a]].compareTo(keys[indexes[b]]) &lt; 0;      private void validateIndex(int k) {              throw new NoSuchElementException("索引" + k + "不在优先队列中");  }  </pre> </div> <p>注意对比最小堆和最小索引堆的 <code>swap(int a, int b)</code> 方法以及 <code>less(int a, int b)</code> 方法，在交换堆中的元素时使用的依据是元素的大小，交换之后无需调整 <code>keys[]</code>，而是交换 <code>nodeIndexes[]</code> 和 <code>indexes[]</code> 中的元素。</p> <p class="maodian"><a name="_lab2_3_5" rel="nofollow"></a></p> <h3>实现算法</h3> <p>通过上述的分析，实现 Dijkstra 算法就很简单了，时间复杂度为 \(O(|E|\log |V|)\)：</p> <div class="ay1code"> <pre class="brush:java;">package com.zhiyiyo.graph;  import com.zhiyiyo.collection.queue.IndexMinPriorQueue;  import com.zhiyiyo.collection.stack.LinkStack;  import com.zhiyiyo.collection.stack.Stack;  import java.util.Arrays;  public class DijkstraSP implements ShortestPath {      private double[] distTo;      private DirectedEdge[] edgeTo;      private IndexMinPriorQueue&lt;Double&gt; pq;      private int s;      public DijkstraSP(WeightedDigraph graph, int s) {          pq = new IndexMinPriorQueue&lt;&gt;(graph.V());          edgeTo = new DirectedEdge[graph.V()];                    // 初始化距离          distTo = new double[graph.V()];          Arrays.fill(distTo, Double.POSITIVE_INFINITY);          distTo<span class="show-more" title="文字折叠"><span><i class="be be-squareplus"></i>展开</span></span> = 0;          visit(graph, s);          while (!pq.isEmpty()) {              visit(graph, pq.pop());          }      }      private void visit(WeightedDigraph graph, int v) {          for (DirectedEdge edge : graph.adj(v)) {              int w = edge.to();              if (distTo[w] &gt; distTo[v] + edge.getWeight()) {                  distTo[w] = distTo[v] + edge.getWeight();                  edgeTo[w] = edge;                  pq.set(w, distTo[w]);              }      // 省略已实现的方法 ...  }  </pre> </div> <p class="maodian"><a name="_label4" rel="nofollow"></a></p> <h2>后记</h2> <p>Dijkstra 算法还能继续优化，将最小索引堆换成斐波那契堆之后时间复杂度为 \(O(|E|+|V|\log |V|)\)，这里就不写了（<s>因为还没学到斐波那契堆</s>），以上~~</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-200.htm">Java-NIO之Channel（通道）</a></p>
                                        <p>下一个：<a href="/html/category/article-202.htm">编译实战 | 手摸手教你在Windows环境下运行Redis6.x</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-242.htm">SpringSecurity核心服务详解</a></h4>
                <p>现在我们对 Spring Security 体系结构及其核心类有了一个高层次的概述，让我们更仔细地看一两个核心接口及其实现，特别是AuthenticationManager&nbsp;、UserDet</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-249.htm">Unity 内置渲染管线转URP</a></h4>
                <p>一、CG 替换 HLSL   未使用光照计算的shader升级后不做修改仍然可以使用，但是可能会不兼容SRP Batcher，所以仍然需要修改，使用了光照计算的shader必须要修改。   SubSh</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-253.htm">分布式服务请求报错：Read timed out executing POST http://businessApi/app/app/login</a></h4>
                <p>问题描述： 发送POST请求，控制台打印： 错误信息:Read timed out executing POST http://xxx 解决方法： 在配置文件中添加超时配置即可</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-259.htm">C ++程序查找n个数的GCD和LCM</a></h4>
                <p>这是找出n个数字的GCD和LCM的代码。两个或更多不都是零的整数的GCD或最大公除数是将每个整数相除的最大正整数。GCD也被称为最大公因数。 两个数字的最小公倍数(LCM)是两个数字的倍数的最小数字（</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-229.htm">基于docker部署Oracle 19c的详细记录_docker</a></h4>
                <p>目录  一. 拉取Oracle 19c镜像 二. 查看镜像 三. 创建Oracle 19c镜像的容器  3.1创建目录 3.2 创建实例 3.3 查看日志  四、 修改密码  五、连接数据库  5.1</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-246.htm">request和response——请求响应对象</a></h4>
                <p>请求对象——request 获取get请求的值  一次请求，返回一个响应。 地址栏：http://127.0.0.1:8000/day3/get_request?lan=python 问号：代表请求参</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-236.htm">「BUAA OO Unit 2 HW8」第二单元总结_在线工具</a></h4>
                <p>「BUAA OO Unit 2 HW8」第二单元总结   目录   「BUAA OO Unit 2 HW8」第二单元总结  Part 0 前言  Part 1 第五次作业  1.1 作业要求 1.2 </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-243.htm">指针的高级运用——指针进阶</a></h4>
                <p>文章目录  学习目标 1.1 动态内存分配   引子 1.1动态分配内存函数 1.2malloc函数 1.3 calloc 函数 1.4 realloc函数 1.5 free函数 1.6 动态内存编程</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-224.htm">Asp.Net在线预览Word文档的解决方案与思路</a></h4>
                <p>前几天有个老项目找到我，有多老呢？比我工作年限都长，见到这个项目我还得叫一声前辈。 这个项目目前使用非常稳定，十多年了没怎么更新过，现在客户想加一个小功能：在线预览Word文档。 首先想到的是用第三方</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-234.htm">数据传输POST心法分享，做前端的你还解决不了这个bug？</a></h4>
                <p>背景 随时随地给大家提供技术支持的葡萄又来了。这次的事情是这样的，提供demo属于是常规操作，但是前两天客户突然反馈压缩传输模块抛出异常，具体情况是压缩内容传输到服务端后无法解压。 由于代码没有发生任</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>