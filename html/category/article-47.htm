<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-47.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Unity实现简单的对象池_在线工具 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">Unity实现简单的对象池_在线工具</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<h1 id="一简介">一、简介</h1> <p>先说说为什么要使用对象池<br /> 在Unity游戏运行时，经常需要生成一些物体，例如子弹、敌人等。虽然Unity中有<code>Instantiate()</code>方法可以使用，但是在某些情况下并不高效。特别是对于那些需要大量生成又需要大量销毁的物体来说，多次重复调用<code>Instantiate()</code>方法和<code>Destory()</code>方法会造成大量的性能消耗。<br /> 这时使用对象池是一个更好的选择。<br /> 那么什么是对象池呢？<br /> 简单来说，就是在一开始创建一些物体(或对象)，将它们隐藏(休眠)起来，对象池就是这些物体的集合，当需要使用的时候，就将需要的对象激活然后使用，而不是实例化生成。如果对象池中的对象消耗完了可以扩大对象池或者重新再次使用对象池中的对象。<br /> 一般情况下，一个对象池中存放的都是一类物体，我们一般希望创建多个对象池来存储不同类型的物体。<br /> 例如我们需要两个对象池来分别存储球体和立方体。<br /> 那么可以选择使用<code>Dictionary</code>来创建对象池，这样不仅可以创建对象池，还能指定每个对象池存储对象的类型。这样就能通过Tag来访问对象池。<br /> 至于对象池中可以使用<code>Queue</code>(队列)来存储具体的对象，队列不仅可以快速获取到第一个对象，能够按顺序获取对象。如果出队的对象在使用完成之后再次入队，那么这样就可以一直循环来重用对象。</p> <h1 id="二unity中的具体实现">二、Unity中的具体实现</h1> <p>新建一个Unity项目，在场景中添加一个空物体，命名为ObjectPool<br /> 同时制作一个黑色的地面便于显示和观察<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220505/039dcdc0ecf4166c3f26e5ae09249647.jpg" alt="Unity实现简单的对象池_在线工具"><br /> 新建脚本<code>ObjectPooler</code>添加到ObjectPool上</p> <pre><code>public class ObjectPooler : MonoBehaviour {     [System.Serializable]        public class Pool    //对象池类     {         public string tag;          //对象池的Tag(名称)         public GameObject prefab;   //对象池所保存的物体类型         public int size;            //对象池的大小     }     public List&lt;Pool&gt; pools;                  Dictionary&lt;string, Queue&lt;GameObject&gt;&gt; poolDictionary;  //声明字典      void Start()     {         //实例化字典                  对象池的Tag   对象池保存的物体         poolDictionary = new Dictionary&lt;string, Queue&lt;GameObject&gt;&gt;();     } } </code></pre> <p>在Inspector中添加对应的数据，这里简单创建了立方体和球体并设为了预制体<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220505/647e9500dbeb73596520642a982fcad4.jpg" alt="Unity实现简单的对象池_在线工具"></p> <p>然后继续修改<code>ObjectPooler</code></p> <pre><code>public class ObjectPooler : MonoBehaviour {     [System.Serializable]        public class Pool     {         public string tag;         public GameObject prefab;         public int size;     }     public List&lt;Pool&gt; pools;     Dictionary&lt;string, Queue&lt;GameObject&gt;&gt; poolDictionary;      public static ObjectPooler Instance;    //单例模式，便于访问对象池     private void Awake()     {         Instance = this;     }     void Start()     {         poolDictionary = new Dictionary&lt;string, Queue&lt;GameObject&gt;&gt;();         foreach (Pool pool in pools)         {             Queue&lt;GameObject&gt; objectPool = new Queue&lt;GameObject&gt;();     //为每个对象池创建队列             for (int i = 0; i &lt; pool.size; i++)             {                 GameObject obj = Instantiate(pool.prefab);                 obj.SetActive(false);   //隐藏对象池中的对象                 objectPool.Enqueue(obj);//将对象入队             }             poolDictionary.Add(pool.tag, objectPool);   //添加到字典后可以通过tag来快速访问对象池         }     }      public GameObject SpawnFromPool(string tag, Vector3 positon, Quaternion rotation)     //从对象池中获取对象的方法     {         if (!poolDictionary.ContainsKey(tag))  //如果对象池字典中不包含所需的对象池         {             Debug.Log("Pool: " + tag + " does not exist");             return null;         }          GameObject objectToSpawn = poolDictionary[tag].Dequeue();  //出队，从对象池中获取所需的对象         objectToSpawn.transform.position = positon;  //设置获取到的对象的位置         objectToSpawn.transform.rotation = rotation; //设置对象的旋转         objectToSpawn.SetActive(true);                //将对象从隐藏设为激活          poolDictionary[tag].Enqueue(objectToSpawn);     //再次入队，可以重复使用，如果需要的对象数量超过对象池内对象的数量，在考虑扩大对象池         //这样重复使用就不必一直生成和消耗对象，节约了大量性能         return objectToSpawn;  //返回对象     } } </code></pre> <p>新建脚本<code>CubeSpanwer</code>，来使用对象池生成物体</p> <pre><code>public class CubeSpanwer : MonoBehaviour {     ObjectPooler objectPooler;     private void Start()     {         objectPooler = ObjectPooler.Instance;     }     private void FixedUpdate()     {         //这样会高效一点，比ObjectPooler.Instance         objectPooler.SpawnFromPool("Cube", transform.position, Quaternion.identity);     } } </code></pre> <p>新建脚本<code>Cube</code>，添加到Cube预制体上，让其在生成时添加一个力便于观察<br /> 注意：为了方便观察这里移除了Cube上的BoxCollider</p> <pre><code>public class Cube : MonoBehaviour {     void Start()     {         GetComponent&lt;Rigidbody&gt;().AddForce(new Vector3(Random.Range(0f, 0.2f), 1f, Random.Range(0f, 0.2f)));     } } </code></pre> <p>我们发现Cube并没有向上飞起而是堆叠在一起<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220505/b36d873eff6e0be5af2da27a93bef7f0.jpg" alt="Unity实现简单的对象池_在线工具"><br /> 这时因为Cube只在生成时在Start中添加了力，只调用了一次，但马上就被隐藏放入对象池了，等到再次取出时，并没有任何方法的调用，只是单纯设置位置</p> <p>我们需要让cube对象知道自己被重用了，再次调用添加力的方法<br /> 新建接口 <code>IPooledObject</code></p> <pre><code>public interface IPooledObject {     void OnObjectSpawn(); } </code></pre> <p>然后让<code>Cube</code>继承该接口</p> <pre><code>public class Cube : MonoBehaviour, IPooledObject {     private Rigidbody rig;     public void OnObjectSpawn()     {         rig = gameObject.GetComponent&lt;Rigidbody&gt;();         rig.velocity = Vector3.zero;	//将速度重置为0，物体在被隐藏时仍然具有速度，不然重用时仍然具有向下的速度         rig.AddForce(new Vector3(Random.Range(0, 0.2f), 10, Random.Range(0, 0.2f)), ForceMode.Impulse);     } } </code></pre> <p>然后修改<code>ObjectPooler</code>，让Cube在被重用时调用重用的方法</p> <pre><code>public GameObject SpawnFromPool(string tag, Vector3 positon, Quaternion rotation)     //从对象池中获取对象的方法     {         ......         IPooledObject pooledObj = objectToSpawn.GetComponent&lt;IPooledObject&gt;();         if (pooledObj != null)  //判断，并不是所有对象都继承了该接口，例如Cube我想让它向上飞，Sphere则让它直接生成，Sphere就不必继承IPoolObject接口         {             pooledObj.OnObjectSpawn();  //调用重用时的方法         }         poolDictionary[tag].Enqueue(objectToSpawn);         return objectToSpawn;     } </code></pre> <p>运行结果：</p> <p>Cube从CubeSpawner不断生成，可以自行设置计时器来限制生成的速度<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220505/2ca24adb444ff93c15bb3bcdb575ebd4.jpg" alt="Unity实现简单的对象池_在线工具"></p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-46.htm">PowerDesigner默认双向关联修改为单向关联</a></p>
                                        <p>下一个：<a href="/html/category/article-48.htm">MySQL GET_FORMAT()函数的用途是什么？</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-248.htm">jpa mysql乐观锁_JPA @Lock(value = LockModeType.PESSIMISTIC_WRITE) 悲观锁防坑</a></h4>
                <p>前提： 由于业务需要在entity Product已经实现了@version的乐观锁的基础上再加上了悲观锁的控制 @Lock(value = LockModeType.PESSIMISTIC_WRIT</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-228.htm">Springboot使用@Cacheable注解实现数据缓存</a></h4>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文介绍如何在Springboot中通过@Cacheable注解实现数据缓存。在每次调用添加了@Cach</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-221.htm">线程安全问题的解决方案有哪些？</a></h4>
                <p>线程安全是指某个方法或某段代码，在多线程中能够正确的执行，不会出现数据不一致或数据污染的情况，我们把这样的程序称之为线程安全的，反之则为非线程安全的。在 Java 中，解决线程安全问题有以下 3 种手</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-219.htm">正则表达式-匹配ip及rtsp</a></h4>
                <p>IP地址是指互联网协议地址（英语：Internet Protocol Address，又译为网际协议地址），是IP Address的缩写。IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-246.htm">request和response——请求响应对象</a></h4>
                <p>请求对象——request 获取get请求的值  一次请求，返回一个响应。 地址栏：http://127.0.0.1:8000/day3/get_request?lan=python 问号：代表请求参</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-207.htm">MySQL——union(合并结果集)、limit(获取部分数据)、关于MySQL中常用数据类型</a></h4>
                <p>博客目录 1、union(合并结果集) 2、limit(获取一张表中某部分数据) 3、表——创建表、删除表 4、关于MySQL中的数据类型  一、union(合并结果集)  将两个查询结果合并(可以是</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-249.htm">Unity 内置渲染管线转URP</a></h4>
                <p>一、CG 替换 HLSL   未使用光照计算的shader升级后不做修改仍然可以使用，但是可能会不兼容SRP Batcher，所以仍然需要修改，使用了光照计算的shader必须要修改。   SubSh</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-227.htm">企业应用架构研究系列十九：Docker开发环境</a></h4>
                <p>　　软件行业流行这样一个说法，由于Docker 技术的成熟和该技术被广大厂商的普遍应用，成就了微服务领域的快速成长，衍生了云原生技术和公有云的进一步推广。我个人认为Dockers 技术、微服务技术、云</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-257.htm">springboot+layui有关分页问题</a></h4>
                <p>问题描述 分页不生效明明可以分页 但是后端接收到的pagenum始终是1  &nbsp;   &nbsp;  &nbsp; 提示：这里描述项目中遇到的问题： 例如：分页出问题 @Override pu</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-236.htm">「BUAA OO Unit 2 HW8」第二单元总结_在线工具</a></h4>
                <p>「BUAA OO Unit 2 HW8」第二单元总结   目录   「BUAA OO Unit 2 HW8」第二单元总结  Part 0 前言  Part 1 第五次作业  1.1 作业要求 1.2 </p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>