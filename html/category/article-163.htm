<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-163.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>JavaScript 对象的四种方式比较详解_javascript技巧 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">JavaScript 对象的四种方式比较详解_javascript技巧</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">前言</a></li> <li><a href="#_label1" rel="nofollow">1. 引用比较</a></li> <li><a href="#_label2" rel="nofollow">2. 手动比较</a></li> <li><a href="#_label3" rel="nofollow">3. 浅层比较</a></li> <li><a href="#_label4" rel="nofollow">4. 深层比较</a></li> <li><a href="#_label5" rel="nofollow">5. 总结</a></li> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>前言</h2> <p>比较 JavaScript 中的值非常简单，只需用相等运算符即可，例如严格相等运算符：</p> <div class="ay1code"> <pre class="brush:plain;">'a' === 'c'; // =&gt; false  1   === 1;   // =&gt; true</pre> </div> <p>但是对象却有结构化的数据，所以比较起来比较困难。在本文中，你将学习如何正确比较 JavaScript 中的对象。</p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>1. 引用比较</h2> <p>JavaScript 提供了 3 种方法来对值进行比较：</p> <ul> <li>严格相等运算符 <code>===</code> </li> <li>宽松相等运算符 <code>==</code> </li> <li> <code>Object.is()</code> 函数</li> </ul> <p>当使用上述任何一种方法比较对象时，只有在比较的值引用了相同的对象实例时，比较的结果为 <code>true</code>。这就是参照相等性。</p> <p>让我们定义对象 <code>hero1</code> 和 <code>hero2</code> ，并查看实际中的参照相等性：</p> <div class="ay1code"> <pre class="brush:js;"> const hero1 = {     name: 'Batman'   };   const hero2 = {     name: 'Batman'   };      hero1 === hero1; // =&gt; true   hero1 === hero2; // =&gt; false     hero1 == hero1; // =&gt; true   hero1 == hero2; // =&gt; false      Object.is(hero1, hero1); // =&gt; true   Object.is(hero1, hero2); // =&gt; false</pre> </div> <p><code>hero1 === hero1</code> 的计算结果为 <code>true</code>，因为两个操作数均指向了同一个对象实例 <code>hero1</code>。</p> <p>另一方面，<code>hero1 === hero2</code> 的计算结果为 <code>false</code>，因为 <code>hero1</code> 和 <code>hero2</code> 是不同的对象实例。</p> <p>有意思的是，<code>hero1</code> 和 <code>hero2</code> 对象的内容是相同的：两个对象都有一个 <code>name</code> 属性，它的其值是 <code>'Batman'</code>。尽管如此，即使比较相同结构的对象，<code>hero1 === hero2</code>  的结果也是 <code>false</code>。</p> <p>当你想比较对象引用而不是它们的内容时，引用相等是很有用的。但是在更多的情况之下，你都想针对对象的实际内容进行比较：例如属性及它们的值。</p> <p>接下来看看如何通过对象的内容比较对象是否相等。</p> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>2. 手动比较</h2> <p>按内容比较对象最直接的方法是读取属性并手动比较它们。</p> <p>例如，让我们编写一个特殊的函数 <code>isHeroEqual()</code> 来比较两个 hero 对象：</p> <div class="ay1code"> <pre class="brush:js;"> function isHeroEqual(object1, object2) {     return object1.name === object2.name;   }      const hero1 = {     name: 'Batman'   };   const hero2 = {     name: 'Batman'  };   const hero3 = {     name: 'Joker'   };     isHeroEqual(hero1, hero2); // =&gt; true   isHeroEqual(hero1, hero3); // =&gt; false</pre> </div> <p><code>isHeroEqual()</code> 访问两个对象的属性 <code>name</code> 并比较它们的值。</p> <p>如果被比较的对象具有一些属性，我更喜欢编写诸如 <code>isHeroEqual()</code> 之类的比较函数。这类函数具有良好的性能：在比较中只会涉及少数几个属性访问器和相等运算符。</p> <p>手动比较需要手动提取属性，对于简单对象来说，这不是问题。但是，要对较大的对象（或结构未知的对象）进行比较，就不方便了，因为它需要大量的样板代码。</p> <p>那么让我们来看看对象的浅层比较能提供哪些帮助。</p> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>3. 浅层比较</h2> <p>如果用浅层比较检查对象，你必须获取两个对象的属性列表（使用 <code>Object.keys()</code>），然后检查它们的属性值是否相等。</p> <p>下面的代码是浅层比较的一种实现方式：</p> <div class="ay1code"> <pre class="brush:js;"> function shallowEqual(object1, object2) {     const keys1 = Object.keys(object1);     const keys2 = Object.keys(object2);        if (keys1.length !== keys2.length) {       return false;     }        for (let index = 0; index &lt; keys1.length; index++) {       const val1 = object1[keys1[index]];       const val2 = object2[keys2[index]];       if (val1 !== val2) {         return false;       }     }        return true;   }</pre> </div> <p>在函数内部，<code>keys1</code> 和 <code>keys2</code> 是分别包含 <code>object1</code> 和 <code>object2</code> 属性名称的数组。</p> <p>用 <code>for</code> 循环遍历键，并比较 <code>object1</code> 和 <code>object2</code> 的每个属性。</p> <p>使用浅层比较，你可以轻松对有着许多属性的对象进行相等性检查：</p> <div class="ay1code"> <pre class="brush:js;"> const hero1 = {     name: 'Batman',     realName: 'Bruce Wayne'   };   const hero2 = {     name: 'Batman',     realName: 'Bruce Wayne'   };   const hero3 = {     name: 'Joker'   };      shallowEqual(hero1, hero2); // =&gt; true   shallowEqual(hero1, hero3); // =&gt; false</pre> </div> <p><code>shallowEqual(hero1, hero2)</code> 返回 <code>true</code>，因为对象 <code>hero1</code> 和 <code>hero2</code> 具有相同的属性（<code>name</code> 和 <code>realName</code>），并且值也相同。</p> <p>另一方面，由于 <code>hero1</code> 和 <code>hero3</code> 具有不同的属性，所以 <code>shallowEqual(hero1, hero3)</code>  将会返回 <code>false</code>。</p> <p>但是 JavaScript 中的对象是可以嵌套的。在这种情况下，浅层比较并不能很好地发挥作用。</p> <p>下面对具有嵌套对象的对象执行浅层比较检查：</p> <div class="ay1code"> <pre class="brush:js;"> const hero1 = {     name: 'Batman',     address: {       city: 'Gotham'     }   };   const hero2 = {     name: 'Batman',     address: {       city: 'Gotham'     }   };     shallowEqual(hero1, hero2); // =&gt; false</pre> </div> <p>这次，即使两个对象 <code>hero1</code> 和 <code>hero2</code> 具有相同的内容，<code>shallowEqual(hero1, hero2)</code>  也将会返回 <code>false</code>。</p> <p>发生这种情况是因为嵌套对象 <code>hero1.address</code> 和 <code>hero2.address</code> 是不同的对象实例。因此，浅层比较认为  <code>hero1.address</code> 和 <code>hero2.address</code> 是两个不同的值。</p> <p>解决嵌套对象的问题需要进行深层比较。</p> <p class="maodian"><a name="_label4" rel="nofollow"></a></p> <h2>4. 深层比较</h2> <p>深层比较与浅层比较相似，不同之处在于，当属性中包含对象时，将对嵌套对象执行递归浅层比较。</p> <p>看一下深层比较的实现：</p> <div class="ay1code"> <pre class="brush:js;"> function deepEqual(object1, object2) {     const keys1 = Object.keys(object1);     const keys2 = Object.keys(object2);        if (keys1.length !== keys2.length) {       return false;     }        for (let index = 0; index &lt; keys1.length; index++) {       const val1 = object1[keys1[index]];       const val2 = object2[keys2[index]];       const areObjects = isObject(val1) &amp;&amp; isObject(val2);       if (areObjects &amp;&amp; !deepEqual(val1, val2) ||            !areObjects &amp;&amp; val1 !== val2) {         return false;       }     }        return true;   }      function isObject(object) {     return object != null &amp;&amp; typeof object === 'object';   }</pre> </div> <p>第 13 行的 <code>areObjects &amp;&amp; !deepEqual(val1, val2)</code>  一旦检查到的属性是对象，则递归调用将会开始验证嵌套对象是否也相等。</p> <p>现在用 <code>deepEquality()</code> 比较具有嵌套对象的对象：</p> <div class="ay1code"> <pre class="brush:js;"> const hero1 = {     name: 'Batman',     address: {       city: 'Gotham'     }   };   const hero2 = {     name: 'Batman',     address: {       city: 'Gotham'     }   };     deepEqual(hero1, hero2); // =&gt; true</pre> </div> <p>深度比较函数能够正确地确定 <code>hero1</code> 和 <code>hero2</code> 是否具有相同的属性和值，包括嵌套对象  <code>hero1.address</code>  和 <code>hero2.address</code> 的相等性。</p> <p>为了深入比较对象，我建议使用Node内置<code>util</code>模块的  <code>isDeepStrictEqual(object1, object2)</code></p> <p class="maodian"><a name="_label5" rel="nofollow"></a></p> <h2>5. 总结</h2> <p>引用相等性（使用  <code>===</code>、 <code>==</code> 或 <code>Object.is()</code>）用来确定操作数是否为同一个对象实例。</p> <p>手动检查对象是否相等，需要对属性值进行手动比较。尽管这类检查需要手动编码来对属性进行比较，但由于很简单，所以这种方法很方便。</p> <p>当被比较的对象有很多属性或在运行时确定对象的结构时，更好的方法是使用浅层检查。</p> <p>如果比较的对象具有嵌套对象，则应该进行深度比较检查。</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-162.htm">ASP.NET Core设置Ocelot网关限流_实用技巧</a></p>
                                        <p>下一个：<a href="/html/category/article-164.htm">领域驱动模型DDD使用Saga管理事务</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2824.htm">如何使用线程池执行定时任务？</a></h4>
                <p>在 Java 语言中，有两个线程池可以执行定时任务：ScheduledThreadPool 和 SingleThreadScheduledExecutor，其中 SingleThreadSchedul</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2823.htm">jQuery实现呼吸灯轮播图</a></h4>
                <p>jQuery实现呼吸灯轮播图  jQuery实现呼吸灯轮播图    jQuery实现呼吸灯轮播图 &lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;he</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-4068.htm">Typora + EasyBlogImageForTypora直接上传图片到博客园_在线工具</a></h4>
                <p>1.描述问题 Gitee外链访问失效后一直在寻找有效措施，因为本人使用惯了typora，故使用typora + EasyBlogImageForTypora+Snipaste进行博客编写以及图片上传 </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-2239.htm">【面试普通人VS高手系列】HashMap是怎么解决哈希冲突的？</a></h4>
                <p>常用数据结构基本上是面试必问的问题，比如HashMap、LinkList、ConcurrentHashMap等。 关于HashMap，有个学员私信了我一个面试题说： “HashMap是怎么解决哈希冲突</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-251.htm">C# 有关List&lt;T&gt;的Contains与Equals方法_在线工具</a></h4>
                <p>【以下内容仅为本人在学习中的所感所想，本人水平有限目前尚处学习阶段，如有错误及不妥之处还请各位大佬指正，请谅解，谢谢！】 #Updated【2022.5.2 修复移动端排版混乱的问题】 ！！！观前提醒</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-252.htm">[js] 回调函数 回调地狱 Promise async/await</a></h4>
                <p>1. 回调函数 callback   一种封装代码的手段   什么是 callback , 概念 =&gt; 把 函数A 当做 实参 传递到 函数B 内部 =&gt; 在 函数B 内部以 形参 的方式</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-250.htm">配置tomcat，修改对项目的访问路径</a></h4>
                <p>在Idea中对项目访问路径的配置题  &nbsp;当将wai包直接部署到tomcat中时，如何修改对项目的访问路径？ 两种方案： 1、首先将tomcat的目录下的webapps/ROOT目录下的所有内</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-258.htm">你确定你会用Enum枚举了？</a></h4>
                <p>一般在我们开发时如果能使用枚举罗列的，一般都会定义一个枚举类型。将枚举类型作为方法的参数，可以方便的进行调用，给我们带来不少的遍历，当然有时候它还不如直接用一个int类型带来，带来一定灵活性。但只要能</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1053.htm">Spring Cloud中使用Feign实现负载均衡详解</a></h4>
                <p>本文属于【夯实Spring Cloud】系列文章，该系列旨在用通俗易懂的语言，带大家了解和学习Spring Cloud技术，希望能给读者带来一些干货。系列目录如下：  【夯实Spring Cloud】</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-254.htm">图像处理学习笔记——BMP图片详解</a></h4>
                <p>一、位图和调色板的概念  1.位图（Bitmap）： 例如我们常说的屏幕分辨率为 640*480，刷新频率为70Hz，意思是说每行要扫描 640 个象素，一共有 480 行，每秒重复扫描屏幕 70 次</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>