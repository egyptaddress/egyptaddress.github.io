<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-51.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>LevelDB 学习笔记2：合并 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">LevelDB 学习笔记2：合并</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<h1 id="leveldb-学习笔记2合并">LevelDB 学习笔记2：合并</h1> <p>部分图片来自<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/facebook/rocksdb/wiki/Leveled-Compaction"  target="_blank" rel="nofollow">RocksDB 文档</a></p> <p>LevelDB 中会发生两种不同的合并行为，分别称为 minor compaction 和 major compaction</p> <h2 id="minor-compaction">Minor Compaction</h2> <p>将内存数据库刷到硬盘的过程称为 minor compaction</p> <ul> <li>产出的 L0 层的 sstable <ul> <li>事实上，LevelDB 不一定会将 minor compaction 产生的 sstable 放到 L0 里</li> </ul> </li> <li>L0 层的 sstable 可能存在 overlap</li> <li>如果上一次产生的 imm memtable 还没能刷盘，而新的 memtable 已写满，写入线程必须等待到 minor compaction 完成才能继续写入 <ul> <li>只允许同时存在一个 imm memtable</li> </ul> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9aa75c29d1bcb2ebcb2e1ec008fe34e5.jpg" alt="LevelDB 学习笔记2：合并"></p> <h3 id="minor-compaction-的流程">Minor Compaction 的流程</h3> <p>主要流程在<code>CompactMemTable()</code> 中</p> <ul> <li>借助工具类 TableBuilder 构建 sstable 文件 <ul> <li><code>BuildTable()</code></li> </ul> </li> <li>选择将这个产生的 sstable 文件放到哪一层去 <ul> <li><code>PickLevelForMemTableOutput()</code></li> <li>如果某个 sstable 文件和 L0 层没有重叠部分，就可以考虑将它扔到后面的层级里</li> <li>如果满足 <ul> <li>和 level + 1 层不重叠</li> <li>且不要和 level+ 2 有太多的重叠部分</li> </ul> </li> <li>我们就可以将它扔到 level + 1 层去</li> <li>我们希望它能放到第二层去 <ul> <li>这样可以避免 0 -&gt; 1 层合并的巨大 I/O 开销</li> </ul> </li> <li>但我们不希望它直接扔到最后一层，这样可能带来带来的问题是 <ul> <li>如果某个 key 被重复改写，可能带来磁盘空间的浪费</li> <li>比如你写到 L7 中，然后再改写它时可能又在 L6 里写了一份副本，以此类推，可能每一层里都有这个 key 的副本</li> </ul> </li> <li>最高可以放到<code>config::kMaxMemCompactLevel</code>（默认为 2）层里去</li> </ul> </li> <li>提交版本修改 <ul> <li>增加新的 sstable 文件</li> </ul> </li> <li>删除 imm memtable 的日志文件</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/2f0f0967db3ed5aee0bfc9046663da90.jpg" alt="LevelDB 学习笔记2：合并"></p> <h2 id="major-compaction">Major Compaction</h2> <ul> <li>L0 层的记录有 overlap，搜索的时候可能要遍历所有的 L0 级文件 <ul> <li>当 L0 层文件数量到达阈值（<code>kL0_CompactionTrigger</code>，默认值为 4）时，会被合并到 L1 层中去</li> <li>在没有 overlap 的层里搜索时，只需要找到 key 在哪个文件里，然后遍历这个文件就行了</li> <li>所以针对 L0 层的 major compaction 可以提高数据检索效率</li> </ul> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/98fed9f8a5e5e7a266faf85141d80474.jpg" alt="LevelDB 学习笔记2：合并"></p> <ul> <li>major compaction 过程会消耗大量时间，为了防止用户写入速度太快，L0 级文件数量不断增长，LevelDB 设置了两个阈值 <ul> <li><code>kL0_SlowdownWritesTrigger</code>，默认值为 8 <ul> <li>放缓写入，每个合并写操作都会被延迟 1ms</li> </ul> </li> <li><code>kL0_StopWritesTrigger</code>，默认值为 12 <ul> <li>写入暂停，直到后台合并线程工作完成</li> </ul> </li> </ul> </li> </ul> <p>除了 L0 层以外，其他层级内 sstable 文件的 key 是有序且不重叠的</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/69b746147ac84da889eaca2e30b2ef4e.jpg" alt="LevelDB 学习笔记2：合并"></p> <ul> <li>LevelDB 的写入都是 Append 的，也就是不管是修改还是删除，都是添加新的记录，因此数据库里可能存在 key 相同的多条记录 <ul> <li>major compaction 也起到合并相同 key 的记录、减小空间开销的作用</li> </ul> </li> <li>而且如果 L1 层文件积累的太多，L0 层文件做 major compaction 的时候，需要和大量的 L1 层文件做合并，导致 compaction 的 I/O 开销很大 <ul> <li>所以合并操作也能降低 compaction 的 I/O 开销</li> </ul> </li> <li>当 Li（i &gt; 0）层文件大小超过<span class="math inline">\(10^i\)</span> MB 时，也会触发 major compaction，选择至少一个 Li 层文件和 Li+1 层文件合并 <ul> <li>下面这个图来自<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/facebook/rocksdb/wiki/Leveled-Compaction"  target="_blank" rel="nofollow">RocksDB 文档</a>，所以阈值跟 LevelDB 不一样</li> </ul> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/46bb4bd467cd488494a7c74d2452f0c7.jpg" alt="LevelDB 学习笔记2：合并"></p> <blockquote> <p>???? major compaction 的作用：</p> <ul> <li>提高数据检索效率</li> <li>合并相同 key 的记录、减小空间开销的作用</li> <li>降低 compaction 的 I/O 开销</li> </ul> </blockquote> <ul> <li>可能发生的一种情况是，L0 合并完成后，L1 也触发合并阈值，需要合并，导致递归的合并 <ul> <li>最坏的情况是每次合并都会引起下一层触发合并</li> </ul> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/2811fc7f1a915f1d445a3ed7bcfd0614.jpg" alt="LevelDB 学习笔记2：合并"></p> <h3 id="trivial-move">Trivial Move</h3> <ul> <li>LevelDB 做的一种优化是当满足下列条件的情况下 <ul> <li>level 层的文件个数只有一个</li> <li>level 层文件与 level+1 层文件没有重叠</li> <li>level 层文件与 level+2 层的文件重叠部分的文件大小不超过阈值</li> </ul> </li> <li>直接将 level 层的文件移动到 level+1 层去</li> <li>这种优化称为 trivial move</li> </ul> <h3 id="seek-compaction">Seek Compaction</h3> <p>如果某个文件上，发生了多次无效检索（搜索某个 key，但没找到），我们希望对该文件做压缩</p> <p>LevelDB 假设</p> <ul> <li>检索耗时 10ms</li> <li>读写 1MB 消耗 10ms（100MB/s）</li> <li>压缩 1MB 文件需要做 25MB 的 I/O <ul> <li>从这次层读 1MB 数据</li> <li>从下一层读 10-12MB 数据</li> <li>写 10-12MB 数据到下一层</li> </ul> </li> </ul> <p>因此，做 25 次检索的代价等价于对 1MB 的数据做合并，也就是说，一次检索的代价等价于对 40KB 数据做合并</p> <p>LevelDB 最终的选择比较保守，文件里每有 16KB 数据就允许对该文件做一次无效检索，当允许无效检索的次数耗尽，就会触发合并</p> <p>文件的元数据里有一个<code>allowed_seeks</code> 字段，存储的就是该文件剩余无效检索的次数</p> <ul> <li><code>allowed_seeks</code> 的初始化方式</li> </ul> <pre><code class="language-cpp">f-&gt;allowed_seeks = static_cast&lt;int&gt;((f-&gt;file_size / 16384U)); if (f-&gt;allowed_seeks &lt; 100) f-&gt;allowed_seeks = 100;</code></pre> <ul> <li>每次<code>Get()</code> 调用，如果检索了文件，LevelDB 就会做判断，是否检索了一个以上的文件，如果是，就减少这个文件的<code>allowed_seeks</code></li> <li>当文件的<code>allowed_seeks</code> 减少为 0，就会触发 seek compaction</li> </ul> <h3 id="压缩计分">压缩计分</h3> <p>LevelDB 中采取计分机制来决定下一次压缩应该在哪个层内进行</p> <ul> <li>每次版本变动都会更新压缩计分 <ul> <li><code>VersionSet::Finalize()</code></li> <li>计算每一层的计分，下次压缩应该在计分最大的层里进行 <ul> <li>计分最大层和最大计分会被存到当前版本的<code>compaction_level_</code> 和<code>compaction_score_</code> 中</li> </ul> </li> <li><code>score &gt;= 1</code> 说明已经触发了压缩的条件，必须要做压缩</li> </ul> </li> <li>L0 的计分算法 <ul> <li>L0 级文件数量 / L0 级压缩阈值（<code>config::kL0_CompactionTrigger</code>，默认为 4）</li> </ul> </li> <li>其他层的计分算法 <ul> <li>Li 级文件大小总和 / Li 级大小阈值</li> <li>大小阈值为<span class="math inline">\(10^i\)</span> MB</li> </ul> </li> </ul> <h4 id="为什么-l0-层要特殊处理">为什么 L0 层要特殊处理</h4> <ul> <li>使用更大的 write buffer 的情况下，这样就不会做太多的 L0-&gt;L1 的合并 <ul> <li>write buffer size 是指 memtable 转换为 imm memtable 的大小阈值 <ul> <li><code>options_.write_buffer_size</code></li> </ul> </li> <li>比如设置 write buffer 为 10MB，且 L0 层的大小阈值为 10MB，每做一次 minor compaction 就需要做一次 L0-&gt;L1 的合并，开销太大</li> </ul> </li> <li>L0 层文件每次读的时候都要做归并（因为 key 是有重叠的），因此我们不希望 L0 层有太多文件 <ul> <li>如果你设置一个很小的 write buffer，且使用大小阈值，就 L0 就可能堆积大量的文件</li> </ul> </li> </ul> <h3 id="major-compaction-的流程">Major Compaction 的流程</h3> <h4 id="准备工作">准备工作</h4> <ul> <li>判断合并类型 <ul> <li>如果<code>compaction_score_ &gt; 1</code> 做 size compaction</li> <li>如果是有文件<code>allowed_seeks == 0</code> 而引起的合并，做 seek compaction</li> </ul> </li> <li>选择合并初始文件 <ul> <li>size compaction <ul> <li>轮转 <ul> <li>初始文件的最大 key 要大于该层上次合并时，所有参与合并文件的最大 key</li> <li>每层上次合并的最大 key 记录在 VersionSet 的<code>compact_pointer_</code> 字段中</li> </ul> </li> </ul> </li> <li>seek compaction <ul> <li>引起 seek compaction 的那个文件 <ul> <li>也就是<code>allowed_seeks</code> 归 0 的那个文件</li> </ul> </li> </ul> </li> </ul> </li> <li>选择所有参与合并的文件 <ul> <li>总的来说就是根据文件的重叠部分不断扩大参与合并的文件范围 <ul> <li>先拓展 Li 的边界</li> <li>再拓展 Li+1 的边界</li> <li>再反过来继续拓展 Li 的边界 <ul> <li>这次拓展不应该导致 Li+1 的边界扩大（产生更多的重叠文件），否则不做这次拓展</li> </ul> </li> </ul> </li> <li>具体过程在<code>PickCompaction()</code> 和<code>SetupOtherInputs()</code> 中</li> <li>关键函数有两个 <ul> <li><code>GetOverlappingInputs()</code> <ul> <li>给定一个 key 的范围，选择 Li 中所有和该范围有重叠的 sstable 文件加入集合</li> </ul> </li> <li><code>AddBoundaryInputs()</code> <ul> <li>假设有两个 block<code>b1=(l1, u1)</code> 和<code>b2=(l2, u2)</code></li> <li>其中 b1 的上界和 b2 的下界的 user_key 相等 <ul> <li>也就是说这两个块是相邻的</li> </ul> </li> <li>如果只是合并 b1，也就是将它移动到下一层去 <ul> <li>那么后续查这条 user_key 时，从 b2 中查到后，就不会再去下一层查找</li> <li>如果 b2 中的数据比 b1 中的旧，那么这样查到的数据就是错误的</li> </ul> </li> <li>因此 b1 和 b2 必须同时被合并</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/cb25f0bdc31c1eb2d0a2b36bfc349ace.jpg" alt="LevelDB 学习笔记2：合并"></p> <p>拓展边界的示例：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/f7b8f45a988443381d75600fd6dc7de8.jpg" alt="LevelDB 学习笔记2：合并"></p> <h4 id="执行合并">执行合并</h4> <ul> <li>判断是否满足 [[#Trivial Move]] 的条件 <ul> <li>满足就做 trivial move，不再执行后续流程</li> </ul> </li> <li>开始执行合并 <ul> <li>合并主要流程在<code>DoCompactionWork()</code> 中</li> <li>用合并的输入文件构造 MergingIterator</li> <li>遍历 MergingIterator <ul> <li>这个过程就是对输入文件做归并排序的过程</li> <li>如果遍历过程中发现有 imm memtable 文件存在，就会转而先做 minor compaction <ul> <li>并且会唤醒在<code>MakeRoomForWrite()</code> 中等待 minor compaction 完成的线程</li> </ul> </li> </ul> </li> <li>借助工具类 TableBuilder 构建 sstable 文件 <ul> <li>将遍历迭代器产生的 kv 对加入 builder</li> </ul> </li> <li>如果当前文件大小超过阈值或和 level+2 层有太多的重叠部分 <ul> <li>完成对该文件的写入，并打开新的 TableBuilder</li> </ul> </li> </ul> </li> <li>提交版本更改</li> <li>调用<code>RemoveObsoleteFiles()</code> 删除不再需要的文件</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/5513142cba1d86215782fe9d4671ff89.jpg" alt="LevelDB 学习笔记2：合并"></p> <h5 id="抛弃无用的数据项">抛弃无用的数据项</h5> <ul> <li>满足以下条件的数据项会被抛弃，不会加入到合并后的文件里 <ul> <li>数据项的类型是删除</li> <li>这个数据项比当前最老的 snapshot 还要老</li> <li>level + 2 以上的层都不包含这个 user_key <ul> <li>不然你把这项在合并阶段删掉了，用户读的时候就会读到错误的数据</li> </ul> </li> </ul> </li> <li>比这些数据项更老的所有相同 user_key 的数据项都会被抛弃</li> </ul> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-50.htm">python连接MySQL数据库并读取数据库中的数据表存入list中</a></p>
                                        <p>下一个：<a href="/html/category/article-52.htm">docker搭建confluence（wiki）</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-247.htm">EFI系统分区必须挂载到/boot/efi其中之一</a></h4>
                <p>最近在windows 8.1系统上使用U盘安装centos8双系统，硬盘分区格式是ntfs，mbr引导；选择自动分区时出现如下错误  （Failed to find a suitable stage1</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1352.htm">vs code编写web项目</a></h4>
                <p>vs code编写web项目 0.小贴士 1.vs和vscode是不一样的是不一样的 2.在已经存在maven的时候，直接在maven的+创建项目，用ctrl+shoeft+p 搜索不到maven的创</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1331.htm">为什么我建议需要定期重建数据量大但是性能关键的表_在线工具</a></h4>
                <p>个人创作公约：本人声明创作的所有文章皆为自己原创，如果有参考任何文章的地方，会标注出来，如果有疏漏，欢迎大家批判。如果大家发现网上有抄袭本文章的，欢迎举报，并且积极向这个github 仓库 提交 is</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-238.htm">PyQt5之MenuBar菜单控件的使用（三）</a></h4>
                <p>文章目录  MenuBar 详解 一、定义   1.QMenuBar类 2.QMenu类 2.QAction类   二、创建一个菜单栏     MenuBar 详解 在PyQt5中，菜单栏、主菜单和菜</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1054.htm">mysql 中插入百万条数据</a></h4>
                <p>文章目录  mysql 中插入百万条数据     1. 创建测试表 2. 开启二进制日志 3. 创建一个生成随机字符串的函数: 4. 调用上边的两个插入函数        mysql 中插入百万条数据</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-251.htm">C# 有关List&lt;T&gt;的Contains与Equals方法_在线工具</a></h4>
                <p>【以下内容仅为本人在学习中的所感所想，本人水平有限目前尚处学习阶段，如有错误及不妥之处还请各位大佬指正，请谅解，谢谢！】 #Updated【2022.5.2 修复移动端排版混乱的问题】 ！！！观前提醒</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1332.htm">Centos7离线安装Nginx亲测版</a></h4>
                <p>Centos7 Nginx编译包制作 找一台可连接互联网的虚拟机来制作编译好的Nginx包，具体操作如下 1、准备一台虚拟机（可访问互联网） 2、安装所需插件 $ yum -y install gcc</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-239.htm">Vue假数据应用——表格的添加、删除、搜索</a></h4>
                <p>Vue实现假数据的添加、删除、搜索 HTML &lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;script type="text/</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-259.htm">游戏开发设计模式：单例模式</a></h4>
                <p>一、单例模式  文章目录  一、单例模式     1.1 单例模式总结介绍   1.1.1什么是单例模式 1.1.2单例模式分类 1.1.3单例类特点 1.1.4如何保证线程安全？   1.2 单例模</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1351.htm">Rabbit MQ 怎么保证可靠性、幂等性、消费顺序</a></h4>
                <p>RabbitMQ如何保证消息的可靠性 RabbitMQ消息丢失的三种情况 生产者弄丢消息时的解决方法  方法一：生产者在发送数据之前开启RabbitMQ的事务(采用该种方法由于事务机制，会导致吞吐量下</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">40</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>