<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-1.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>前端零：基本知识 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
        </head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/xcblog/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">前端零：基本知识</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h1><a id="_0" rel="nofollow"></a>前端零：基本知识</h1> <div class="toc"> <h3>文章目录</h3> <ul> <li><a href="#_0" rel="nofollow">前端零：基本知识</a></li> <li><a href="#1__10" rel="nofollow">1 像素、视口、移动端适配</a></li> <li> <ul> <li><a href="#11__11" rel="nofollow">1.1 像素和视口</a></li> <li><a href="#12__40" rel="nofollow">1.2 完美视口</a></li> <li><a href="#13_vw_63" rel="nofollow">1.3 移动端vw适配</a></li> </ul> </li> <li><a href="#2__100" rel="nofollow">2 跨域</a></li> <li> <ul> <li><a href="#21__101" rel="nofollow">2.1 同源策略</a></li> <li><a href="#22_jsonp_103" rel="nofollow">2.2 jsonp实现跨域</a></li> <li><a href="#23_CORS_208" rel="nofollow">2.3 使用CORS实现跨域</a></li> </ul> </li> <li><a href="#3_HTTP_272" rel="nofollow">3 HTTP协议、请求本文和响应报文的结构</a></li> </ul> </div> <hr color="#000000" size="1&quot;"/> <h1><a id="1__10" rel="nofollow"></a>1 像素、视口、移动端适配</h1> <h2><a id="11__11" rel="nofollow"></a>1.1 像素和视口</h2> <pre><code class="prism language-css">&lt;!--          像素：             - 屏幕是由一个一个发光的小点构成，这一个个的小点就是像素             - 分辨率：1920 x 1080 说的就是屏幕中小点的数量             - 在前端开发中像素要分成两种情况讨论：CSS像素 和 物理像素             - 物理像素，上述所说的小点点就属于物理像素             - CSS像素，编写网页时，我们所用像素都是CSS像素                 - 浏览器在显示网页时，需要将CSS像素转换为物理像素然后再呈现                 - 一个css像素最终由几个物理像素显示，由浏览器决定：                     默认情况下在pc端，一个css像素 = 一个物理像素          视口（viewport）             - 视口就是屏幕中用来显示网页的区域<span class="token punctuation">(</span>简单来说视口就是游览器的窗口<span class="token punctuation">)</span>             - 可以通过查看视口的大小，来观察CSS像素和物理像素的比值             - 默认情况下：                 视口宽度 1920px（CSS像素）                         1920px（物理像素）                         - 此时，css像素和物理像素的比是 1<span class="token punctuation">:</span>1              - 放大两倍的情况：                 视口宽度 960px（CSS像素）                         1920px（物理像素）                         -<span class="token property">此时，css像素和物理像素的比是1</span><span class="token punctuation">:</span>2              - 我们可以通过改变视口的大小，来改变CSS像素和物理像素的比值      --&gt;</code></pre> <h2><a id="12__40" rel="nofollow"></a>1.2 完美视口</h2> <pre><code class="prism language-css">    &lt;!--          移动端默认的视口大小是<span class="token function">980px</span><span class="token punctuation">(</span>css像素<span class="token punctuation">)</span>，             默认情况下，移动端的像素比就是  980/移动端宽度  （980/750）             如果我们直接在网页中编写移动端代码，这样在980的视口下，像素比是非常不好，                 导致网页中的内容非常非常的小             编写移动页面时，必须要确保有一个比较合理的像素比：                 1css像素 对应 2个物理像素                 1css像素 对应 3个物理像素              - 可以通过meta标签来设置视口大小              - 每一款移动设备设计时，都会有一个最佳的像素比，                 一般我们只需要将像素比设置为该值即可得到一个最佳效果                 将像素比设置为最佳像素比的视口大小我们称其为完美视口                  将网页的视口设置为完美视口                 &lt;meta name=<span class="token string">"viewport"</span> content=<span class="token string">"width=device-width, initial-scale=1.0"</span>&gt;                  结论：以后再写移动端的页面，就把上边这个玩意先写上      --&gt;</code></pre> <h2><a id="13_vw_63" rel="nofollow"></a>1.3 移动端vw适配</h2> <pre><code class="prism language-html"><span class="token comment">&lt;!--          1、不同的设备完美视口的大小是不一样的             iphone6 -- 375             iphone6plus -- 414          由于不同设备视口和像素比不同，所以同样的375个像素在不同的设备下意义是不一样，             比如在iphone6中 375就是全屏，而到了plus中375就会缺一块          所以在移动端开发时，就不能再使用px来进行布局了          2、vw 表示的是视口的宽度（viewport width），vw对于PC端兼容性不太好，老版游览器并不支持，单移动端都使用，所以移动端可以使用vw。             - 100vw = 一个视口的宽度             - 1vw = 1%视口宽度              vw这个单位永远相当于视口宽度进行计算              设计图的宽度                 750px 1125px              设计图                  750px                使用vw作为单位                 100vw              创建一个 48px x 35px 大小的元素              100vw = 750px(设计图的像素) 0.1333333333333333vw = 1px             6.4vw = 48px(设计图像素)             4.667vw = 35px      --&gt;</span></code></pre> <h1><a id="2__100" rel="nofollow"></a>2 跨域</h1> <h2><a id="21__101" rel="nofollow"></a>2.1 同源策略</h2> <p>同源策略：最早有Netscape公司提出，是游览器的一种安全机制，同源即来源必须相同，当前网页的url和请求目标资源的url的协议、域名、端口号都必须一致，违背同源策略就是跨域，Ajax策略默认支持同源策略。</p> <h2><a id="22_jsonp_103" rel="nofollow"></a>2.2 jsonp实现跨域</h2> <p>Jsonp(JSON with padding)，是一个非官方的跨域解决方案，纯粹是凭借程序员的聪明才智开发出来的，<mark>只支持get请求</mark>。</p> <p>网页中有一些标签天生就具有跨域能力，比如：img，link，iframe，script等。<br /><mark>JSONP就是利用script标签的跨域能力来发送Ajax请求的，通过script的src属性获取的是一个函数调用的字符串，同时这个字符串在script标签中需要有定义</mark>。</p> <ul> <li>1 通过原生的JS来实现JSONP：</li> </ul> <p><mark>script标签为什么能够实现跨域？？？ajax请求存在跨域的问题，是由游览器中的Ajax引擎来判定的，script的src属性发的请求是由游览器引擎发的普通的http请求，不会受到Ajax引擎的限制，不存在跨域的问题。</mark></p> <pre><code class="prism language-javascript"><span class="token comment">//前端页面</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span> 请输入用户名：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">&gt;</span> 请输入密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span><span class="token keyword">function</span><span class="token function">hasUser</span><span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>username<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;</span> password<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"用户名和密码重复"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token keyword">var</span> str<span class="token operator">=</span> username<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">||</span> password<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">?</span><span class="token string">"用户名重复"</span><span class="token operator">:</span><span class="token string">"密码重复"</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>   window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">var</span> btn<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>     btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">var</span> username<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token keyword">var</span> password<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token comment">//使用原生的js来实现jsonp</span><span class="token comment">//1 创建一个script标签</span><span class="token keyword">var</span> script<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token comment">//2 设置script标签的src,即url,jsonp只能实现get请求，如果要将数据发送给后端服务器，</span><span class="token comment">//只能进行url的拼接，将数据放在url中发送给后端</span>       url<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8000/jsonp?username="</span><span class="token operator">+</span> username<span class="token operator">+</span><span class="token string">"&amp;password="</span><span class="token operator">+</span> password       script<span class="token punctuation">.</span>src<span class="token operator">=</span> url<span class="token comment">//3 将script标签添加到页面中</span>       document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token comment">// console.log(`用户名为${username},密码为${password}`)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></code></pre> <pre><code class="prism language-javascript"><span class="token comment">//后端页面</span><span class="token comment">//1.引入express</span><span class="token keyword">const</span> express<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token comment">//2. 创建应用对象</span><span class="token keyword">const</span> app<span class="token operator">=</span><span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//设置使用原生的js来实现jsonp进行跨域,判断用户名和密码是否已经存在</span> app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">"/jsonp"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> usernames<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token keyword">const</span> passwords<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token string">"666666"</span><span class="token punctuation">,</span><span class="token string">"0a2345"</span><span class="token punctuation">]</span><span class="token keyword">var</span> username<span class="token operator">=</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>username<span class="token keyword">var</span> password<span class="token operator">=</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>password<span class="token keyword">var</span> uindex<span class="token operator">=</span>usernames<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token keyword">var</span> pindex<span class="token operator">=</span> passwords<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>   response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hasUser(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${<!-- --></span>uindex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${<!-- --></span>pindex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token comment">//最终返回给前端页面的是类似hasUser(1,0)的函数调用</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务已启动，8000端口监听中"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <ul> <li>2 通过jQuery来实现JSONP：</li> </ul> <pre><code class="prism language-javascript"><span class="token comment">//前端页面</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span> 请输入用户名：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">&gt;</span> 请输入密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span><span class="token comment">//  2 使用jQuery来实现JSONP</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">var</span> username<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token keyword">var</span> password<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token comment">//在jQuery中url后必须带callback=?这个参数，这个就相当于原生中的hasUser()使得不再需要自己定义处理的函数了，</span><span class="token comment">//只需要在回调函数中对返回的数据进行处理就可以了</span>     $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8000/jsonp?callback=?"</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span>username<span class="token operator">:</span>username<span class="token punctuation">,</span>password<span class="token operator">:</span>password<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span></code></pre> <pre><code class="prism language-javascript"><span class="token comment">//后端页面</span> app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">"/jsonp"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> usernames<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token keyword">const</span> passwords<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token string">"666666"</span><span class="token punctuation">,</span><span class="token string">"0a2345"</span><span class="token punctuation">]</span><span class="token keyword">var</span> username<span class="token operator">=</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>username<span class="token keyword">var</span> password<span class="token operator">=</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>password<span class="token keyword">var</span> uindex<span class="token operator">=</span>usernames<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token keyword">var</span> pindex<span class="token operator">=</span> passwords<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token keyword">const</span> cb<span class="token operator">=</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback<span class="token comment">//jQuery自带的回调函数，不需要自己定义函数了，直接在前端的回调函数中取数据就可以了</span>   response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${<!-- --></span>cb<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">([</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${<!-- --></span>uindex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${<!-- --></span>pindex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">])</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <h2><a id="23_CORS_208" rel="nofollow"></a>2.3 使用CORS实现跨域</h2> <p>CORS(Cross-Origin Resource Sharing)，跨域资源共享。CORS是官方跨域解决方案，不需要在客户端做任何特殊操作，完全在服务器端处理，支持get和post请求。跨域资源共享标准新增了一组HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。</p> <p>CORS是怎么工作的？<br /> CORS 是通过设置一个<mark>响应头</mark>来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> //前端页面：不需要做任何更改，直接发送Ajax请求 请输入用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 请输入密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//1 创建对象</span><span class="token keyword">var</span> xhr<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//  2 进行初始化设置</span><span class="token keyword">var</span> username<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token keyword">var</span> password<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value     url<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8000/cors?username="</span><span class="token operator">+</span> username<span class="token operator">+</span><span class="token string">"&amp;password="</span><span class="token operator">+</span> password     xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token comment">//  3 发送请求</span>     xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//  4 绑定事件</span>     xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">===</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//readyState一共有4个值：</span><span class="token comment">//0：初始化new XMLHTTPRequest()</span><span class="token comment">//1:</span><span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">&gt;=</span><span class="token number">200</span><span class="token operator">&amp;</span> xhr<span class="token punctuation">.</span>status<span class="token operator">&lt;</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//  输出响应体</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></code></pre> <pre><code class="prism language-javascript">app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">"/cors"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token comment">//设置响应头,来实现CORS的跨域</span>   response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//还可以设置允许进行跨域发送Ajax的网页的url,使用*表示对所有网页都允许</span><span class="token comment">// response.setHeader("Access-Control-Allow-Origin", "http://127.0.0.1:5500");</span><span class="token comment">//设置允许网页能够设置任意的请求头</span>   response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置允许网页所有的请求方法</span>   response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Method"</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> usernames<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token keyword">const</span> passwords<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token string">"666666"</span><span class="token punctuation">,</span><span class="token string">"0a2345"</span><span class="token punctuation">]</span><span class="token keyword">var</span> username<span class="token operator">=</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>username<span class="token keyword">var</span> password<span class="token operator">=</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>password<span class="token keyword">var</span> uindex<span class="token operator">=</span>usernames<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token keyword">var</span> pindex<span class="token operator">=</span> passwords<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>     username<span class="token operator">:</span>uindex<span class="token punctuation">,</span>     password<span class="token operator">:</span>pindex<span class="token punctuation">}</span><span class="token punctuation">)</span>   response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <h1><a id="3_HTTP_272" rel="nofollow"></a>3 HTTP协议、请求本文和响应报文的结构</h1> <pre><code class="prism language-markup">在这里插入代码片</code></pre> <pre><code class="prism language-markup"># HTTP HTTP（hypertext transport protocol）协议『超文本传输协议』，协议详细规定了浏览器和万维网服务器之间互相通信的规则。 约定, 规则  ## 请求报文 重点是格式与参数  行      POST  /s?ie=utf-8  HTTP/1.1    		请求行包含三部分内容： 请求类型(get,post...) 	url(可能带有参数)	HTTP协议版本 头      Host: atguigu.com         Cookie: name=guigu         Content-type: application/x-www-form-urlencoded         User-Agent: chrome 83 空行 体      username=admin&amp;password=admin 		get请求的请求体为空，post请求请求体可以不为空   ## 响应报文  行      HTTP/1.1  200  OK 		响应行包括三部分：HTTP协议版本	响应状态码	响应字符串 头      Content-Type: text/html;charset=utf-8         Content-length: 2048         Content-encoding: gzip         响应头：主要是对响应体的内容做一个描述 空行     体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>尚硅谷<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>         响应体：是主要的返回结果  * 404 * 403 * 401 * 500 * 200</code></pre> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>下一个：<a href="/html/category/article-2.htm">Elasticsearch Mapping 中配置自定义Analyzer</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-240.htm">vue写一个简单的文件上传控件</a></h4>
                <p>这篇将介绍如何写一个简单的基于Vue+Element的文件上传控件。 控件将具有 1. 上传队列的列表，显示文件名称，大小等信息，可以显示上传进度实时刷新 2. 取消上传  &nbsp;使用Eleme</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-219.htm">如何使用HTML5 SVG绘制正弦波？</a></h4>
                <p>要使用SVG绘制正弦波，请使用以下近似正弦波的一半。我使用三次贝塞尔近似。使用&lt;path&gt;元素。 示例 &lt;!DOCTYPE&nbsp;html&gt; &lt;html&gt; &n</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-228.htm">Android jetpack room+ViewModel+liveData 数据自动更新</a></h4>
                <p>Android jetpack room的使用_安果移不动的博客-CSDN博客 接上篇博客 我们用google推荐的这种方式  &nbsp; 修改： StudentDao package com.an</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-205.htm">Ribbon（一）远程调用RestTemplate</a></h4>
                <p>目录 一、RestTemplate介绍 二、需求说明 1、业务结构及说明 三、模块搭建 1、新建一个maven项目 2、添加ribbon依赖 3、编辑yml 4、主程序 5、编辑RibbonContr</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-237.htm">Vue3实现跑马灯效果_vue.js</a></h4>
                <p>本文实例为大家分享了Vue3实现跑马灯效果的具体代码，供大家参考，具体内容如下 先看效果：  html部分代码  &lt;div class="app"&gt;              &lt;p </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-206.htm">眼见不一定为实：调用链HBase倾斜修复</a></h4>
                <p>hello，大家好，我是小楼。 今天给大家分享一个关于HBase数据倾斜的排查案例，不懂调用链？不懂HBase？没关系，看完包懂~ 背景 最近HBase负责人反馈HBase存储的调用链数据偶尔出现极其</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-242.htm">PyQt5 按钮Button 添加事件(信号/槽)</a></h4>
                <p>本文基于PyQt5 按钮Buttons样式设计，针对按钮添加响应的点击事件触发。 效果截图:  PyQt 模型设计：  &nbsp;PyQt 设计器截图：  *.UI 源码 &lt;?xml vers</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-233.htm">使用Python实现KNN算法解决简单分类问题</a></h4>
                <p>使用Python实现KNN算法解决简单分类问题 KNN分类 KNN算法属于监督学习算法，它可以解决分类问题，也可以解决回归问题。对于一组带标签的数据，当我们使用KNN算法进行分类时，有两种分类方式。K</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-253.htm">Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required List parame</a></h4>
                <p>问题：Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required List par</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-234.htm">Pandas 如何处理超大规模数据</a></h4>
                <p>作者&nbsp;|&nbsp;Sara&nbsp;A.&nbsp;Metwalli 译者&nbsp;|&nbsp;盖磊 策划&nbsp;|&nbsp;陈思  处理大规模数据集时常是棘手的事情，尤其在内</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>