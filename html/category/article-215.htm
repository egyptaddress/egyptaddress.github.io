<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://egyptaddress.github.io/html/category/article-215.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>C# 正则表达式判断是否是有效的文件、文件夹路径 - EgyptAddress</title>
    <link rel="icon" href="/assets/addons/xcblog/img/egyptaddress/favicon.ico" type="image/x-icon"/>
        <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/addons/xcblog/css/egyptaddress/style-starter.css">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?54eb6c7259fef0472f9cccce059c36b2";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> EgyptAddress
                                    </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">C# 正则表达式判断是否是有效的文件、文件夹路径</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/html/category/">文章分类</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                <div class="post-content-content">
                      				  				  				<h1 id="c-正则表达式判断是否是有效的文件文件夹路径">C# 正则表达式判断是否是有效的文件、文件夹路径</h1> <h2 id="省流">省流</h2> <pre><code class="language-c#">/// &lt;summary&gt; /// 是否有效的文件，文件夹路径 /// &lt;/summary&gt; /// &lt;param name="val"&gt;&lt;/param&gt; /// &lt;returns&gt;是，返回true；不是返回false&lt;/returns&gt; public bool IsValidFolderPath(string val) {     Regex regex = new Regex(@"^([a-zA-Z]:\\)([-\u4e00-\u9fa5\w\s.()~!@#$%^&amp;()\[\]{}+=]+\\?)*$");     Match result = regex.Match(val);     return result.Success; }  // "F:\\Total客户端项目\\客户端项目\\2017-01-09 Client\\(aa)\\V1.3.4\\New_1.2\\V13&amp;V14\\.()~!@#$%^&amp;()-+="; // 匹配结果：true</code></pre> <p>解释：</p> <p>分为2大段，一段匹配盘符，一段匹配后续文件、文件夹路径</p> <ol> <li> <p>^<code>([a-zA-Z]:\\)</code>：必须以盘符的形式开头。</p> <p><code>^</code>表示从起始位置匹配，<code>[a-zA-Z]</code>表示第1位必须是<code>a~z</code>或<code>A~Z</code>其中之一。<code>:\\</code>表示第1位后必须接字符串<code>:\</code>。<code>\\</code>是正则中<code>\</code>的转义。</p> </li> <li> <p><code>([-\u4e00-\u9fa5\w\s.()~!@#$%^&amp;()\[\]{}+=]+\\?)*$</code>：后续以一定取值范围组成一个个结构。</p> <p>先看[]内，<code>\u4e00-\u9fa5</code>表示匹配汉字，<code>\w</code>，<code>\s</code>都是元字符有其对应的匹配范围。其余这些字符<code>-.()~!@#$%^&amp;()\[\]{}+=</code>就代表它们自身。其中<code>\[</code>是<code>[</code>的转义，<code>\]</code>是<code>]</code>的转义。<code>[~]+</code>表示<code>[]</code>中的内容至少需要出现1次。<code>\\?</code>表示，<code>[~]</code>内的字符写完后，可以在后面接一个字符<code>\</code>，也可以不接。<code>(~)*</code>表示<code>()</code>内容可以重复任意次数，也可以一次不出现。<code>$</code>表示匹配到结束位置，搭配前面的<code>^</code>表示整个输入字符串的结构都得符合这个正则表达式。</p> </li> </ol> <p>几点注意：</p> <ol> <li>上面得<code>[~]</code>指代表达式中<code>[]</code>的所有内容，<code>（~）</code>指代表达式中<code>（）</code>的所有内容，应该挺好理解吧。</li> <li>写了解释主要是自己总结一下，你看估计也看不懂，要不直接拿去用，要不老老实实去学吧，这些都是基础，就把正则表达式的基础学了基本就够用。</li> <li>不同系统下可不可以匹配汉字是不一样的。比如C#环境里<code>\w</code>好像就可以匹配汉字，但javascript环境里<code>\w</code>就匹配不了汉字。</li> <li>正则自己的转义和放入字符串中的转义挺容易懵的，写的时候要注意。</li> <li>个人理解，只有一个路径，是判断不出来这个路径是文件还是文件夹的，因为文件夹名也可以叫<code>setup.exe</code>，文件名也可以没有后缀。windows的文件命名规范中只不允许9个字符的出现。<code>/ \ ? * : " &lt; &gt; |</code>其他都可以。</li> </ol> <h2 id="学习编写验证过程">学习编写验证过程</h2> <p>鉴于网上找了好几个都是垃圾,既不好使也不知道到底在判断啥，所以不得不万事靠自己。</p> <p>学习自<br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://deerchao.cn/tutorials/regex/regex.htm"  target="_blank" rel="nofollow">https://deerchao.cn/tutorials/regex/regex.htm 2019-11-15</a></p> <h3 id="元字符metacharacter">元字符metacharacter</h3> <table> <thead> <tr> <th>字符</th> <th>相关解释</th> <th></th> </tr> </thead> <tbody> <tr> <td>\b</td> <td>匹配单词的开头或结尾，也就是单词的分界处。可用于精确查找一个单词</td> <td></td> </tr> <tr> <td>.</td> <td>匹配除了换行以外的任意字符</td> <td></td> </tr> <tr> <td>*</td> <td>*前面的内容可以重复任意次</td> <td></td> </tr> <tr> <td>+</td> <td>+前面的内容可以连续重复1或任意更多次。通俗一点说，就是至少得匹配一次。</td> <td></td> </tr> <tr> <td>?</td> <td>?前面的内容可以连续重复0或1次。</td> <td></td> </tr> <tr> <td>{x}</td> <td>x：数字。{x}前面的内容必须重复x次</td> <td></td> </tr> <tr> <td>{x,}</td> <td>x。{x,}前面的内容必须重复至少x次</td> <td></td> </tr> <tr> <td>{x,y}</td> <td>x,y：数字。{x,y}前面的内容必须重复x,y之间的次数，包括x，y</td> <td></td> </tr> <tr> <td>(xxx)</td> <td>表示分组</td> <td></td> </tr> <tr> <td>[x,y,z]</td> <td>表示单个匹配</td> <td></td> </tr> <tr> <td>\d</td> <td>匹配一位十进制数字，也就是0~9</td> <td>[0-9]</td> </tr> <tr> <td>\s</td> <td>匹配任意空白符，空格，制表符，换行符，中文全角空格等</td> <td></td> </tr> <tr> <td>\w</td> <td>匹配数字，字母，下划线【中文】</td> <td>[a-z0-9A-Z_]</td> </tr> <tr> <td>^</td> <td>匹配字符串的开始位置</td> <td></td> </tr> <tr> <td>$</td> <td>匹配字符串的结束位置</td> <td></td> </tr> </tbody> </table> <p>如何从一个字符串中查找字符串‘hi’？</p> <pre><code class="language-c#">Regex regex = new Regex("hi"); // 注意：如history，high等词中的hi也会被匹配。</code></pre> <p>如何精确查找hi这个词？使用\b</p> <pre><code class="language-c#">Regex regex = new Regex(@"\bhi\b");</code></pre> <p>这样就可以精确查找到‘hi’这个词。</p> <p>如何查找hi，xxxxx，Lucy?</p> <pre><code class="language-c#">Regex regex = new Regex(@"\bhi\b.*\bLucy\b"); // `.*`不能换行。是匹配不包含换行的任意数量字符</code></pre> <p>如何匹配一个中国电话号码？格式为：<code>xx-xxxxxxxxxxxxxxx</code></p> <pre><code class="language-c#">Regex regex = new Regex(@"\d\d-\d\d\d\d\d\d\d\d\d\d\d\d\d\d\d");</code></pre> <p>如何匹配一个188开头的电话号码？</p> <pre><code class="language-c#">Regex regex = new Regex(@"\d\d-188\d\d\d\d\d\d\d\d\d\d\d\d");</code></pre> <p>这如果要匹配一个100位数字岂不是都写不下了，所以必然存在优化写法。</p> <pre><code class="language-c#">Regex regex = new Regex(@"\d{2}-188\d{12}");</code></pre> <p>\d{2} 的话能不能匹配85555这种？与high中匹配hi一样？</p> <p>如果没有限制也是会都匹配的，如果想要精确匹配，也要在前后使用元字符\b</p> <p>如果有长号有短号想一起匹配怎么办？</p> <pre><code class="language-c#">Regex regex = new Regex(@"\d{2,3}-188\d{6,12}");</code></pre> <p>解析一个电话号相关的表达式<code>^\(?0\d{2}[) -]?\d{8}</code></p> <ol> <li><code>^</code>:表示验证字符串必须以<code>（</code>或0开头</li> <li><code>\(?</code> :<code>\(</code>是<code>(</code>的转义，<code>?</code>表示出现1次或不出现</li> <li><code>0\d{2}</code> : 表示0起始后面跟2位数字</li> <li><code>[) -]?</code>：表示数字后面的1位或者什么都没有，或者是<code>）</code>,<code>空格</code>,<code>-</code>3个中的一个</li> <li><code>\d{8}</code>：表示8位数字。</li> </ol> <pre><code class="language-c#">string phone = "(010)88886666"; string phone1 = "(010x88886666"; string phone2 = "011)-888866660000"; string phone3 = "011-888866660000"; string phone4 = "99011-88886666"; Regex regex30 = new Regex(@"^\(?0\d{2}[) -]?\d{8}"); Match resultphone = regex30.Match(phone);// 匹配成功 Match resultphone1 = regex30.Match(phone1);// 匹配失败，因为010后出现了[]中不存在的字符 Match resultphone2 = regex30.Match(phone2);// 匹配失败，因为[]后没有接8位数字，不是说-也在[]中就可以，[]永远只匹配一个位置 Match resultphone3 = regex30.Match(phone3);// 匹配成功，因为这个正则表达式没有用$限制结尾 Match resultphone4 = regex30.Match(phone4);// 匹配失败，因为这个正则表达式用^限制了开头，必须为（或0。</code></pre> <h3 id="关于和">关于<code>^</code>和<code>$</code></h3> <p>以前老不理解这玩意都啥用，其实就是对匹配范围进行限制。以一段数字字符为例。</p> <p>正常使用<code>9/d{2}</code>进行匹配，匹配条件可以解释为，“以9开头并在后面跟任意2位数字的字符串”可以匹配成功，也就是998。</p> <p>但如果使用^进行限制<code>^9/d{2}</code>。匹配条件就变为“输入字符串必须是以9并在后面跟任意2位数字开头的字符串”。匹配就会失败。</p> <p>把9去掉<code>^/d{2}</code>，匹配条件就变为“输入字符串必须是以任意2位数字开头的字符串”。匹配就会成功。</p> <p>若用$限制<code>/d{2}$</code>，匹配条件就变为“输入字符串必须是以任意2位数字结尾的字符串”。匹配成功。</p> <p>若改为<code>58$</code>，匹配条件就变为“输入字符串必须是以‘58’结尾的字符串”。匹配就会失败。</p> <p>若用<code>^，$</code>限制，<code>^/d{2}$</code>,匹配条件就变为“输入字符串必须是2位数字的字符串”，匹配失败。</p> <p>改为<code>^/d{18}$</code>，,匹配条件就变为“输入字符串必须是18位数字的字符串”，匹配成功。</p> <p>代码如下：</p> <pre><code class="language-c#">string numberStr2 = "123456789987645312"; Regex regex2 = new Regex(@"9\d{2}"); Match result2 = regex2.Match(numberStr2);  Regex regex3 = new Regex(@"^9\d{2}"); Match result3 = regex3.Match(numberStr2);  Regex regex4 = new Regex(@"\d{2}$"); Match result4 = regex4.Match(numberStr2);  Regex regex5 = new Regex(@"58$"); Match result5 = regex5.Match(numberStr2);  Regex regex6 = new Regex(@"^\d{2}$"); Match result6 = regex6.Match(numberStr2);  Regex regex7 = new Regex(@"^\d{18}$"); Match result7 = regex7.Match(numberStr2);</code></pre> <h3 id="关于和-1">关于<code>()</code>，<code>[]</code>,和<code>{}</code></h3> <p>首先是{}，这个没什么说的，就是表示重复次数的。{2}，{2,},{2,5}这种。</p> <p>其次[]表示单个匹配。只能表示1个位置，这个位置的内容必须为[]中的选项之一。</p> <p>看到这么描述大约有以下几种疑问</p> <p>单独使用[]有啥用？</p> <pre><code class="language-c#">Regex regex8 = new Regex(@"[打]"); Match result8 = regex8.Match(Str8);  Regex regex9 = new Regex(@"[打s]"); Match result9 = regex9.Match(Str8);  Regex regex10 = new Regex(@"[打s黑]"); Match result10 = regex10.Match(Str8);  Regex regex11 = new Regex(@"[黑]"); Match result11 = regex11.Match(Str8);  Regex regex12 = new Regex(@"打"); Match result12 = regex12.Match(Str8);  Regex regex13 = new Regex(@"黑s打"); Match result13 = regex13.Match(Str8);// 匹配失败  Regex regex14 = new Regex(@"[黑s打]");// 匹配成功，找到‘打’ Match result14 = regex14.Match(Str8);  // 单独使用就是从头至尾匹配输入字符串的每一个字符。找到输入字符串中第一个能与[]中任意一个字符匹配的上的。 // 如果[]中只有1个字符，那有没有[]完全一样。如果[]内有多个字符是不一样的。 // 想象不出来使用场景，[]在实际应用中也大多配合其他条件一起使用</code></pre> <p>[]里要是有元字符怎么办？</p> <p>解决方法很简单：转义。</p> <p>但具体怎么转其实还是有点绕。这个绕不是说有多难，而是这个点你需要有印象，遇到的时候要能反映过来。</p> <p>这个我认为很容易懵的点在于C#自身字符串的转义与正则表达式的转义混合。</p> <p>首先明确一下C#中的转义，C#中转义有2种方法：</p> <pre><code class="language-c#">// 字符原文： //a我打[]{}aa\bb"cc''dd^ee/dff //another row // '[',']','{','}',''','^','/'本身就不需要转义，需要转义的是'\','"',换行  // 第1种 需要转义的符号前加'\' string stringStr1 = "a我打[]{}aa\\bb\"cc''dd^ee/dff\r\nanother row"; // 第2种，整个字符串用'@'修饰 // 这种情况下，'\'，换行不用转义了。但'"'还需要转义，因为不转义字符串就提前结束了，用两个双引号'""'表示普通字符'"' string stringStr2 = @"a我打[]{}aa\bb""cc''dd^ee/dff another row";</code></pre> <p>正则表达式中需要转义的符号很多，所有元字符全部需要转义。但好消息是转义方式只有1种，就是在需要转义的符号前加<code>\</code>。</p> <p>这再把这些表达式放入C#字符串中，就分不清到底是字符串转义，还是正则转义，正则转义后进入字符串会不会又要转义等等等等。懵。</p> <p>元字符包括：( ) [ ] { } \ ^ $ | ? * . + /。 ”/“需不需要转义好像有点争议。查了一下发现很多编译器关于正则的转义是有一些默认处理的，也没找到个权威的规则，就视具体情况而定。</p> <pre><code class="language-c#">// 上面的例子，匹配一个9开头跟2个数字的字符 Regex regex15 = new Regex("9\d{2}"); // 这样写就会报错，因为正则'\d'中的'\'是c#字符串中转义的标识。这么写C#就会认为'\d'是一个转义符，而又不知道转义成了什么，就会报错：CS1009：无法识别的转义序列。 // 所需要将'\'转义，如上使用@或另一种转义方法都可以 Regex regex16 = new Regex(@"9\d{2}"); Regex regex17 = new Regex("9\\d{2}");  // 另一个很需要有印象的例子。就是一个位置只能使用字符'\'或字符'd' // 其实很简单，用[]就行 Regex regex18 = new Regex("[\d]");//如上报错：CS1009：无法识别的转义序列。 // 一开没转义，改为 Regex regex19 = new Regex("[\\d]");//编译通过，完活。 string str10 = @"a我打[]{}aa\bb""cc''dd^ee/dff\\"; Match result19 = regex19.Match(str10);// 匹配失败 // 然而result19的结果是 匹配失败。 // 这就是字符转义与正则转义的混合。 // '\\d'仅处理了字符串中'\'的问题，没有解决正则'[\d]'中'\'也需要转义的问题； // 想要实现一个位置只能使用字符'\'或字符'd'，正确的正则表达应该为[\\d] // 那么再将其放入C#字符串中，每个'\'都要再转义一次，即为 Regex regex20 = new Regex("[\\\\d]"); Match result20 = regex20.Match(str10); // 或 Regex regex21 = new Regex(@"[\\d]"); Match result21 = regex21.Match(str10); // 我还好奇了一下[]中有重复字符会怎样 Regex regex22 = new Regex(@"[\\\\d]"); Match result22 = regex22.Match(str10); // 结果好像没啥区别，有相同字符无所谓的，没影响  // 这里后续使用又发现了一点，补充一下 // 前文提到: Regex regex19 = new Regex("[\\d]"); string str10 = @"a我打[]{}aa\bb""cc''dd^ee/dff\\"; Match result19 = regex19.Match(str10); // 会编译通过，但是匹配失败。这里遗漏了一个问题，就是new Regex("[\\d]");到底再匹配什么？ // 答案就是它再匹配'/d'，也就是任意以为0~9的数字 string str101 = @"a我打[]{}aa\bb""cc''dd^ee/dff\\"; string str102 = @"a我打[]{}aa\bb""cc''d9d^ee/dff\\";//中间加了个9 Regex regex191 = new Regex("[\\d]"); Match result191 = regex191.Match(str101);//匹配失败 Match result192 = regex191.Match(str102);//匹配成功，找到9 //所以[],不止能匹配[]中的实际内容，还可以配合元字符匹配所有那一类字符</code></pre> <p><code>[]</code>搭配<code>-</code>可以表示连续的字符</p> <pre><code class="language-c#">Regex regex22 = new Regex("[0-3]");// 某位置匹配0~3，也就是0，1，2，3</code></pre> <p><code>[]</code>搭配<code>^</code>可以表示排除</p> <pre><code class="language-c#">Regex regex23 = new Regex("[^0-3]");//  某位置匹配除了0，1，2，3都可以。</code></pre> <p>可以复习一下要是就想匹配<code>-</code>，<code>^</code>，甚至<code>[]</code>怎么办？</p> <pre><code class="language-c#">Regex regex24 = new Regex("[\\^\\[\\]\\-]"); //或 Regex regex25 = new Regex(@"[\^\[\]\-]");</code></pre> <p>这里实际试了一下这些特殊字符，除了<code>[ 和 ]</code>不转义也能匹配，迷惑。</p> <p>最后就是()，()有很多功能，包括限制多选结构的范围，分组，捕获文本，环视，特殊模式处理。</p> <p>我感觉比较基础的使用就是限制多选与分组。</p> <pre><code class="language-c#">// 匹配必须整段一模一样的abc或bcd或cde， Regex regex26 = new Regex("(abc|bcd|cde)");  // 匹配必须有连续2个adb的重复，也就是abcabc，abcaabc不行 Regex regex27 = new Regex("(abc){2}");</code></pre> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-214.htm">Spring Boot 分层构建 Docker 镜像实战</a></p>
                                        <p>下一个：<a href="/html/category/article-216.htm">Citus 分布式 PostgreSQL 集群 &#8211; SQL Reference(SQL支持和变通方案)</a></p>
                                    </div>

                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-525.htm">Firefox中的HTML5输入类型“数字”</a></h4>
                <p>Firefox不支持输入类型编号的min属性，但在Google Chrome中可以正常使用。 示例 让我们看一个例子- &lt;!DOCTYPE&nbsp;html&gt; &lt;html&gt; </p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-228.htm"># kubernetes调度之nodeName与NodeSelector</a></h4>
                <p>系列目录  Kubernetes的调度有简单，有复杂，指定NodeName和使用NodeSelector调度是最简单的，可以将Pod调度到期望的节点上。 本文主要介绍kubernetes调度框架中的N</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1341.htm">FreeRTOS进阶之队列示例完全解析_操作系统</a></h4>
                <p>目录  前言 1.队列创建函数 2.入队  2.1 xQueueGenericSend() 2.2 xQueueGenericSendFromISR ()  3.出队     前言 FreeRTOS提</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-246.htm">Vue内置组件的component标签</a></h4>
                <p>component标签：它的用途是可以动态绑定我们的组件,根据数据不同更换不同的组件. 有一个is属性，is的作用就是显示指定的组件 官方说明：渲染一个“元组件”为动态组件。依 is 的值，来决定哪个</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-239.htm">Vue假数据应用——表格的添加、删除、搜索</a></h4>
                <p>Vue实现假数据的添加、删除、搜索 HTML &lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;script type="text/</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1332.htm">Centos7离线安装Nginx亲测版</a></h4>
                <p>Centos7 Nginx编译包制作 找一台可连接互联网的虚拟机来制作编译好的Nginx包，具体操作如下 1、准备一台虚拟机（可访问互联网） 2、安装所需插件 $ yum -y install gcc</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-1321.htm">Spring Boot的依赖配置文件的解析</a></h4>
                <p>SpringBoot笔记-day01 在pom.xml中 &lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&l</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-251.htm">C# 有关List&lt;T&gt;的Contains与Equals方法_在线工具</a></h4>
                <p>【以下内容仅为本人在学习中的所感所想，本人水平有限目前尚处学习阶段，如有错误及不妥之处还请各位大佬指正，请谅解，谢谢！】 #Updated【2022.5.2 修复移动端排版混乱的问题】 ！！！观前提醒</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-243.htm">SpringMVC访问静态资源的三种方式</a></h4>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果你的DispatcherServlet拦截 *.do这样的URL，就不存在访问不到静态资源的问题。如果你的Dispatch</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/html/category/article-217.htm">Vuex入门mapState, mapGetters, mapMutations, mapActions详解终结篇带源码</a></h4>
                <p>目录  知识不足的地方赶快点击学习呦~~~  Vuex入门(一)—— state,mapState,…mapState对象展开符详解Vuex入门(二)—— mutations详解Vuex入门(三)——</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">32</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
                                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
                                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
                                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
    
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                        <p class="m-0">EgyptAddress 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->

    <!-- all js scripts and files here -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery-3.3.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.waypoints.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })

        $('.post-content-content .js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/addons/xcblog/js/frontend/egyptaddress/bootstrap.min.js"></script>
</body>

</html>